{
	"info": {
		"name": "External Data Source",
		"_postman_id": "32cec1f8-4413-c6fd-55db-7c7981041dba",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_CWF Void",
			"item": [
				{
					"name": "Sale_Cash_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "993d7e41-9491-481e-a658-0eb8e1b75b77",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"// Product Line",
									"pm.globals.set(\"Qty\", i * 1);",
									"pm.globals.set(\"ProductId\", 1);",
									"pm.globals.set(\"P_Amt\", 2);",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"pm.globals.set(\"P_Ref_Qty\",i * 0);",
									"pm.globals.set(\"P_Ref_Amt\",0);",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 0);",
									"",
									"// Tender Line",
									"pm.globals.set(\"TenderId\", 2);",
									"pm.globals.set(\"T_Qty\", 1);",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"pm.globals.set(\"ProgramId\", 1);",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.set(\"I_EligibleAmt\", i * 2);",
									"pm.globals.set(\"I_Points\",i * 2);",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"pm.globals.set(\"I_RefPoints\",0);",
									"",
									"",
									"/*",
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_Amt\");",
									"pm.globals.set(\"P_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",i * 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i * 2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * 2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",0);",
									"*/",
									"postman.setGlobalVariable(\"getTimeStamp\",() => ",
									"{",
									"var newDate = new Date();",
									"var year = newDate.getFullYear().toString();",
									"var month = (1 + newDate.getMonth()).toString();",
									"var dayVar = newDate.getDate().toString();",
									"var hours = newDate.getHours().toString();",
									"var minutes = newDate.getMinutes().toString();",
									"var seconds = newDate.getSeconds().toString();",
									"var milliseconds = newDate.getMilliseconds().toString();",
									"var time = hours + ':' + minutes + ':' + seconds + '.' + milliseconds;",
									"var validDate =  month + '/' + dayVar + '/' + year + \" \" + time;",
									"",
									"postman.setEnvironmentVariable('timeStampVariable', validDate);",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest1\",() => ",
									"{",
									"    //  - Validating Schema -",
									"    tests[\"<-------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Schema is Valid\"] = tv4.validate(responseJSON, schema);",
									"    console.log(\"Reward Schema is Valid ----> \" + tv4.validate(responseJSON, schema));  ",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest2\",() => ",
									"{",
									" //  - Validating http Status Code,Content Type, Response Time -   ",
									"    tests[\"<--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Status code is 200\"] =  responseCode.code === 200;",
									"    console.log(\"Status code is 200\");",
									"    tests[\"Content - Type is Present\"] =  postman.getResponseHeader(\"Content-Type\");",
									"    console.log(\"Content - Type is Present\");",
									"    tests[\"Response Time is \"+  responseTime] =  responseTime < 200;",
									"    console.log(\"Response Time is \"+  responseTime);",
									"    tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"ErrorMessage\",() =>",
									"{",
									"//   Display Error Details   ",
									"  tests[\"Test Case Failed  ---->  \" + responseJSON.details] = responseCode.code === 200;",
									"  console.log(\"Test Case Failed ----> \" +responseJSON.details);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATransactions\",() =>",
									"{",
									"tests[\"<-----------------QC_PATransactions Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransactions Table-------------------->\");",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"",
									"var v1 =responseJSON.id;",
									"var v2 =responseJSON.terminal.id;",
									"var v3 =responseJSON.transactionTypeId;",
									"var v4 =responseJSON.timeStamp;",
									"var v5 =responseJSON.userName;",
									"var v6 =responseJSON.originalTransactionId;",
									"var v7 =responseJSON.recordedOffline;",
									"var v8 =responseJSON.transReferenceNumber;",
									"",
									"tests[\"--\" + P + \"-->PATransaction ID is : \"+ v1] = v1 !== undefined ;",
									"console.log(\"---->PATransaction ID is \"+ v1);",
									"tests[\"--\" + P + \"->Terminal ID is \" + v2] = v2 === 4;",
									"console.log(\"--->Terminal ID is \" + v2);",
									"tests[\"--\" + P + \"-->Transaction Type Id is \"+v3] =v3 === pm.globals.get(\"Type\");",
									"console.log(\"---->Transaction Type Id is \"+ v3);",
									"tests[\"--\" + P + \"-->Transaction Date is \"+v4] =v4 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ v4);",
									"tests[\"--\" + P + \"-->User Name is \"+v5] =v5 === \"SuperUser\" ;",
									"console.log(\"---->User Name is \"+ v5);",
									"if(responseBody.has(\"originalTransactionId\"))",
									"{",
									"  //  - Validating Value of Original Transaction ID",
									"tests[\"--\" + P + \"-->Original Transaction ID is : \"+ v6] = v6 !== undefined ;",
									"console.log(\"----->Original Transaction ID is \"+ v6);  ",
									"}",
									"tests[\"--\" + P + \"-->Recorded Offline is \"+v7] =v7 === false ;",
									"console.log(\"---->Recorded Offline is \"+ v7);",
									"tests[\"--\" + P + \"-->Transaction Reference Number is \"+v8] =v8 !== undefined ;",
									"console.log(\"---->Transaction Reference Number is \"+ v8);",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem\",() =>",
									"{",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"",
									"tests[\"<-----------------Product Line------------------>\"] = responseBody.has(\"products\");",
									"console.log(\"<1-----------------------Product Line-------------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var pid1=responseJSON.products[0].id; ",
									"var pid2=responseJSON.products[0].quantity;",
									"var pid3=responseJSON.products[0].amount;",
									"var pid4=responseJSON.products[0].extendedAmount;",
									"var pid5=responseJSON.products[0].refundedQty;",
									"var pid6=responseJSON.products[0].refundedAmount;",
									"var pid7=responseJSON.products[0].refundedExtAmount;",
									"var pid8=responseJSON.products[0].eligibleAmount;",
									"var pid9 =responseJSON.products[0].product.id;",
									"",
									"tests[\"---->PATransline Item ID of Product Line is \"+pid1] = pid1 !== undefined;",
									"console.log(\"---->PATransline Item ID for Product Line is \"+ pid1);",
									"tests[\"---->PAItem ID is \" + pid9] = pid9 === pm.globals.get(\"ProductId\");",
									"console.log(\"---->PAItem ID is \"+ pid9);",
									"tests[\"---->Quantity is \"+pid2] = pid2=== pm.globals.get(\"Qty\");",
									"console.log(\"---->Quantity is \"+ pid2);",
									"tests[\"---->Amount is \"+pid3] = pid3=== pm.globals.get(\"P_Amt\");",
									"console.log(\"---->Amount is \"+ pid3);",
									"tests[\"---->Extended Amount is \"+pid4] = pid4=== pm.globals.get(\"P_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ pid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+pid5] = pid5=== pm.globals.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ pid5);",
									"tests[\"----->Refunded Amount is \"+pid6] = pid6=== pm.globals.get(\"P_Ref_Amt\");",
									"console.log(\"---->Refunded Amount is \"+ pid6);",
									"tests[\"----->Refunded Ext Amount is \"+pid7] = pid7=== pm.globals.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ pid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+pid8] = pid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ pid8);",
									"",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.globals.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"t------>Quantity is \"+td3] = td3 === pm.globals.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.globals.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.globals.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.globals.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.globals.get(\"T_Ref_Amt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.globals.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"tests[\"--\" + P + \"------>Employee ID is : \"+ Td13] = Td13 !== undefined",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"tests[\"<------------------Reward Line------------------>\"] = responseBody.has(\"rewards\");",
									"console.log(\"<1-----------------------Reward Line-------------------->\");    ",
									"",
									"//   - Validating  Reward Line Item    ",
									"",
									"var rid1=responseJSON.rewards[0].id; ",
									"var rid2=responseJSON.rewards[0].reward.id;",
									"var rid3=responseJSON.rewards[0].quantity;",
									"var rid4=responseJSON.rewards[0].amount;",
									"var rid5=responseJSON.rewards[0].extendedAmount;",
									"var rid6=responseJSON.rewards[0].refundedQty;",
									"var rid7=responseJSON.rewards[0].refundedAmount;",
									"var rid8=responseJSON.rewards[0].refundedExtAmount;",
									"var rid9=responseJSON.rewards[0].eligibleAmount;",
									"var rid10=responseJSON.rewards[0].employeeId;",
									"",
									"",
									"tests[\"---->PATransline Item ID of Reward Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID for Reward Line is \"+ rid1);",
									"tests[\"-------->PAItem ID is \" + rid2] = rid2 === pm.globals.get(\"RewardId\");",
									"console.log(\"------->PAItem ID is \"+ rid2);",
									"tests[\"------->Quantity is \"+rid3] = rid3=== pm.globals.get(\"R_Qty\");",
									"console.log(\"------->Quantity is \"+ rid3);",
									"tests[\"---->Amount is \"+rid4] = rid4=== -2;",
									"console.log(\"---->Amount is \"+ rid4);",
									"tests[\"----->Extended Amount is \"+rid5] = rid5=== pm.globals.get(\"R_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Reward Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"---->Refunded Quantity is \"+rid6] = rid6=== pm.globals.get(\"R_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid6);",
									"tests[\"---->Refunded Amount is \"+rid7] = rid7=== pm.globals.get(\"R_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Amount is \"+ rid7);",
									"tests[\"---->Refunded Ext Amount is \"+rid8] = rid8=== pm.globals.get(\"R_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+rid9] = rid9=== pm.globals.get(\"R_Eligible_Amt\");",
									"console.log(\"---->Eligible Amount is \"+ rid9);",
									"tests[\"------->Employee ID is : \"+ rid10] = rid10 === 1000000453;",
									"console.log(\"------->Employee ID is \"+ rid10);",
									"",
									"}",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PALoyaltyAccountPoint\",() =>",
									"{",
									"//  - Validating Values of [QC_LoyaltyAccountPoint] Table",
									"if(responseBody.has(\"loyaltyPointsEarned\"))",
									"{",
									"",
									"tests[\"<-----------------QC_LoyaltyAccountPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointsEarned\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.loyaltyPointsEarned.length;",
									"var len= pm.variables.get(\"prgId\");",
									"",
									"for(j=0; j<length;j++)",
									"{",
									"    ",
									"if(j>0)",
									"{",
									"    tests[\"--\" + P + \"-----------------------------------oo-------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    pm.globals.unset(\"ProgramId\");",
									"    pm.globals.set(\"ProgramId\", len);",
									"    pm.globals.unset(\"PointsEarned\");",
									"    pm.globals.set(\"PointsEarned\",1);",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"var P =pm.variables.get(\"P1\");",
									"var Lpe1=responseJSON.loyaltyPointsEarned[j].id;",
									"var Lpe2=responseJSON.loyaltyPointsEarned[j].points;",
									"var Lpe3=responseJSON.loyaltyPointsEarned[j].employeeId;",
									"var Lpe4=responseJSON.loyaltyPointsEarned[j].loyaltyProgram.id;",
									"",
									"tests[\"--\" + P + \"--->Loyalty Account Point ID is :\"+ Lpe1] = Lpe1 !== undefined;",
									"console.log(\"----- >Loylaty Account Point ID is :\"+ Lpe1);",
									"tests[\"--\" + P + \"--->Loyalty Program ID is :\"+ Lpe4] = Lpe4 === pm.globals.get(\"ProgramId\");",
									"console.log(\"---->Loyalty Program ID is \"+ Lpe4);",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Lpe3] = Lpe3 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpe3);",
									"tests[\"--\" + P + \"--->Points are :\"+ Lpe2] = Lpe2 === pm.globals.get(\"PointsEarned\");",
									"console.log(\"----->Points are \"+ Lpe2);",
									"}",
									"",
									"};",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"",
									"tests[\"<-----------------------QC_LoyaltyAccountPoint Table ------------------>\"] = ",
									"responseBody.has(\"loyaltyPointsRedeemed\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var Lpr1=responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var Lpr2=responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var Lpr3=responseJSON.loyaltyPointsRedeemed[0].points;",
									"var Lpr4=responseJSON.loyaltyPointsRedeemed[0].rewards[0].id;",
									"",
									"tests[\"----->Loyalty Program ID is :\"+ Lpr1] = Lpr1 === 1;",
									"console.log(\"---->Loyalty Program ID is \"+ Lpr1);",
									"tests[\"----->Employee ID is : \"+ Lpr2] = Lpr2 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpr2);",
									"tests[\"----->Points are :\"+ Lpr3] = Lpr3 === pm.globals.get(\"PointsRedeemed\");",
									"console.log(\"----->Points are \"+ Lpr3);",
									"tests[\"----->Loyalty Reward Line ItemID is :\"+ Lpr4] = Lpr4 !== undefined;",
									"console.log(\"---->Loyalty Reward Line ItemID is \"+ Lpr4);",
									"",
									"",
									"};",
									"});",
									"// Old code",
									"/*postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"var i = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"prgId\");",
									"for (i = 0; i < length; i++) {",
									"",
									"    if (i > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"         pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        ",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"         pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        ",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"}); */",
									"",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"       ",
									"        if(pm.globals.get(\"Type\") !== 1)",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-2);}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-4);}",
									"        }",
									"        else",
									"        {",
									"       if(responseBody.has(\"refundedExtAmount\"))",
									"        {",
									"        pm.globals.unset(\"I_RefPoints\");",
									"        pm.globals.set(\"I_RefPoints\", -1);",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", -1);",
									"        }",
									"        else",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        ",
									"        pm.globals.unset(\"I_EligibleAmt\");",
									"        pm.globals.set(\"I_EligibleAmt\",2);",
									"        }",
									"        }",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_Transactions\",() =>",
									"{",
									"tests[\"<-----------------QC_Transactions Table------------------>\"] = responseBody.has(\"qcTransaction\");",
									"console.log(\"<1-------------------QC_Transactions Table----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"",
									"var qc1=responseJSON.receivedOnAccounts[0].qcTransaction.id;",
									"var qc2=responseJSON.receivedOnAccounts[0].qcTransaction.employeeId;",
									"var qc3=responseJSON.receivedOnAccounts[0].qcTransaction.payments;",
									"var qc4=responseJSON.receivedOnAccounts[0].qcTransaction.terminalId;",
									"var qc5=responseJSON.receivedOnAccounts[0].qcTransaction.timeStamp;",
									"var qc6=responseJSON.receivedOnAccounts[0].qcTransaction.userId;",
									"var qc7=responseJSON.receivedOnAccounts[0].qcTransaction.paTransLineItemId;",
									"var qc8=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].posItemId;",
									"var qc9=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].amount;",
									"",
									"tests[\"---->Transaction ID is : \"+ qc1] = qc1 !== undefined ;",
									"console.log(\"---->Transaction ID is \"+ qc1);",
									"tests[\"---->Employee ID is : \"+ qc2] = qc2 !== undefined ;",
									"console.log(\"----->Employee ID is \"+ qc2);",
									"tests[\"---->Splits is \"+qc3] = qc3=== 1;",
									"console.log(\"---->Splits is \"+ qc3);",
									"tests[\"--->Terminal ID is \" + qc4] = qc4 === 4;",
									"console.log(\"--->Terminal ID is \" + qc4);",
									"tests[\"---->Transaction Date is \"+qc5] =qc5 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ qc5);",
									"tests[\"---->User ID is \"+qc6] =qc6 === 1 ;",
									"console.log(\"---->User ID is \"+ qc6);",
									"tests[\"---->PATransline Item ID is \"+qc7] = qc7 !== undefined;",
									"console.log(\"---->PATransline Item ID is \"+ qc7);",
									"tests[\"---->POSItem ID is \" + qc8] = qc8 === 4;",
									"console.log(\"---->POSItem ID is \"+ qc8);",
									"tests[\"---->Amount is \"+qc9] = qc9=== -1;",
									"console.log(\"---->Amount is \"+ qc9);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem_ROA\",() =>",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var Td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.globals.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"----->Quantity is \"+Td3] = Td3=== pm.globals.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ Td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.globals.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.globals.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.globals.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.globals.get(\"T_Ref_Amt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.globals.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Td13] = Td13 !== undefined;",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"",
									"tests[\"<---------Received On Accounts Model------------>\"] = responseBody.has(\"receivedOnAccounts\");",
									"console.log(\"<1-------------------Received On Accounts Model----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var rid1=responseJSON.receivedOnAccounts[0].id; ",
									"var rid2=responseJSON.receivedOnAccounts[0].quantity;",
									"var rid3=responseJSON.receivedOnAccounts[0].amount;",
									"var rid4=responseJSON.receivedOnAccounts[0].extendedAmount;",
									"var rid5=responseJSON.receivedOnAccounts[0].refundedQty;",
									"var rid6=responseJSON.receivedOnAccounts[0].refundedAmount;",
									"var rid7=responseJSON.receivedOnAccounts[0].refundedExtAmount;",
									"var rid8=responseJSON.receivedOnAccounts[0].eligibleAmount;",
									"var rid9 =responseJSON.receivedOnAccounts[0].receivedOnAccount.id;",
									"var rid10 =responseJSON.receivedOnAccounts[0].account.id;",
									"",
									"tests[\"---->PATransline Item ID of Received On Accounts Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID of Received On Accounts Line is \"+ rid1);",
									"tests[\"---->PAItem ID is \" + rid9] = rid9 === pm.globals.get(\"P_ID\");",
									"console.log(\"---->PAItem ID is \"+ rid9);",
									"tests[\"---->Quantity is \"+rid2] = rid2=== pm.globals.get(\"Qty\");",
									"console.log(\"---->Quantity is \"+ rid2);",
									"tests[\"---->Amount is \"+rid3] = rid3=== 1;",
									"console.log(\"---->Amount is \"+ rid3);",
									"tests[\"---->Extended Amount is \"+rid4] = rid4=== pm.globals.get(\"P_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+rid5] = rid5=== pm.globals.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid5);",
									"tests[\"----->Refunded Amount is \"+rid6] = rid6=== pm.globals.get(\"P_Ref_Amt\");",
									"console.log(\"---->Refunded Amount is \"+ rid6);",
									"tests[\"----->Refunded Ext Amount is \"+rid7] = rid7=== pm.globals.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+rid8] = rid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ rid8);",
									"",
									"tests[\"---->Employee ID is \"+rid10] = rid10 !== undefined;",
									"console.log(\"---->Employee ID is \"+ rid10);",
									"",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8c5608ef-5f25-4a8c-b66a-57110e7b6e5c",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": {{count1}},\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void_Cash_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",(-1));",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-2));",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * (-2));",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * (-2));",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i * (-2));",
									""
								],
								"id": "3ff4a5d4-b476-4f53-a68b-94a1afb477cd",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "dd6a11f1-5a5f-40b3-9f71-5bfa9d0c18c0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_Cash_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\",1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i * 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * 2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",i *  2);",
									""
								],
								"id": "66cadfd3-8bba-4235-8cef-2867e18f3361",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//postman.setEnvironmentVariable(\"voidid\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message       ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								],
								"id": "1672f051-fec9-460e-834e-2d49c599e6da",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2_CWF Void",
			"item": [
				{
					"name": "Sale_QC_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb1daada-218c-446c-9f0c-304efe87af0f",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",i * 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i * 2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * 2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",0);",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7068de2c-a1d5-4d3c-819f-b577a2196e63",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message       ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": {{count1}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void_QC_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99cec0e6-70c4-423d-b0f8-bf88a0583b3d",
								"type": "text/javascript",
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",(-1));",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-2));",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * (-2));",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * (-2));",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i * (-2));",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6e50cac-d417-4925-a196-ff86cbdadaa1",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//     eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_QC_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\",1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i * 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * 2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",i *  2);",
									""
								],
								"id": "bd02e80f-8976-402d-9fef-176db55a2b7b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								],
								"id": "956f14c7-3942-42ed-8e97-751adcb0903b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3_CWF Void",
			"item": [
				{
					"name": "Sale_FPrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3600a028-218a-4995-a33e-2438114f2f7e",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);   ",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 1);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4095e5af-c34b-4a86-91e4-94ead04f8445",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count2}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n{\n\"employeeId\": 1000000453,\n\"quantity\": 1,\n\"amount\": 2,\n\"extendedAmount\": 2,\n\"eligibleAmount\": 2,\n\"reward\": {\n    \"id\": 1,\n    \"pointsToRedeem\": 1,\n    \"typeName\": \"Free Product(s)\",\n    \"name\": \"1_Free Product Reward\",\n    \"value\": 2,\n    \"autoPayout\": false,\n    \"taxes\": [\n        {\n            \"id\": 19,\n            \"name\": \"Hospital 1 Tax\",\n            \"taxRate\": 0.05\n        }\n    ],\n    \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n}\n}\n]\n\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void_FPrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-2);",
									"}",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", -1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", -2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);  ",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -2);",
									"}",
									"",
									"",
									"",
									""
								],
								"id": "6157b9a5-1c9d-459b-b58b-236e9adcc210",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"  ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"    ",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"} ",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "3ebfb1b1-569d-4758-8e81-43ef3f82c565",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_FPrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7d1cf8b-5925-4656-a219-6f1daf352855",
								"type": "text/javascript",
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\",2);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);  ",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", -1);",
									"",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 2);",
									"",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd9a0090-9529-4e4f-8afe-93b12de77d27",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4_CWF Void",
			"item": [
				{
					"name": "Sale_TCrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3e4bfe1-2937-4348-95ba-d3495919f5ff",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 4);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",4);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);   ",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 2);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", 0);",
									"",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db3c57a6-2de1-401e-854c-4960de072a30",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATransLineItem] Table",
									"//  - Validating Product Line Item",
									"//  - Validating Tender Line Item",
									"//  - Validating Reward Line Item ",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count2}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n   {\n                        \"employeeId\": 1000000453,\n                        \"quantity\": 1,\n                        \"amount\": 2,\n                        \"extendedAmount\": 2,\n                        \"eligibleAmount\": 0,\n                        \"reward\": {\n                            \"id\": 2,\n                            \"pointsToRedeem\": 1,\n                            \"typeName\": \"Transaction Credit\",\n                            \"name\": \"2_Transaction Credit Reward\",\n                            \"value\": 2,\n                            \"autoPayout\": false,\n                            \"taxes\": [\n                                {\n                                    \"id\": 19,\n                                    \"name\": \"Hospital 1 Tax\",\n                                    \"taxRate\": 0.05\n                                }\n                            ],\n                            \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n                        }\n                    }\n      ]\n  \n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void_TCrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b34dc594-dcbf-4887-8c34-514986d105a4",
								"type": "text/javascript",
								"exec": [
									"",
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-2);",
									"}",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", -1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", -2 * i);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);  ",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -2);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "809c7689-bfba-42eb-95bc-3b73baf822a9",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"  ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"    ",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"} else {",
									"",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_TCrwd_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83f3f39d-f825-40e4-918f-ec5bde635ce8",
								"type": "text/javascript",
								"exec": [
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"",
									"// Tender Line",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);   ",
									"",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 4);",
									"",
									"}",
									"",
									"",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 2);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", -2);",
									"",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"",
									"if((pm.environment.get(\"count\")) < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);  ",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", -1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 2);",
									"}",
									"",
									"postman.setGlobalVariable(\"QC_PALoyaltyAccountPoint\",() =>",
									"{",
									"//  - Validating Values of [QC_LoyaltyAccountPoint] Table",
									"if(responseBody.has(\"loyaltyPointsEarned\"))",
									"{",
									"",
									"tests[\"<-----------------QC_LoyaltyAccountPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointsEarned\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.loyaltyPointsEarned.length;",
									"var len= pm.variables.get(\"prgId\");",
									"for(j=0; j<length;j++)",
									"{",
									"    ",
									"if(j>0)",
									"{",
									"    tests[\"--\" + P + \"---------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    pm.globals.unset(\"ProgramId\");",
									"    pm.globals.set(\"ProgramId\", len);",
									"    ",
									"    pm.globals.set(\"PointsEarned\", 1);",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"var P =pm.variables.get(\"P1\");",
									"var Lpe1=responseJSON.loyaltyPointsEarned[j].id;",
									"var Lpe2=responseJSON.loyaltyPointsEarned[j].points;",
									"var Lpe3=responseJSON.loyaltyPointsEarned[j].employeeId;",
									"var Lpe4=responseJSON.loyaltyPointsEarned[j].loyaltyProgram.id;",
									"",
									"tests[\"--\" + P + \"--->Loyalty Account Point ID is :\"+ Lpe1] = Lpe1 !== undefined;",
									"console.log(\"----- >Loylaty Account Point ID is :\"+ Lpe1);",
									"tests[\"--\" + P + \"--->Loyalty Program ID is :\"+ Lpe4] = Lpe4 === pm.globals.get(\"ProgramId\");",
									"console.log(\"---->Loyalty Program ID is \"+ Lpe4);",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Lpe3] = Lpe3 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpe3);",
									"tests[\"--\" + P + \"--->Points are :\"+ Lpe2] = Lpe2 === pm.globals.get(\"PointsEarned\");",
									"console.log(\"----->Points are \"+ Lpe2);",
									"}",
									"",
									"};",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"",
									"tests[\"<----------------------QC_LoyaltyAccountPoint Table ------------------>\"] = ",
									"responseBody.has(\"loyaltyPointsRedeemed\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var Lpr1=responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var Lpr2=responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var Lpr3=responseJSON.loyaltyPointsRedeemed[0].points;",
									"var Lpr4=responseJSON.loyaltyPointsRedeemed[0].rewards[0].id;",
									"",
									"tests[\"----->Loyalty Program ID is :\"+ Lpr1] = Lpr1 === 1;",
									"console.log(\"---->Loyalty Program ID is \"+ Lpr1);",
									"tests[\"----->Employee ID is : \"+ Lpr2] = Lpr2 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpr2);",
									"tests[\"----->Points are :\"+ Lpr3] = Lpr3 === pm.globals.get(\"PointsRedeemed\");",
									"console.log(\"----->Points are \"+ Lpr3);",
									"tests[\"----->Loyalty Reward Line ItemID is :\"+ Lpr4] = Lpr4 !== undefined;",
									"console.log(\"---->Loyalty Reward Line ItemID is \"+ Lpr4);",
									"",
									"};",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"       ",
									"        if(pm.globals.get(\"Type\") !== 1)",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-2);}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-4);}",
									"        }",
									"        else",
									"        {",
									"       if(responseBody.has(\"refundedExtAmount\"))",
									"        {",
									"        pm.globals.unset(\"I_RefPoints\");",
									"        pm.globals.set(\"I_RefPoints\", -1);",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", -1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",2);",
									"            pm.globals.unset(\"I_RefEligibleAmt\");",
									"            pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"\t\t    ",
									"\t\t}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",4);",
									"\t\t    pm.globals.unset(\"I_RefEligibleAmt\");",
									"            pm.globals.set(\"I_RefEligibleAmt\", 4);",
									"\t\t}",
									"        }",
									"        ",
									"        else",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        pm.globals.unset(\"I_EligibleAmt\");",
									"        pm.globals.set(\"I_EligibleAmt\",2);",
									"        }",
									"        }",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f50e8f4-9e42-4b1b-bbf3-6f40afb3c738",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5_CWF Void",
			"description": "",
			"item": [
				{
					"name": "Sale_QCDsct_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6df7f77c-bbfa-4de6-a1e1-ebca1833ff43",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i = pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"// Product Line",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 3);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"if(i< 2) ",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);",
									"}",
									"else",
									"{",
									" pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 3);  ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "efbde844-c084-41b2-8628-62ab30611cd7",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n  {\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"Eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"quantity\" :1,\n\"amount\":{{count3}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\":\n{\n  \"badge\": \"17111\",\n   \"qcDiscountsApplied\": [\n     {\n     \"amount\":-1,\n     \"qcDiscount\" :\n     {\n                        \"id\": 1,\n                        \"name\": \"Cafe Emps Brkfst\",\n                        \"discountType\": \"Coupon\",\n                        \"amount\": 2\n                    }\n     }\n     ]\n}\n}\n],\n\"taxes\": [],\n\"rewards\" : [\n  \n            ]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Void_QCDsct_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0352a5ab-8518-44c9-aea0-646eec634195",
								"type": "text/javascript",
								"exec": [
									"",
									"var i = pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i *(-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i *(-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",-1);",
									"",
									"if(i < 2 )",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -1);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-3);  ",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -3);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -3);  ",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85de3872-f711-4380-b861-7ebc773eee66",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Inquire_QCDsct_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7d4b129-fc9b-4b99-aee9-77078898b475",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 3);",
									"}",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"if(i<2)",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 3);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 3);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28153193-186e-45a6-939f-1f23c1469d3c",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "6_CFW Void",
			"description": "",
			"item": [
				{
					"name": "Sale_ROA_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2143ad73-43a6-41cf-ad75-4289216bb276",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"eval(globals.QC_Transactions)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e07a9605-981e-44a0-b332-30f6486c04bd",
								"type": "text/javascript",
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 11);",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i* 1);",
									"",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"// Tender Line",
									"// - P_ID -ROA ID",
									"pm.globals.unset(\"P_ID\");",
									"pm.globals.set(\"P_ID\", 3);",
									"",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * -1);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", i * 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"postman.setGlobalVariable(\"QC_Transactions\",() =>",
									"{",
									"tests[\"<-----------------QC_Transactions Table------------------>\"] = responseBody.has(\"qcTransaction\");",
									"console.log(\"<1-------------------QC_Transactions Table----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"",
									"var qc1=responseJSON.receivedOnAccounts[0].qcTransaction.id;",
									"var qc2=responseJSON.receivedOnAccounts[0].qcTransaction.employeeId;",
									"var qc3=responseJSON.receivedOnAccounts[0].qcTransaction.payments;",
									"var qc4=responseJSON.receivedOnAccounts[0].qcTransaction.terminalId;",
									"var qc5=responseJSON.receivedOnAccounts[0].qcTransaction.timeStamp;",
									"var qc6=responseJSON.receivedOnAccounts[0].qcTransaction.userId;",
									"var qc7=responseJSON.receivedOnAccounts[0].qcTransaction.paTransLineItemId;",
									"var qc8=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].posItemId;",
									"var qc9=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].amount;",
									"",
									"tests[\"---->Transaction ID is : \"+ qc1] = qc1 !== undefined ;",
									"console.log(\"---->Transaction ID is \"+ qc1);",
									"tests[\"---->Employee ID is : \"+ qc2] = qc2 !== undefined ;",
									"console.log(\"----->Employee ID is \"+ qc2);",
									"tests[\"---->Splits is \"+qc3] = qc3=== 1;",
									"console.log(\"---->Splits is \"+ qc3);",
									"tests[\"--->Terminal ID is \" + qc4] = qc4 === 4;",
									"console.log(\"--->Terminal ID is \" + qc4);",
									"tests[\"---->Transaction Date is \"+qc5] =qc5 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ qc5);",
									"tests[\"---->User ID is \"+qc6] =qc6 === 1 ;",
									"console.log(\"---->User ID is \"+ qc6);",
									"tests[\"---->PATransline Item ID is \"+qc7] = qc7 !== undefined;",
									"console.log(\"---->PATransline Item ID is \"+ qc7);",
									"tests[\"---->POSItem ID is \" + qc8] = qc8 === 4;",
									"console.log(\"---->POSItem ID is \"+ qc8);",
									"tests[\"---->Amount is \"+qc9] = qc9=== (pm.variables.get(\"P_ExtAmt\"));",
									"console.log(\"---->Amount is \"+ qc9);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem_ROA\",() =>",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var Td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.variables.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"----->Quantity is \"+Td3] = Td3=== pm.variables.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ Td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.variables.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.variables.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.variables.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.variables.get(\"T_Ref_ExtAmt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.variables.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Td13] = Td13 !== undefined;",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"",
									"tests[\"<---------Received On Accounts Model------------>\"] = responseBody.has(\"receivedOnAccounts\");",
									"console.log(\"<1-------------------Received On Accounts Model----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var rid1=responseJSON.receivedOnAccounts[0].id; ",
									"var rid2=responseJSON.receivedOnAccounts[0].quantity;",
									"var rid3=responseJSON.receivedOnAccounts[0].amount;",
									"var rid4=responseJSON.receivedOnAccounts[0].extendedAmount;",
									"var rid5=responseJSON.receivedOnAccounts[0].refundedQty;",
									"var rid6=responseJSON.receivedOnAccounts[0].refundedAmount;",
									"var rid7=responseJSON.receivedOnAccounts[0].refundedExtAmount;",
									"var rid8=responseJSON.receivedOnAccounts[0].eligibleAmount;",
									"var rid9 =responseJSON.receivedOnAccounts[0].receivedOnAccount.id;",
									"var rid10 =responseJSON.receivedOnAccounts[0].account.id;",
									"",
									"tests[\"---->PATransline Item ID of Received On Accounts Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID of Received On Accounts Line is \"+ rid1);",
									"tests[\"---->PAItem ID is \" + rid9] = rid9 === pm.variables.get(\"P_ID\");",
									"console.log(\"---->PAItem ID is \"+ rid9);",
									"tests[\"---->Quantity is \"+rid2] = rid2=== pm.variables.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ rid2);",
									"tests[\"---->Amount is \"+rid3] = rid3=== pm.variables.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ rid3);",
									"tests[\"---->Extended Amount is \"+rid4] = rid4=== pm.variables.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+rid5] = rid5=== pm.variables.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid5);",
									"tests[\"----->Refunded Amount is \"+rid6] = rid6=== pm.variables.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Amount is \"+ rid6);",
									"tests[\"----->Refunded Ext Amount is \"+rid7] = rid7=== pm.variables.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+rid8] = rid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ rid8);",
									"",
									"tests[\"---->Employee ID is \"+rid10] = rid10 !== undefined;",
									"console.log(\"---->Employee ID is \"+ rid10);",
									"",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timeStamp\": \"{{timeStampVariable}}\",\r\n  \"transReferenceNumber\": \"12345\",\r\n  \"receivedOnAccounts\": [\r\n    {\r\n      \"amount\": {{count}} ,\r\n      \"receivedOnAccount\": {\r\n        \"name\": \"ROA\"\r\n      },\r\n      \"account\": {\r\n        \"badge\": \"17111\"\r\n      }\r\n    }\r\n  ],\r\n    \"tenders\": [\r\n        {\r\n            \"amount\": {{count}},\r\n            \"tender\": {\r\n                \"name\": \"Quickcharge\"\r\n            },\r\n            \"account\": {\r\n                \"badge\": \"900320\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/roa",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"roa"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Void_ROA_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 2);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-1));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-1));",
									"",
									""
								],
								"id": "ab4e1664-ceb8-4c2e-9bf4-bdd54f26cf6d",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if (responseCode.code === 200) {",
									"    var P = pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"    //eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"",
									"} else {",
									"    //  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "1a929459-d3bf-47d1-8ad6-65bac0c2a484",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/void/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"void",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Inquire_ROA_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 11);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",1);",
									"",
									" pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 1);   ",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i *1);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i* 1);",
									"",
									""
								],
								"id": "1bac2262-8202-46a4-8507-036b32715f07",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if (responseCode.code === 200) ",
									"{",
									"    var P = pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"    //eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"eval(globals.QC_Transactions)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"",
									"} else {",
									"    //  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "5a19232f-7702-42f3-82b9-c6807faddd1a",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "t",
								"value": "{{$timestamp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "7_CWF Refund",
			"item": [
				{
					"name": "Sale_Cash_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffcc7242-015a-412f-9c50-400511e4c789",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_Amt\");",
									"pm.globals.set(\"P_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",i * 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i * 2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * 2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",0);",
									"",
									"",
									"{",
									"var newDate = new Date();",
									"var year = newDate.getFullYear().toString();",
									"var month = (1 + newDate.getMonth()).toString();",
									"var dayVar = newDate.getDate().toString();",
									"var hours = newDate.getHours().toString();",
									"var minutes = newDate.getMinutes().toString();",
									"var seconds = newDate.getSeconds().toString();",
									"var milliseconds = newDate.getMilliseconds().toString();",
									"var time = hours + ':' + minutes + ':' + seconds + '.' + milliseconds;",
									"var validDate =  month + '/' + dayVar + '/' + year + \" \" + time;",
									"",
									"postman.setEnvironmentVariable('timeStampVariable', validDate);",
									"}",
									"",
									"postman.setGlobalVariable(\"commonTest1\",() => ",
									"{",
									"    //  - Validating Schema -",
									"    tests[\"<-------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Schema is Valid\"] = tv4.validate(responseJSON, schema);",
									"    console.log(\"Reward Schema is Valid ----> \" + tv4.validate(responseJSON, schema));  ",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest2\",() => ",
									"{",
									" //  - Validating http Status Code,Content Type, Response Time -   ",
									"    tests[\"<--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Status code is 200\"] =  responseCode.code === 200;",
									"    console.log(\"Status code is 200\");",
									"    tests[\"Content - Type is Present\"] =  postman.getResponseHeader(\"Content-Type\");",
									"    console.log(\"Content - Type is Present\");",
									"    tests[\"Response Time is \"+  responseTime] =  responseTime < 200;",
									"    console.log(\"Response Time is \"+  responseTime);",
									"    tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"ErrorMessage\",() =>",
									"{",
									"//   Display Error Details   ",
									"  tests[\"Test Case Failed  ---->  \" + responseJSON.details] = responseCode.code === 200;",
									"  console.log(\"Test Case Failed ----> \" +responseJSON.details);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATransactions\",() =>",
									"{",
									"tests[\"<-----------------QC_PATransactions Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransactions Table-------------------->\");",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"",
									"var v1 =responseJSON.id;",
									"var v2 =responseJSON.terminal.id;",
									"var v3 =responseJSON.transactionTypeId;",
									"var v4 =responseJSON.timeStamp;",
									"var v5 =responseJSON.userName;",
									"var v6 =responseJSON.originalTransactionId;",
									"var v7 =responseJSON.recordedOffline;",
									"var v8 =responseJSON.transReferenceNumber;",
									"",
									"tests[\"--\" + P + \"-->PATransaction ID is : \"+ v1] = v1 !== undefined ;",
									"console.log(\"---->PATransaction ID is \"+ v1);",
									"tests[\"--\" + P + \"->Terminal ID is \" + v2] = v2 === 4;",
									"console.log(\"--->Terminal ID is \" + v2);",
									"tests[\"--\" + P + \"-->Transaction Type Id is \"+v3] =v3 === pm.globals.get(\"Type\");",
									"console.log(\"---->Transaction Type Id is \"+ v3);",
									"tests[\"--\" + P + \"-->Transaction Date is \"+v4] =v4 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ v4);",
									"tests[\"--\" + P + \"-->User Name is \"+v5] =v5 === \"SuperUser\" ;",
									"console.log(\"---->User Name is \"+ v5);",
									"if(responseBody.has(\"originalTransactionId\"))",
									"{",
									"  //  - Validating Value of Original Transaction ID",
									"tests[\"--\" + P + \"-->Original Transaction ID is : \"+ v6] = v6 !== undefined ;",
									"console.log(\"----->Original Transaction ID is \"+ v6);  ",
									"}",
									"tests[\"--\" + P + \"-->Recorded Offline is \"+v7] =v7 === false ;",
									"console.log(\"---->Recorded Offline is \"+ v7);",
									"tests[\"--\" + P + \"-->Transaction Reference Number is \"+v8] =v8 !== undefined ;",
									"console.log(\"---->Transaction Reference Number is \"+ v8);",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem\",() =>",
									"{",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"",
									"tests[\"<-----------------Product Line------------------>\"] = responseBody.has(\"products\");",
									"console.log(\"<1-----------------------Product Line-------------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var pid1=responseJSON.products[0].id; ",
									"var pid2=responseJSON.products[0].quantity;",
									"var pid3=responseJSON.products[0].amount;",
									"var pid4=responseJSON.products[0].extendedAmount;",
									"var pid5=responseJSON.products[0].refundedQty;",
									"var pid6=responseJSON.products[0].refundedAmount;",
									"var pid7=responseJSON.products[0].refundedExtAmount;",
									"var pid8=responseJSON.products[0].eligibleAmount;",
									"var pid9 =responseJSON.products[0].product.id;",
									"",
									"tests[\"---->PATransline Item ID of Product Line is \"+pid1] = pid1 !== undefined;",
									"console.log(\"---->PATransline Item ID for Product Line is \"+ pid1);",
									"tests[\"---->PAItem ID is \" + pid9] = pid9 === pm.globals.get(\"ProductId\");",
									"console.log(\"---->PAItem ID is \"+ pid9);",
									"tests[\"---->Quantity is \"+pid2] = pid2=== pm.globals.get(\"Qty\");",
									"console.log(\"---->Quantity is \"+ pid2);",
									"tests[\"---->Amount is \"+pid3] = pid3=== pm.globals.get(\"P_Amt\");",
									"console.log(\"---->Amount is \"+ pid3);",
									"tests[\"---->Extended Amount is \"+pid4] = pid4=== pm.globals.get(\"P_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ pid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+pid5] = pid5=== pm.globals.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ pid5);",
									"tests[\"----->Refunded Amount is \"+pid6] = pid6=== pm.globals.get(\"P_Ref_Amt\");",
									"console.log(\"---->Refunded Amount is \"+ pid6);",
									"tests[\"----->Refunded Ext Amount is \"+pid7] = pid7=== pm.globals.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ pid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+pid8] = pid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ pid8);",
									"",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.globals.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"t------>Quantity is \"+td3] = td3 === pm.globals.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.globals.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.globals.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.globals.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.globals.get(\"T_Ref_Amt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.globals.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"tests[\"--\" + P + \"------>Employee ID is : \"+ Td13] = Td13 !== undefined",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"tests[\"<------------------Reward Line------------------>\"] = responseBody.has(\"rewards\");",
									"console.log(\"<1-----------------------Reward Line-------------------->\");    ",
									"",
									"//   - Validating  Reward Line Item    ",
									"",
									"var rid1=responseJSON.rewards[0].id; ",
									"var rid2=responseJSON.rewards[0].reward.id;",
									"var rid3=responseJSON.rewards[0].quantity;",
									"var rid4=responseJSON.rewards[0].amount;",
									"var rid5=responseJSON.rewards[0].extendedAmount;",
									"var rid6=responseJSON.rewards[0].refundedQty;",
									"var rid7=responseJSON.rewards[0].refundedAmount;",
									"var rid8=responseJSON.rewards[0].refundedExtAmount;",
									"var rid9=responseJSON.rewards[0].eligibleAmount;",
									"var rid10=responseJSON.rewards[0].employeeId;",
									"",
									"",
									"tests[\"---->PATransline Item ID of Reward Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID for Reward Line is \"+ rid1);",
									"tests[\"-------->PAItem ID is \" + rid2] = rid2 === pm.globals.get(\"RewardId\");",
									"console.log(\"------->PAItem ID is \"+ rid2);",
									"tests[\"------->Quantity is \"+rid3] = rid3=== pm.globals.get(\"R_Qty\");",
									"console.log(\"------->Quantity is \"+ rid3);",
									"tests[\"---->Amount is \"+rid4] = rid4=== -2;",
									"console.log(\"---->Amount is \"+ rid4);",
									"tests[\"----->Extended Amount is \"+rid5] = rid5=== pm.globals.get(\"R_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Reward Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"---->Refunded Quantity is \"+rid6] = rid6=== pm.globals.get(\"R_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid6);",
									"tests[\"---->Refunded Amount is \"+rid7] = rid7=== pm.globals.get(\"R_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Amount is \"+ rid7);",
									"tests[\"---->Refunded Ext Amount is \"+rid8] = rid8=== pm.globals.get(\"R_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+rid9] = rid9=== pm.globals.get(\"R_Eligible_Amt\");",
									"console.log(\"---->Eligible Amount is \"+ rid9);",
									"tests[\"------->Employee ID is : \"+ rid10] = rid10 === 1000000453;",
									"console.log(\"------->Employee ID is \"+ rid10);",
									"",
									"}",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PALoyaltyAccountPoint\",() =>",
									"{",
									"//  - Validating Values of [QC_LoyaltyAccountPoint] Table",
									"if(responseBody.has(\"loyaltyPointsEarned\"))",
									"{",
									"",
									"tests[\"<-----------------QC_LoyaltyAccountPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointsEarned\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.loyaltyPointsEarned.length;",
									"var len= pm.variables.get(\"prgId\");",
									"",
									"for(j=0; j<length;j++)",
									"{",
									"    ",
									"if(j>0)",
									"{",
									"    tests[\"--\" + P + \"-----------------------------------oo-------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    pm.globals.unset(\"ProgramId\");",
									"    pm.globals.set(\"ProgramId\", len);",
									"    pm.globals.unset(\"PointsEarned\");",
									"    pm.globals.set(\"PointsEarned\",1);",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"var P =pm.variables.get(\"P1\");",
									"var Lpe1=responseJSON.loyaltyPointsEarned[j].id;",
									"var Lpe2=responseJSON.loyaltyPointsEarned[j].points;",
									"var Lpe3=responseJSON.loyaltyPointsEarned[j].employeeId;",
									"var Lpe4=responseJSON.loyaltyPointsEarned[j].loyaltyProgram.id;",
									"",
									"tests[\"--\" + P + \"--->Loyalty Account Point ID is :\"+ Lpe1] = Lpe1 !== undefined;",
									"console.log(\"----- >Loylaty Account Point ID is :\"+ Lpe1);",
									"tests[\"--\" + P + \"--->Loyalty Program ID is :\"+ Lpe4] = Lpe4 === pm.globals.get(\"ProgramId\");",
									"console.log(\"---->Loyalty Program ID is \"+ Lpe4);",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Lpe3] = Lpe3 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpe3);",
									"tests[\"--\" + P + \"--->Points are :\"+ Lpe2] = Lpe2 === pm.globals.get(\"PointsEarned\");",
									"console.log(\"----->Points are \"+ Lpe2);",
									"}",
									"",
									"};",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"",
									"tests[\"<-----------------------QC_LoyaltyAccountPoint Table ------------------>\"] = ",
									"responseBody.has(\"loyaltyPointsRedeemed\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var Lpr1=responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var Lpr2=responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var Lpr3=responseJSON.loyaltyPointsRedeemed[0].points;",
									"var Lpr4=responseJSON.loyaltyPointsRedeemed[0].rewards[0].id;",
									"",
									"tests[\"----->Loyalty Program ID is :\"+ Lpr1] = Lpr1 === 1;",
									"console.log(\"---->Loyalty Program ID is \"+ Lpr1);",
									"tests[\"----->Employee ID is : \"+ Lpr2] = Lpr2 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpr2);",
									"tests[\"----->Points are :\"+ Lpr3] = Lpr3 === pm.globals.get(\"PointsRedeemed\");",
									"console.log(\"----->Points are \"+ Lpr3);",
									"tests[\"----->Loyalty Reward Line ItemID is :\"+ Lpr4] = Lpr4 !== undefined;",
									"console.log(\"---->Loyalty Reward Line ItemID is \"+ Lpr4);",
									"",
									"",
									"};",
									"});",
									"// Old code",
									"/*postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"var i = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"prgId\");",
									"for (i = 0; i < length; i++) {",
									"",
									"    if (i > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"         pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        ",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"         pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        ",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"}); */",
									"",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"       ",
									"        if(pm.globals.get(\"Type\") !== 1)",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-2);}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-4);}",
									"        }",
									"        else",
									"        {",
									"       if(responseBody.has(\"refundedExtAmount\"))",
									"        {",
									"        pm.globals.unset(\"I_RefPoints\");",
									"        pm.globals.set(\"I_RefPoints\", -1);",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", -1);",
									"        }",
									"        else",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        ",
									"        pm.globals.unset(\"I_EligibleAmt\");",
									"        pm.globals.set(\"I_EligibleAmt\",2);",
									"        }",
									"        }",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_Transactions\",() =>",
									"{",
									"tests[\"<-----------------QC_Transactions Table------------------>\"] = responseBody.has(\"qcTransaction\");",
									"console.log(\"<1-------------------QC_Transactions Table----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"",
									"var qc1=responseJSON.receivedOnAccounts[0].qcTransaction.id;",
									"var qc2=responseJSON.receivedOnAccounts[0].qcTransaction.employeeId;",
									"var qc3=responseJSON.receivedOnAccounts[0].qcTransaction.payments;",
									"var qc4=responseJSON.receivedOnAccounts[0].qcTransaction.terminalId;",
									"var qc5=responseJSON.receivedOnAccounts[0].qcTransaction.timeStamp;",
									"var qc6=responseJSON.receivedOnAccounts[0].qcTransaction.userId;",
									"var qc7=responseJSON.receivedOnAccounts[0].qcTransaction.paTransLineItemId;",
									"var qc8=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].posItemId;",
									"var qc9=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].amount;",
									"",
									"tests[\"---->Transaction ID is : \"+ qc1] = qc1 !== undefined ;",
									"console.log(\"---->Transaction ID is \"+ qc1);",
									"tests[\"---->Employee ID is : \"+ qc2] = qc2 !== undefined ;",
									"console.log(\"----->Employee ID is \"+ qc2);",
									"tests[\"---->Splits is \"+qc3] = qc3=== 1;",
									"console.log(\"---->Splits is \"+ qc3);",
									"tests[\"--->Terminal ID is \" + qc4] = qc4 === 4;",
									"console.log(\"--->Terminal ID is \" + qc4);",
									"tests[\"---->Transaction Date is \"+qc5] =qc5 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ qc5);",
									"tests[\"---->User ID is \"+qc6] =qc6 === 1 ;",
									"console.log(\"---->User ID is \"+ qc6);",
									"tests[\"---->PATransline Item ID is \"+qc7] = qc7 !== undefined;",
									"console.log(\"---->PATransline Item ID is \"+ qc7);",
									"tests[\"---->POSItem ID is \" + qc8] = qc8 === 4;",
									"console.log(\"---->POSItem ID is \"+ qc8);",
									"tests[\"---->Amount is \"+qc9] = qc9=== -1;",
									"console.log(\"---->Amount is \"+ qc9);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem_ROA\",() =>",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var Td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.globals.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"----->Quantity is \"+Td3] = Td3=== pm.globals.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ Td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.globals.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.globals.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.globals.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.globals.get(\"T_Ref_Amt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.globals.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Td13] = Td13 !== undefined;",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"",
									"tests[\"<---------Received On Accounts Model------------>\"] = responseBody.has(\"receivedOnAccounts\");",
									"console.log(\"<1-------------------Received On Accounts Model----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var rid1=responseJSON.receivedOnAccounts[0].id; ",
									"var rid2=responseJSON.receivedOnAccounts[0].quantity;",
									"var rid3=responseJSON.receivedOnAccounts[0].amount;",
									"var rid4=responseJSON.receivedOnAccounts[0].extendedAmount;",
									"var rid5=responseJSON.receivedOnAccounts[0].refundedQty;",
									"var rid6=responseJSON.receivedOnAccounts[0].refundedAmount;",
									"var rid7=responseJSON.receivedOnAccounts[0].refundedExtAmount;",
									"var rid8=responseJSON.receivedOnAccounts[0].eligibleAmount;",
									"var rid9 =responseJSON.receivedOnAccounts[0].receivedOnAccount.id;",
									"var rid10 =responseJSON.receivedOnAccounts[0].account.id;",
									"",
									"tests[\"---->PATransline Item ID of Received On Accounts Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID of Received On Accounts Line is \"+ rid1);",
									"tests[\"---->PAItem ID is \" + rid9] = rid9 === pm.globals.get(\"P_ID\");",
									"console.log(\"---->PAItem ID is \"+ rid9);",
									"tests[\"---->Quantity is \"+rid2] = rid2=== pm.globals.get(\"Qty\");",
									"console.log(\"---->Quantity is \"+ rid2);",
									"tests[\"---->Amount is \"+rid3] = rid3=== 1;",
									"console.log(\"---->Amount is \"+ rid3);",
									"tests[\"---->Extended Amount is \"+rid4] = rid4=== pm.globals.get(\"P_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+rid5] = rid5=== pm.globals.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid5);",
									"tests[\"----->Refunded Amount is \"+rid6] = rid6=== pm.globals.get(\"P_Ref_Amt\");",
									"console.log(\"---->Refunded Amount is \"+ rid6);",
									"tests[\"----->Refunded Ext Amount is \"+rid7] = rid7=== pm.globals.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+rid8] = rid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ rid8);",
									"",
									"tests[\"---->Employee ID is \"+rid10] = rid10 !== undefined;",
									"console.log(\"---->Employee ID is \"+ rid10);",
									"",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8c5608ef-5f25-4a8c-b66a-57110e7b6e5c",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": {{count1}},\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund_Cash_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",(-1));",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-2));",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * (-2));",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * (-2));",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i * (-2));",
									""
								],
								"id": "6bd6562f-a70f-4311-b7eb-8711e299a58d",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "dd6a11f1-5a5f-40b3-9f71-5bfa9d0c18c0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_Cash_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\",1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i * 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * 2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",i *  2);",
									""
								],
								"id": "66cadfd3-8bba-4235-8cef-2867e18f3361",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//postman.setEnvironmentVariable(\"voidid\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message       ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								],
								"id": "1672f051-fec9-460e-834e-2d49c599e6da",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8_CWF Refund",
			"item": [
				{
					"name": "Sale_QC_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f92eb6c4-3618-4adc-a3a1-b640ef6d9da4",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",i * 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i * 2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * 2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",0);",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7068de2c-a1d5-4d3c-819f-b577a2196e63",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message       ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": {{count1}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"900182\"  \n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund_QC_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",(-1));",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-2));",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * (-2));",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i * (-2));",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i * (-2));",
									""
								],
								"id": "69816309-b5c7-432a-8169-650273d2ebef",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//     eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "c6e50cac-d417-4925-a196-ff86cbdadaa1",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_QC_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1 );",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\",1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i * 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\",i * 2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\",i *  2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\",i *  2);",
									""
								],
								"id": "bd02e80f-8976-402d-9fef-176db55a2b7b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								],
								"id": "956f14c7-3942-42ed-8e97-751adcb0903b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9_CWF Refund",
			"item": [
				{
					"name": "Sale_FPrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc829665-f59b-4904-a23c-7aadacf60647",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i = pm.environment.get(\"count\");",
									"",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);   ",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 1);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "43d89be7-9faf-42f0-a292-98a6aa82c2e7",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count2}},\n\"tender\": {\n\"name\": \"cash\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n{\n\"employeeId\": 1000000453,\n\"quantity\": 1,\n\"amount\": 2,\n\"extendedAmount\": 2,\n\"eligibleAmount\": 2,\n\"reward\": {\n    \"id\": 1,\n    \"pointsToRedeem\": 1,\n    \"typeName\": \"Free Product(s)\",\n    \"name\": \"1_Free Product Reward\",\n    \"value\": 2,\n    \"autoPayout\": false,\n    \"taxes\": [\n        {\n            \"id\": 19,\n            \"name\": \"Hospital 1 Tax\",\n            \"taxRate\": 0.05\n        }\n    ],\n    \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n}\n}\n]\n\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund_FPrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-2);",
									"}",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", -1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", -2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);  ",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -2);",
									"}",
									"",
									"",
									"",
									""
								],
								"id": "014af546-ca54-4bc1-887f-fb79d68c7586",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"  ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"    ",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"} ",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "3ebfb1b1-569d-4758-8e81-43ef3f82c565",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_FPrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i =  pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\",2);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);  ",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", -1);",
									"",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 2);",
									"",
									"}",
									"",
									"",
									""
								],
								"id": "b7d1cf8b-5925-4656-a219-6f1daf352855",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								],
								"id": "e620c7f3-bf67-4606-82c0-18098840181f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10_CWF Refund",
			"item": [
				{
					"name": "Sale_TCrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c1a7bee-855e-4b79-a66d-3f153e8a61e1",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 4);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",4);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);   ",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 2);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", 0);",
									"",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db3c57a6-2de1-401e-854c-4960de072a30",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATransLineItem] Table",
									"//  - Validating Product Line Item",
									"//  - Validating Tender Line Item",
									"//  - Validating Reward Line Item ",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count2}},\n\"tender\": {\n\"name\": \"cash\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n   {\n                        \"employeeId\": 1000000453,\n                        \"quantity\": 1,\n                        \"amount\": 2,\n                        \"extendedAmount\": 2,\n                        \"eligibleAmount\": 0,\n                        \"reward\": {\n                            \"id\": 2,\n                            \"pointsToRedeem\": 1,\n                            \"typeName\": \"Transaction Credit\",\n                            \"name\": \"2_Transaction Credit Reward\",\n                            \"value\": 2,\n                            \"autoPayout\": false,\n                            \"taxes\": [\n                                {\n                                    \"id\": 19,\n                                    \"name\": \"Hospital 1 Tax\",\n                                    \"taxRate\": 0.05\n                                }\n                            ],\n                            \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n                        }\n                    }\n      ]\n  \n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund_TCrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88dd46a6-adb8-4469-8548-122961d12c1c",
								"type": "text/javascript",
								"exec": [
									"",
									"var i =  pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"if( i <2)",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-2);",
									"}",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", -1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", -2 * i);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -2);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -2);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);  ",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -2);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "809c7689-bfba-42eb-95bc-3b73baf822a9",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"var P =pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"//    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"  ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"    ",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"} else {",
									"",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inquire_TCrwd_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23a2c67a-f547-43f3-93a3-d39c64479201",
								"type": "text/javascript",
								"exec": [
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"// Product Line",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);   ",
									"",
									"",
									"if( i <2)",
									"{",
									" pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 2);",
									"}",
									"else ",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",2);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 2);",
									"",
									"pm.globals.unset(\"R_Eligible_Amt\");",
									"pm.globals.set(\"R_Eligible_Amt\", 4);",
									"",
									"}",
									"",
									"",
									"// Reward Line",
									"",
									"pm.globals.unset(\"RewardId\");",
									"pm.globals.set(\"RewardId\", 2);",
									"",
									"pm.globals.unset(\"R_Qty\");",
									"pm.globals.set(\"R_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_ExtAmt\");",
									"pm.globals.set(\"R_ExtAmt\", -2);",
									"",
									"pm.globals.unset(\"R_Ref_Qty\");",
									"pm.globals.set(\"R_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"R_Ref_ExtAmt\");",
									"pm.globals.set(\"R_Ref_ExtAmt\", -2);",
									"",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"",
									"pm.globals.unset(\"PointsRedeemed\");",
									"pm.globals.set(\"PointsRedeemed\", 1);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\",2);",
									"",
									"if((pm.environment.get(\"count\")) < 2)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);  ",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", -1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 2);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 2);",
									"}",
									"",
									"postman.setGlobalVariable(\"QC_PALoyaltyAccountPoint\",() =>",
									"{",
									"//  - Validating Values of [QC_LoyaltyAccountPoint] Table",
									"if(responseBody.has(\"loyaltyPointsEarned\"))",
									"{",
									"",
									"tests[\"<-----------------QC_LoyaltyAccountPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointsEarned\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.loyaltyPointsEarned.length;",
									"var len= pm.variables.get(\"prgId\");",
									"for(j=0; j<length;j++)",
									"{",
									"    ",
									"if(j>0)",
									"{",
									"    tests[\"--\" + P + \"---------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    pm.globals.unset(\"ProgramId\");",
									"    pm.globals.set(\"ProgramId\", len);",
									"    ",
									"    pm.globals.set(\"PointsEarned\", 1);",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"var P =pm.variables.get(\"P1\");",
									"var Lpe1=responseJSON.loyaltyPointsEarned[j].id;",
									"var Lpe2=responseJSON.loyaltyPointsEarned[j].points;",
									"var Lpe3=responseJSON.loyaltyPointsEarned[j].employeeId;",
									"var Lpe4=responseJSON.loyaltyPointsEarned[j].loyaltyProgram.id;",
									"",
									"tests[\"--\" + P + \"--->Loyalty Account Point ID is :\"+ Lpe1] = Lpe1 !== undefined;",
									"console.log(\"----- >Loylaty Account Point ID is :\"+ Lpe1);",
									"tests[\"--\" + P + \"--->Loyalty Program ID is :\"+ Lpe4] = Lpe4 === pm.globals.get(\"ProgramId\");",
									"console.log(\"---->Loyalty Program ID is \"+ Lpe4);",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Lpe3] = Lpe3 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpe3);",
									"tests[\"--\" + P + \"--->Points are :\"+ Lpe2] = Lpe2 === pm.globals.get(\"PointsEarned\");",
									"console.log(\"----->Points are \"+ Lpe2);",
									"}",
									"",
									"};",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"",
									"tests[\"<----------------------QC_LoyaltyAccountPoint Table ------------------>\"] = ",
									"responseBody.has(\"loyaltyPointsRedeemed\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var Lpr1=responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var Lpr2=responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var Lpr3=responseJSON.loyaltyPointsRedeemed[0].points;",
									"var Lpr4=responseJSON.loyaltyPointsRedeemed[0].rewards[0].id;",
									"",
									"tests[\"----->Loyalty Program ID is :\"+ Lpr1] = Lpr1 === 1;",
									"console.log(\"---->Loyalty Program ID is \"+ Lpr1);",
									"tests[\"----->Employee ID is : \"+ Lpr2] = Lpr2 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpr2);",
									"tests[\"----->Points are :\"+ Lpr3] = Lpr3 === pm.globals.get(\"PointsRedeemed\");",
									"console.log(\"----->Points are \"+ Lpr3);",
									"tests[\"----->Loyalty Reward Line ItemID is :\"+ Lpr4] = Lpr4 !== undefined;",
									"console.log(\"---->Loyalty Reward Line ItemID is \"+ Lpr4);",
									"",
									"};",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"pm.globals.unset(\"P\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"//if(pm.environment.get(\"count\") === 2)",
									"//{",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var len = pm.variables.get(\"ProgramId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"       ",
									"        if(pm.globals.get(\"Type\") !== 1)",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-2);}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",-4);}",
									"        }",
									"        else",
									"        {",
									"       if(responseBody.has(\"refundedExtAmount\"))",
									"        {",
									"        pm.globals.unset(\"I_RefPoints\");",
									"        pm.globals.set(\"I_RefPoints\", -1);",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", -1);",
									"        if(pm.globals.get(\"RewardId\") ===1)",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",2);",
									"            pm.globals.unset(\"I_RefEligibleAmt\");",
									"            pm.globals.set(\"I_RefEligibleAmt\", 2);",
									"\t\t    ",
									"\t\t}",
									"\t\telse",
									"\t\t{",
									"\t\t    pm.globals.unset(\"I_EligibleAmt\");",
									"            pm.globals.set(\"I_EligibleAmt\",4);",
									"\t\t    pm.globals.unset(\"I_RefEligibleAmt\");",
									"            pm.globals.set(\"I_RefEligibleAmt\", 4);",
									"\t\t}",
									"        }",
									"        ",
									"        else",
									"        {",
									"        pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", 2);",
									"        pm.globals.unset(\"I_EligibleAmt\");",
									"        pm.globals.set(\"I_EligibleAmt\",2);",
									"        }",
									"        }",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"",
									"//}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ced7516-45a0-4165-9b8a-bb532717e5c7",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.TransactionSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"//  - Validating  Product Line Item",
									"//   - Validating Tender Line Item",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"",
									"}",
									"else",
									"{",
									"    ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11_CWF Refund",
			"description": "",
			"item": [
				{
					"name": "Sale_QCDsct_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c76dbaf-3f5a-478d-99f7-deb67f1c0e82",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i = pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"// Product Line",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 3);",
									"}",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"if(i< 2) ",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);",
									"}",
									"else",
									"{",
									" pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 3);  ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "efbde844-c084-41b2-8628-62ab30611cd7",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n  {\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"Eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"quantity\" :1,\n\"amount\":{{count3}},\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\":\n{\n  \"badge\": \"900320\",\n   \"qcDiscountsApplied\": [\n     {\n     \"amount\":-1,\n     \"qcDiscount\" :\n     {\n                        \"id\": 1,\n                        \"name\": \"Cafe Emps Brkfst\",\n                        \"discountType\": \"Coupon\",\n                        \"amount\": 2\n                    }\n     }\n     ]\n}\n}\n],\n\"taxes\": [],\n\"rewards\" : [\n  \n            ]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Refund_QCDsct_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9aa6ace-aeb0-4f57-bb4e-6615e2cfe53c",
								"type": "text/javascript",
								"exec": [
									"",
									"var i = pm.environment.get(\"count\");",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i *(-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i *(-2));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\",-1);",
									"",
									"if(i < 2 )",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -1);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",-3);  ",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", -3);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", -3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", -3);  ",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85de3872-f711-4380-b861-7ebc773eee66",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Inquire_QCDsct_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da805176-a4e7-467b-9da6-5613069d4907",
								"type": "text/javascript",
								"exec": [
									"",
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"if(i < 2)",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 3);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 3);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 3);",
									"}",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"if(i<2)",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 1);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 3);",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 3);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 3);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28153193-186e-45a6-939f-1f23c1469d3c",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.VoidSchema);",
									"//tv4.validate(responseJSON, schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if (responseCode.code === 200) {",
									"    ",
									"    var P =pm.variables.get(\"P1\");",
									"",
									"    //  - Validating Schema -  ",
									"    //    eval(globals.commonTest1)();",
									"",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"    eval(globals.commonTest2)();",
									"",
									"    //  - Validating Values of [QC_PATransactions] Table",
									"    eval(globals.QC_PATransactions)();",
									"    ",
									"    //  - Validating  Values of [QC_PATransLineItem] Table",
									"    //  - Validating  Product Line Item",
									"    //   - Validating Tender Line Item",
									"    eval(globals.QC_PATranslineItem)();",
									"",
									"    //  - Validating [QC_LoyaltyAccountPoint] Table",
									"    eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"    eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"    ",
									"    ",
									"}",
									"else {",
									"//  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "12_CFW Refund",
			"description": "",
			"item": [
				{
					"name": "Sale_ROA_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"eval(globals.QC_Transactions)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"//  - Define the value of ID",
									"pm.environment.unset(\"Id\");",
									"postman.setEnvironmentVariable(\"Id\",responseJSON.id);",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									"",
									"",
									""
								],
								"id": "2143ad73-43a6-41cf-ad75-4289216bb276",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 11);",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i* 1);",
									"",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 1);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"P_ID\");",
									"pm.globals.set(\"P_ID\", 3);",
									"",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * -1);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", i * 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"postman.setGlobalVariable(\"QC_Transactions\",() =>",
									"{",
									"tests[\"<-----------------QC_Transactions Table------------------>\"] = responseBody.has(\"qcTransaction\");",
									"console.log(\"<1-------------------QC_Transactions Table----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"",
									"var qc1=responseJSON.receivedOnAccounts[0].qcTransaction.id;",
									"var qc2=responseJSON.receivedOnAccounts[0].qcTransaction.employeeId;",
									"var qc3=responseJSON.receivedOnAccounts[0].qcTransaction.payments;",
									"var qc4=responseJSON.receivedOnAccounts[0].qcTransaction.terminalId;",
									"var qc5=responseJSON.receivedOnAccounts[0].qcTransaction.timeStamp;",
									"var qc6=responseJSON.receivedOnAccounts[0].qcTransaction.userId;",
									"var qc7=responseJSON.receivedOnAccounts[0].qcTransaction.paTransLineItemId;",
									"var qc8=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].posItemId;",
									"var qc9=responseJSON.receivedOnAccounts[0].qcTransaction.transactionDetails[0].amount;",
									"",
									"tests[\"---->Transaction ID is : \"+ qc1] = qc1 !== undefined ;",
									"console.log(\"---->Transaction ID is \"+ qc1);",
									"tests[\"---->Employee ID is : \"+ qc2] = qc2 !== undefined ;",
									"console.log(\"----->Employee ID is \"+ qc2);",
									"tests[\"---->Splits is \"+qc3] = qc3=== 1;",
									"console.log(\"---->Splits is \"+ qc3);",
									"tests[\"--->Terminal ID is \" + qc4] = qc4 === 4;",
									"console.log(\"--->Terminal ID is \" + qc4);",
									"tests[\"---->Transaction Date is \"+qc5] =qc5 !== undefined ;",
									"console.log(\"---->Transaction Date is \"+ qc5);",
									"tests[\"---->User ID is \"+qc6] =qc6 === 1 ;",
									"console.log(\"---->User ID is \"+ qc6);",
									"tests[\"---->PATransline Item ID is \"+qc7] = qc7 !== undefined;",
									"console.log(\"---->PATransline Item ID is \"+ qc7);",
									"tests[\"---->POSItem ID is \" + qc8] = qc8 === 4;",
									"console.log(\"---->POSItem ID is \"+ qc8);",
									"tests[\"---->Amount is \"+qc9] = qc9=== (pm.variables.get(\"P_ExtAmt\"));",
									"console.log(\"---->Amount is \"+ qc9);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PATranslineItem_ROA\",() =>",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"tests[\"<-----------------QC_PATransLineItem Table------------------>\"] = responseBody.has(\"id\");",
									"console.log(\"<1-----------------------QC_PATransLineItem Table-------------------->\");",
									"tests[\"<-----------------Tender Line ------------------>\"] = responseBody.has(\"tenders\");",
									"console.log(\"<1---------------------Tender Line -------------------->\");",
									"",
									"//   - Validating  Tender Line Item",
									"var Td1=responseJSON.tenders[0].id;",
									"var Td2=responseJSON.tenders[0].itemTypeId;",
									"var Td3=responseJSON.tenders[0].quantity;",
									"var Td4=responseJSON.tenders[0].amount;",
									"var Td5=responseJSON.tenders[0].extendedAmount;",
									"var Td6=responseJSON.tenders[0].refundedQty;",
									"var Td7=responseJSON.tenders[0].refundedAmount;",
									"var Td8=responseJSON.tenders[0].refundedExtAmount;",
									"var Td9=responseJSON.tenders[0].eligibleAmount;",
									"var Td10=responseJSON.tenders[0].payments;",
									"var Td11=responseJSON.tenders[0].paymentMethodType;",
									"var Td12=responseJSON.tenders[0].tender.id;",
									"var Td13 = responseJSON.tenders[0].employeeId;",
									"",
									"tests[\"---->PATransLine Item ID of Tender Line is \"+Td1] = Td1 !== undefined;",
									"console.log(\"---->PATransLine Item ID of Tender Line is \"+ Td1);",
									"tests[\"---->PAItem Type ID is \"+Td2] = Td2=== 3;",
									"console.log(\"---->PAItem Type ID is \"+ Td2);",
									"tests[\"------>PAItem ID is \"+ Td12] = Td12 === pm.variables.get(\"TenderId\");",
									"console.log(\"---->PAItem ID is \"+ Td12);",
									"tests[\"----->Quantity is \"+Td3] = Td3=== pm.variables.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ Td3);",
									"tests[\"----->Amount is \"+Td4] = Td4=== pm.variables.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ Td4);",
									"tests[\"----->Extended Amount is \"+Td5] = Td5 === pm.variables.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ Td5);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Tender Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"------>Refunded Quantity is \"+Td6] = Td6=== pm.variables.get(\"T_Ref_Qty\");",
									"console.log(\"------>Refunded Quantity is \"+ Td6);",
									"tests[\"------>Refunded Amount is \"+Td7] = Td7=== pm.variables.get(\"T_Ref_ExtAmt\");",
									"console.log(\"------>Refunded Amount is \"+ Td7);",
									"tests[\"------>Refunded Ext Amount is \"+Td8] = Td8=== pm.variables.get(\"T_Ref_ExtAmt\");",
									"console.log(\"----->Refunded Ext Amount is \"+ Td8);",
									"}",
									"",
									"tests[\"----->Eligible Amount is \"+ Td9] = Td9 === 0;",
									"console.log(\"---->Eligible Amount is \"+ Td9);",
									"",
									"//  - Validating Employeed ID field in Tenders Model when Tender is Quickharge",
									"var i = pm.variables.get(\"TenderId\");",
									"if(i === 1)",
									"{",
									"",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Td13] = Td13 !== undefined;",
									"console.log(\"------>Employee ID is \"+ Td13);",
									"}",
									"",
									"tests[\"---->Payments is \"+Td10] = Td10=== null;",
									"console.log(\"---->Payments is \"+ Td10);",
									"tests[\"---->Payment Method Type is \"+Td11] = Td11 === \"\";",
									"console.log(\"---->Payment Method Type is \"+ Td11);",
									"",
									"",
									"tests[\"<---------Received On Accounts Model------------>\"] = responseBody.has(\"receivedOnAccounts\");",
									"console.log(\"<1-------------------Received On Accounts Model----------------->\");    ",
									"",
									"//   - Validating  Values of [QC_PATransLineItem] Table",
									"//   - Validating  Product Line Item    ",
									"",
									"var rid1=responseJSON.receivedOnAccounts[0].id; ",
									"var rid2=responseJSON.receivedOnAccounts[0].quantity;",
									"var rid3=responseJSON.receivedOnAccounts[0].amount;",
									"var rid4=responseJSON.receivedOnAccounts[0].extendedAmount;",
									"var rid5=responseJSON.receivedOnAccounts[0].refundedQty;",
									"var rid6=responseJSON.receivedOnAccounts[0].refundedAmount;",
									"var rid7=responseJSON.receivedOnAccounts[0].refundedExtAmount;",
									"var rid8=responseJSON.receivedOnAccounts[0].eligibleAmount;",
									"var rid9 =responseJSON.receivedOnAccounts[0].receivedOnAccount.id;",
									"var rid10 =responseJSON.receivedOnAccounts[0].account.id;",
									"",
									"tests[\"---->PATransline Item ID of Received On Accounts Line is \"+rid1] = rid1 !== undefined;",
									"console.log(\"---->PATransline Item ID of Received On Accounts Line is \"+ rid1);",
									"tests[\"---->PAItem ID is \" + rid9] = rid9 === pm.variables.get(\"P_ID\");",
									"console.log(\"---->PAItem ID is \"+ rid9);",
									"tests[\"---->Quantity is \"+rid2] = rid2=== pm.variables.get(\"T_Qty\");",
									"console.log(\"---->Quantity is \"+ rid2);",
									"tests[\"---->Amount is \"+rid3] = rid3=== pm.variables.get(\"T_Amt\");",
									"console.log(\"---->Amount is \"+ rid3);",
									"tests[\"---->Extended Amount is \"+rid4] = rid4=== pm.variables.get(\"T_ExtAmt\");",
									"console.log(\"---->Extended Amount is \"+ rid4);",
									"",
									"// Validating RefundedQty, RefundedAmt , RefundedExtAmount fields of Product Line",
									"if(responseBody.has(\"refundedExtAmount\"))",
									"{",
									"tests[\"----->Refunded Quantity is \"+rid5] = rid5=== pm.variables.get(\"P_Ref_Qty\");",
									"console.log(\"---->Refunded Quantity is \"+ rid5);",
									"tests[\"----->Refunded Amount is \"+rid6] = rid6=== pm.variables.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Amount is \"+ rid6);",
									"tests[\"----->Refunded Ext Amount is \"+rid7] = rid7=== pm.variables.get(\"P_Ref_ExtAmt\");",
									"console.log(\"---->Refunded Ext Amount is \"+ rid7);",
									"}",
									"",
									"tests[\"---->Eligible Amount is \"+rid8] = rid8=== 0;",
									"console.log(\"---->Eligible Amount is \"+ rid8);",
									"",
									"tests[\"---->Employee ID is \"+rid10] = rid10 !== undefined;",
									"console.log(\"---->Employee ID is \"+ rid10);",
									"",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									"",
									""
								],
								"id": "67a3a15a-be52-4f92-b7a0-34e7a2152f01",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timeStamp\": \"{{timeStampVariable}}\",\r\n  \"transReferenceNumber\": \"12345\",\r\n  \"receivedOnAccounts\": [\r\n    {\r\n      \"amount\": {{count}} ,\r\n      \"receivedOnAccount\": {\r\n        \"name\": \"ROA\"\r\n      },\r\n      \"account\": {\r\n        \"badge\": \"17111\"\r\n      }\r\n    }\r\n  ],\r\n    \"tenders\": [\r\n        {\r\n            \"amount\": {{count}},\r\n            \"tender\": {\r\n                \"name\": \"Quickcharge\"\r\n            },\r\n            \"account\": {\r\n                \"badge\": \"900320\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/roa",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"roa"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Refund_ROA_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 3);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * (-1));",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * (-1));",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", -1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * (-1));",
									"",
									""
								],
								"id": "dcdb0bb0-2a14-431a-a7d6-d6eddab47afc",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if (responseCode.code === 200) {",
									"    var P = pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"    //eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"",
									"} else {",
									"    //  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "1a929459-d3bf-47d1-8ad6-65bac0c2a484",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "Inquire_ROA_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var i = pm.environment.get(\"count\");",
									"",
									"//  - Values of [QC_PATransactions] Table",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 11);",
									"",
									"//  - Values of [QC_PATransLineItem] Table",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\",i * 1);",
									"",
									"",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\",1);",
									"",
									" pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\",i * 1);   ",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\",i * 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", i *1);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", i* 1);",
									"",
									""
								],
								"id": "1bac2262-8202-46a4-8507-036b32715f07",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if (responseCode.code === 200) ",
									"{",
									"    var P = pm.variables.get(\"P1\");",
									"    //  - Validating Schema -  ",
									"    //eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//   - Validating  Values of [QC_Transactions] Table",
									"eval(globals.QC_Transactions)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating Values of [QC_PATranslineItem] Table",
									"eval(globals.QC_PATranslineItem_ROA)();",
									"",
									"",
									"} else {",
									"    //  - Validating the error Message   ",
									"    eval(globals.ErrorMessage)();",
									"    postman.setNextRequest(null);",
									"}"
								],
								"id": "5a19232f-7702-42f3-82b9-c6807faddd1a",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "t",
								"value": "{{$timestamp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/{{Id}}",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"{{Id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "13_Get Endpoints",
			"item": [
				{
					"name": "OneLoyaltyReward_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"\"$id\": \"http://SAMQC84RTM/pos171Supraja/api/loyalty/reward/1\",",
									"\"type\": \"object\",",
									"\"definitions\": {},",
									"\"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"\"properties\": {",
									"\"id\": {",
									"\"type\": \"integer\"",
									"},",
									"\"pointsToRedeem\": {",
									"\"type\": \"integer\"",
									"},",
									"\"typeName\": {",
									"\"type\": \"string\"",
									"},",
									"\"name\": {",
									"\"type\": \"string\"",
									"},",
									"\"value\": {",
									"\"type\": \"integer\"",
									"},",
									"\"autoPayout\": {",
									"\"type\": \"boolean\"",
									"},",
									"\"taxes\": {",
									"\"type\": \"array\",",
									"\"items\": {",
									"\"type\": \"object\",",
									"\"properties\": {",
									"  \"id\": {",
									"    \"type\": \"integer\"",
									"  },",
									"  \"name\": {",
									"    \"type\": \"string\"",
									"  },",
									"  \"taxRate\": {",
									"    \"type\": \"number\"",
									"  }",
									"},",
									"\"required\": [",
									"  \"id\",",
									"  \"name\",",
									"  \"taxRate\"",
									"]",
									"}",
									"}",
									"},",
									"\"required\": [",
									"\"id\",",
									"\"pointsToRedeem\",",
									"\"typeName\",",
									"\"name\",",
									"\"value\",",
									"\"autoPayout\",",
									"\"taxes\"",
									"]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 200)",
									"{",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"tests[\"<--------------------One Loyalty Reward ------------------------>\"] = true;",
									"console.log(\"<---------------------One Loyalty Reward--------------------->\"); ",
									"",
									"// - Validating Values of fields (id,pointsToRedeem,typeName,name,name,autoPayout)",
									"var P =pm.variables.get(\"P1\");",
									"var r1 =responseJSON.id;",
									"var r2 =responseJSON.pointsToRedeem;",
									"var r3 =responseJSON.typeName;",
									"var r4 =responseJSON.name;",
									"var r5 =responseJSON.value;",
									"var r6 =responseJSON.autoPayout;",
									"var r7 =responseJSON.taxes[0].id;",
									"var r8 =responseJSON.taxes[0].name;",
									"var r9 =responseJSON.taxes[0].taxRate;",
									"eval(globals.LoyaltyReward)();",
									"",
									"",
									"tests[\"<r-----------------End of Test Case------------------------------>\"] = true;",
									"console.log(\"<---------------End of Test Case------------------->\"); ",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"  eval(globals.ErrorMessage)();",
									"}",
									"",
									""
								],
								"id": "374c083c-14c0-471f-a59c-ea0250cfd011",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable(\"LoyaltyReward\",() => ",
									"{",
									"tests[\"--\" + P + \"-->ID should be \"+pm.globals.get(\"RwdId\")+\".Actual Value is \"+ r1]  = r1 === pm.globals.get(\"RwdId\");",
									"console.log(\"--\" + P + \"-->ID should be \"+pm.globals.get(\"RwdId\")+\".Actual Value is \"+ r1);",
									"tests[\"--\" + P + \"-->Points To Redeem should be 1.Actual Value is \"+r2] =r2 === 1 ;",
									"console.log(\"---->Points To Redeem should be 1.Actual Value is \"+ r2);",
									"tests[\"--\" + P + \"-->Type Name should be \"+pm.globals.get(\"RwdTypeName\")+\".Actual Value is \"+ r3] =r3 === pm.globals.get(\"RwdTypeName\");",
									"console.log(\"---->Type Name should be \"+pm.globals.get(\"RwdTypeName\")+\".Actual Value is \" + r3);",
									"tests[\"--\" + P + \"-->Name should be \"+pm.globals.get(\"RwdName\")+\".Actual Value is \"+ r4] =r4 === pm.globals.get(\"RwdName\");",
									"console.log(\"---->Name should be \"+pm.globals.get(\"RwdName\")+\".Actual Value is \"+ r4);",
									"tests[\"--\" + P + \"-->Value should be \"+pm.globals.get(\"Value\")+\".Actual Value is \"+ r5] =r5 === pm.globals.get(\"Value\");",
									"console.log(\"---->Value should be \"+pm.globals.get(\"Value\")+\".Actual Value is \"+ r5);",
									"tests[\"--\" + P + \"-->Auto Payout should be false.Actual Value is \"+ r6] = r6 === false;",
									"console.log(\"---->Auto Payout should be false.Actual Value is \"+ r6);",
									"",
									"// Validating the field values of Taxes Collection Model ",
									"tests[P + \"Taxes are Present\"] =responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"--\" + P + \"-->Tax Id should be 19.Actual Value is \"+ r7 ] = r7 === 19;",
									"console.log(\"------->Tax Id should be 19.Actual Value is  \"+ r7);",
									" tests[\"--\" + P + \"-->Tax Name should be Hospital 1 Tax.Actual Value is \"+ r8] = r8 === \"Hospital 1 Tax\";",
									"console.log(\"------->Tax Name should be Hospital 1 Tax.Actual Value is \"+ r8);",
									"tests[\"--\" + P + \"-->Tax Rate should be 0.05.Actual Value is \"+ r9] = r9 === 0.05;",
									"console.log(\"------->Tax Rate should be 0.05.Actual Value is \"+ r9);",
									"});",
									"",
									"pm.globals.unset(\"RwdId\");",
									"pm.globals.set(\"RwdId\", 1);",
									"pm.globals.unset(\"RwdTypeName\");",
									"pm.globals.set(\"RwdTypeName\",\"Free Product(s)\");",
									"pm.globals.unset(\"RwdName\");",
									"pm.globals.set(\"RwdName\", \"1_Free Product Reward\");",
									"pm.globals.unset(\"Value\");",
									"pm.globals.set(\"Value\", 1);",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");"
								],
								"id": "708b2ad3-784d-4879-b136-00ec8d71fc6e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/loyalty/reward/1",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"loyalty",
								"reward",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AllLoyaltyRewards_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = {};",
									"//tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 200)",
									"{",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"tests[\"<-------------------All Loyalty Rewards ----------------------->\"] = true;",
									"console.log(\"<---------------------All Loyalty Rewards--------------------->\"); ",
									"tests[\"<------------------------------------------------------------------------>\"] = true;",
									"console.log(\"<--------------------------------------------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.length;",
									"for(j=0; j<length;j++)",
									"{",
									"if(j>0)",
									"{",
									"",
									"pm.globals.unset(\"RwdId\");",
									"pm.globals.set(\"RwdId\", 2);",
									"pm.globals.unset(\"RwdTypeName\");",
									"pm.globals.set(\"RwdTypeName\",\"Transaction Credit\");",
									"pm.globals.unset(\"RwdName\");",
									"pm.globals.set(\"RwdName\", \"2_Transaction Credit Reward\");",
									"pm.globals.unset(\"Value\");",
									"pm.globals.set(\"Value\", 2);",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"---\");",
									"}",
									"var P =pm.variables.get(\"P1\");",
									"var r1 =responseJSON[j].id;",
									"var r2 =responseJSON[j].pointsToRedeem;",
									"var r3 =responseJSON[j].typeName;",
									"var r4 =responseJSON[j].name;",
									"var r5 =responseJSON[j].value;",
									"var r6 =responseJSON[j].autoPayout;",
									"var r7 =responseJSON[j].taxes[0].id;",
									"var r8 =responseJSON[j].taxes[0].name;",
									"var r9 =responseJSON[j].taxes[0].taxRate;",
									"// - Validating Values of fields (id,pointsToRedeem,typeName,name,name,autoPayout)",
									"eval(globals.LoyaltyReward)();",
									"",
									"tests[\"--\" + P + \"----------------------------------------------->\"] = true;",
									"console.log(\"--\" + P + \"------------------------------------------------->\"); ",
									"}",
									"",
									"tests[\"<-----------------End of Test Case------------------------------>\"] = true;",
									"console.log(\"<---------------End of Test Case------------------->\"); ",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"  eval(globals.ErrorMessage)();",
									"}",
									"",
									"",
									"",
									""
								],
								"id": "3ac970a4-9aa8-446e-b14f-3ad95f25189b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"RwdId\");",
									"pm.globals.set(\"RwdId\", 1);",
									"pm.globals.unset(\"RwdTypeName\");",
									"pm.globals.set(\"RwdTypeName\",\"Free Product(s)\");",
									"pm.globals.unset(\"RwdName\");",
									"pm.globals.set(\"RwdName\", \"1_Free Product Reward\");",
									"pm.globals.unset(\"Value\");",
									"pm.globals.set(\"Value\", 1);",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");"
								],
								"id": "15f859fb-84ea-4943-ae32-7f109e7ec35b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/loyalty/reward/",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"loyalty",
								"reward",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "OneLoyaltyProgram_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = {}",
									"//tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 200)",
									"{",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"tests[\"<-------------------- Loyalty Program ------------------------>\"] = true;",
									"console.log(\"<--------------------- Loyalty Program--------------------->\"); ",
									"",
									"// - Validating Values of fields ",
									" P =pm.variables.get(\"P1\");   ",
									"var p1 = responseJSON.id;",
									"var p2 = responseJSON.name;",
									"var p3 = responseJSON.typeName;",
									"var p4 = responseJSON.tenders[0].id;",
									"var p5 = responseJSON.tenders[0].name;",
									"var p6 = responseJSON.tenders[0].tenderTypeId;",
									"var p7 = responseJSON.tenders[0].tenderTypeName;",
									"var p8 = responseJSON.tenders[0].allowOverTender;",
									"var p9 = responseJSON.tenders[0].allowUnderTender;",
									"var p10 = responseJSON.tenders[1].id;",
									"var p11 = responseJSON.tenders[1].name;",
									"var p12 = responseJSON.tenders[1].tenderTypeId;",
									"var p13 = responseJSON.tenders[1].tenderTypeName;",
									"var p14 = responseJSON.tenders[1].allowOverTender;",
									"var p15 = responseJSON.tenders[1].allowUnderTender;",
									"// - Validating Values of fields ",
									" eval(globals.LoyaltyProgram)();",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"  eval(globals.ErrorMessage)();",
									"}",
									"",
									""
								],
								"id": "08c2f3ce-f75b-4b81-b0e8-02d6c66bb9b7",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable(\"LoyaltyProgram\",() => ",
									"{",
									"",
									"tests[\"--\" + P +\"-->ID should be\"+pm.globals.get(\"PrgId\")+\".Actual Value is \" + p1] = p1 === pm.globals.get(\"PrgId\");",
									"console.log(\"---->ID should be \"+pm.globals.get(\"PrgId\")+\".Actual Value is \" + p1);",
									"tests[\"--\" + P +\"-->Name should be \"+pm.globals.get(\"PrgName\")+\".Actual Value is \" + p2] = p2 === pm.globals.get(\"PrgName\");",
									"console.log(\"---->Name should be \"+pm.globals.get(\"PrgName\")+\".Actual Value is \" + p2);",
									"tests[\"--\" + P +\"-->Type Name should be \"+pm.globals.get(\"PrgTypeName\")+\". Actual Value is \" + p3] = p3 === pm.globals.get(\"PrgTypeName\");",
									"console.log(\"---->Type Name should be \"+pm.globals.get(\"PrgTypeName\")+\". Actual Value is \" + p3);",
									"",
									"// Validating the field values of Tenders Collection Model ",
									"tests[P+\"Tenders are Present\"] = responseBody.has(\"tenders\");",
									"console.log(\"---->Tenders are Present\");",
									"",
									"tests[\"--\" + P +\"-->ID should be 1.Actual Value is :\" + p4] = p4 === 1;",
									"console.log(\"---->ID should be 1.Actual Value is \" + p4);",
									"tests[\"--\" + P +\"-->Name should be quickcharge.Actual Value is \" + p5] = p5 === \"quickcharge\";",
									"console.log(\"---->Name should be quickcharge.Actual Value is \" + p5);",
									"tests[\"--\" + P +\"-->Tender Type ID should be 4. Actual Value is \" + p6] = p6 === 4;",
									"console.log(\"---->Tender Type ID should be 4. Actual Value is \" + p6);",
									"tests[\"--\" + P +\"-->Tender Type Name should be Quickcharge. Actual Value is \" + p7] = p7 === \"Quickcharge\";",
									"console.log(\"----->Tender Type Name should be Quickcharge. Actual Value is \" + p7);",
									"tests[\"--\" + P +\"-->Allow Over Tender should be false. Actual Value is \" + p8] = p8 === false;",
									"console.log(\"---->Allow Over Tender should be false. Actual Value is \" + p8);",
									"tests[\"----\" + P +\"-->Allow Under Tender should be true. Actual Value is \" + p9] = p9 === true;",
									"console.log(\"---->Allow Under Tender should be true. Actual Value is \" + p9);",
									"tests[\"---\" + P +\"----------------------------------------------->\"] = true;",
									"console.log(\"<----------------------------------------------------->\");",
									"tests[\"---\" + P +\"-->ID should be 2.Actual Value is \" + p10] = p10 === 2;",
									"console.log(\"---->ID should be 1.Actual Value is \" + p10);",
									"tests[\"---\" + P +\"-->Name should be Cash.Actual Value is \" + p11] = p11 === \"Cash\";",
									"console.log(\"---->Name should be quickcharge.Actual Value is \" + p11);",
									"tests[\"---\" + P +\"-->Tender Type ID should be 1. Actual Value is \" + p12] = p12 === 1,",
									"    console.log(\"---->Tender Type ID should be 1. Actual Value is \" + p12);",
									"tests[\"---\" + P +\"-->Tender Type Name should be Cash. Actual Value is \" + p13] = p13 === \"Cash\";",
									"console.log(\"---->Tender Type Name should be Cash. Actual Value is \" + p13);",
									"tests[\"---\" + P +\"-->Allow Over Tender should be true. Actual Value is \" + p14] = p14 === true;",
									"console.log(\"---->Allow Over Tender should be true. Actual Value is \" + p14);",
									"tests[\"---\" + P +\"-->Allow Under Tender should be true. Actual Value is :\" + p15] = p15 === true;",
									"console.log(\"----->Allow Under Tender should be true. Actual Value is \" + p15);",
									"});",
									"",
									"",
									"",
									"pm.globals.unset(\"PrgId\");",
									"pm.globals.set(\"PrgId\", 1);",
									"pm.globals.unset(\"PrgName\");",
									"pm.globals.set(\"PrgName\", \"1Dollar\");",
									"pm.globals.unset(\"PrgTypeName\");",
									"pm.globals.set(\"PrgTypeName\",\"Dollar\");",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									""
								],
								"id": "26c3a7d8-cc69-40bc-94b2-47e3cb53ccc4",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/loyalty/program/1",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"loyalty",
								"program",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "AllLoyaltyPrograms_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84e7573b-dd12-477d-91c3-b7e77167f027",
								"type": "text/javascript",
								"exec": [
									"var responseJSN = JSON.parse(responseBody);",
									"//var schema = {}",
									"//tv4.validate(responseJSON,schema);",
									"if (responseCode.code === 200) {",
									"  //  - Validating Schema -  ",
									"  // eval(globals.commonTest1)();",
									"  ",
									"    //  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"    tests[\"<--------------------All Loyalty Programs 61------------------------>\"] = true;",
									"    console.log(\"<---------------------All Loyalty Programs--------------------->\");",
									"    tests[\"<---------------------------First Program--------------------------------->\"] = true;",
									"    console.log(\"<----------------First Program-------------------------------->\");",
									"    var P =pm.variables.get(\"P1\");    ",
									"",
									"    // - Validating Values of fields ",
									"    var j=0;",
									"    var length1=responseJSN.length;",
									"    for(j=0; j<length1;j++)",
									"    {",
									"    tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");    ",
									"    if(j===1)",
									"    {",
									"    ",
									"    tests[\"<---------------------------Second Program-------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");    ",
									"    pm.globals.unset(\"PrgId\");",
									"    pm.globals.set(\"PrgId\", 4);",
									"    pm.globals.unset(\"PrgName\");",
									"    pm.globals.set(\"PrgName\", \"4ProductPoint\");",
									"    pm.globals.unset(\"PrgTypeName\");",
									"    pm.globals.set(\"PrgTypeName\",\"Product Level\");",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"--\");",
									"    }",
									"    ",
									"    if(j===2)",
									"    {",
									"    tests[\"<----------------------------Third Program-------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    ",
									"    pm.globals.unset(\"PrgId\");",
									"    pm.globals.set(\"PrgId\", 5);",
									"    pm.globals.unset(\"PrgName\");",
									"    pm.globals.set(\"PrgName\", \"5WellnessPoint\");",
									"    pm.globals.unset(\"PrgTypeName\");",
									"    pm.globals.set(\"PrgTypeName\",\"Wellness\");",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"    P =pm.variables.get(\"P1\");    ",
									"    var p1 = responseJSN[j].id;",
									"    var p2 = responseJSN[j].name;",
									"    var p3 = responseJSN[j].typeName;",
									"    var p4 = responseJSN[j].tenders[0].id;",
									"    var p5 = responseJSN[j].tenders[0].name;",
									"    var p6 = responseJSN[j].tenders[0].tenderTypeId;",
									"    var p7 = responseJSN[j].tenders[0].tenderTypeName;",
									"    var p8 = responseJSN[j].tenders[0].allowOverTender;",
									"    var p9 = responseJSN[j].tenders[0].allowUnderTender;",
									"    var p10 = responseJSN[j].tenders[1].id;",
									"    var p11 = responseJSN[j].tenders[1].name;",
									"    var p12 = responseJSN[j].tenders[1].tenderTypeId;",
									"    var p13 = responseJSN[j].tenders[1].tenderTypeName;",
									"    var p14 = responseJSN[j].tenders[1].allowOverTender;",
									"    var p15 = responseJSN[j].tenders[1].allowUnderTender;",
									"// - Validating Values of fields     ",
									"    eval(globals.LoyaltyProgram)();",
									"",
									"    ",
									"  ",
									"}    ",
									"",
									"    tests[\"<-----------------End of Test Case------------------------------>\"] = true;",
									"    console.log(\"<---------------End of Test Case------------------->\");",
									"} ",
									"else {",
									"    /*  Display Error Details   */",
									"    eval(globals.ErrorMessage)();",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a42dab2-0a66-412a-a0af-7aa24c29a8c1",
								"type": "text/javascript",
								"exec": [
									"pm.globals.unset(\"PrgId\");",
									"pm.globals.set(\"PrgId\", 1);",
									"pm.globals.unset(\"PrgName\");",
									"pm.globals.set(\"PrgName\", \"1Dollar\");",
									"pm.globals.unset(\"PrgTypeName\");",
									"pm.globals.set(\"PrgTypeName\",\"Dollar\");",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/loyalty/program/",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"loyalty",
								"program",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Accountby Card_x",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6ba04e1-6443-498c-bf40-6cb3efcfd143",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"postman.setGlobalVariable(\"commonTest1\",() => ",
									"{",
									"    //  - Validating Reward Schema -",
									"    tests[\"<-------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Schema is Valid\"] = tv4.validate(responseJSON, schema);",
									"    console.log(\"Reward Schema is Valid ----> \" + tv4.validate(responseJSON, schema));  ",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest2\",() => ",
									"{",
									"//  - Validating http Status Code,Content Type, Response Time -   ",
									"    tests[\"<--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Status code is 200\"] =  responseCode.code === 200;",
									"    console.log(\"Status code is 200\");",
									"    tests[\"Content - Type is Present\"] =  postman.getResponseHeader(\"Content-Type\");",
									"    console.log(\"Content - Type is Present\");",
									"    tests[\"Response Time is \"+  responseTime] =  responseTime < 200;",
									"    console.log(\"Response Time is \"+  responseTime);",
									"    tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest3\",() => ",
									"{",
									"//  - Validating Values (timestamp,drawerNum,transactionTypeId,transactionType,transReferenceNumber,userName,recordedOffline) -  ",
									"    tests[\"---->Time Stamp is \" + responseJSON.timeStamp] = responseJSON.timeStamp !== undefined;",
									"    console.log(\"---->Time Stamp is \" + responseJSON.timeStamp);",
									"    tests[\"---->Transaction Type Id is \" + responseJSON.transactionTypeId] = responseJSON.transactionTypeId === 1;",
									"    console.log(\"---->Transaction Type Id is \" + responseJSON.transactionTypeId);",
									"    tests[\"---->Transaction Type is \" + responseJSON.transactionType] = responseJSON.transactionType === \"SALE\";",
									"    console.log(\"---->Transaction Type is \" + responseJSON.transactionType);",
									"    tests[\"---->Transaction Reference Number is \" + responseJSON.transReferenceNumber] = responseJSON.transReferenceNumber !== undefined;",
									"    console.log(\"---->Transaction Reference Number is \" + responseJSON.transReferenceNumber);",
									"    tests[\"---->User Name is \" + responseJSON.userName] = responseJSON.userName === \"SuperUser\";",
									"    console.log(\"---->User Name is \" + responseJSON.userName);",
									"    tests[\"---->Recorded Offline is \" + responseJSON.recordedOffline] = responseJSON.recordedOffline === false;",
									"    console.log(\"---->Recorded Offline is \" + responseJSON.recordedOffline);",
									"     tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<---------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest4\",() => ",
									" {",
									"//   - Validating Loyalty Account Model",
									"  ",
									"    var LA1 = responseJSON.loyaltyAccount.id;",
									"    var LA2 = responseJSON.loyaltyAccount.name;",
									"    var LA3 = responseJSON.loyaltyAccount.badge;",
									"    var LA4 = responseJSON.loyaltyAccount.number;",
									"    var LA5 = responseJSON.loyaltyAccount.status;",
									"    var LA6 = responseJSON.loyaltyAccount.accountType;",
									"    var LA7 = responseJSON.loyaltyAccount.email;",
									"    var LA8 = responseJSON.loyaltyAccount.available;",
									"    var LA9 = responseJSON.loyaltyAccount.singleChargeLimit;",
									"    var LA10 = responseJSON.loyaltyAccount.terminalGroupBalance;",
									"    var LA11 = responseJSON.loyaltyAccount.terminalGroupLimit;",
									"    var LA12 = responseJSON.loyaltyAccount.globalBalance;",
									"    var LA13 = responseJSON.loyaltyAccount.globalLimit;",
									"    var LA14 = responseJSON.loyaltyAccount.receiptBalanceLabel;",
									"    var LA15 = responseJSON.loyaltyAccount.receiptBalance;",
									"    var LA16 = responseJSON.loyaltyAccount.receiptBalanceTypeId;",
									"    var LA17 = responseJSON.loyaltyAccount.payrollGroupingId;",
									"    tests[\"<---------------Loyalty Account Model--------------------->\"] = responseBody.has(\"id\");",
									"    console.log(\"<---------------Loyalty Account Model--------------------->\");",
									"    tests[\"---->Loyalty Account ID is \" + LA1] = LA1 === 1000000453;",
									"    console.log(\"---->Loyalty Account ID is \" + LA1);",
									"    tests[\"---->Name is \" + LA2] = LA2 === \"Avinash R\";",
									"    console.log(\"---->Name is \" + LA2);",
									"    tests[\"---->Badge is \" + LA3] = LA3 === \"17111\";",
									"    console.log(\"---->Badge is \" + LA3);",
									"    tests[\"---->Number is \" + LA4] = LA4 === \"17111\";",
									"    console.log(\"---->Number is \" + LA4);",
									"    tests[\"---->Status is \" + LA5] = LA5 === \"Active\";",
									"    console.log(\"---->Status is \" + LA5);",
									"    tests[\"---->Account Type is \" + LA6] = LA6 === \"Payroll Deduction\";",
									"    console.log(\"---->Account Type is \" + LA6);",
									"    tests[\"---->Email is \" + LA7] = LA7 === \"sbandi@mmhayes.com\";",
									"    console.log(\"---->Email is \" + LA7);",
									"    tests[\"---->Availabale Amount is \" + LA8] = LA8 !== undefined;",
									"    console.log(\"---->Available Amount is \" + LA8);",
									"    tests[\"---->Single Charge Limit Amount is \" + LA9] = LA9 !== undefined;",
									"    console.log(\"---->Single Charge Limit Amount is \" + LA9);",
									"    tests[\"---->Terminal Group Balance is \" + LA10] = LA10 !== undefined;",
									"    console.log(\"---->Terminal Group Balance is \" + LA10);",
									"    tests[\"---->Terminal Group Limit is \" + LA11] = LA11 !== undefined;",
									"    console.log(\"---->Terminal Group Limit is \" + LA11);",
									"    tests[\"---->Global Balance is \" + LA12] = LA12 !== undefined;",
									"    console.log(\"---->Global Balance is \" + LA12);",
									"    tests[\"---->Global Limit is \" + LA13] = LA13 !== undefined;",
									"    console.log(\"---->Global Limit is \" + LA13);",
									"    tests[\"---->Receipt Balance Label is \" + LA14] = LA14 === \"Customer's Balance\";",
									"    console.log(\"---->Receipt Balance Label is \" + LA14);",
									"    tests[\"---->Receipt Balance is \" + LA15] = LA15 !== undefined;",
									"    console.log(\"---->Receipt Balance is \" + LA15);",
									"    tests[\"---->Receipt Balance Type Id is \" + LA16] = LA16 === 3;",
									"    console.log(\"---->Receipt Balance Type Id is \" + LA16);",
									"    tests[\"---->Payroll Grouping Id is \" + LA17] = LA17 === 1;",
									"    console.log(\"---->Payroll Grouping Id is \" + LA17);",
									"    tests[\"QC Discounts Available collection Model is Present\"] = responseBody.has(\"qcDiscountsAvailable\");",
									"    console.log(\"QC Discounts Available Model is Present\");",
									"    tests[\"QC Discounts Applied collection Model is Present\"] = responseBody.has(\"qcDiscountsApplied\");",
									"    console.log(\"QC Discounts Applied Model is Present\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"    tests[\"<1---------------Loyalty Points Collection Model--------------------->\"] = responseBody.has(\"loyaltyPoints\");",
									"    console.log(\"<1-----------------Loyalty Points Collection Model------------------->\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest5\",() =>",
									"{",
									"    //   - Validating Loylaty Points Collection Model",
									"    // 33333333333333333333333333333333333333333333333333333333333333333333333",
									"",
									"    tests[\"<1---------------Loyalty Points Collection Model--------------------->\"] = responseBody.has(\"loyaltyPoints\");",
									"    console.log(\"<1-----------------Loyalty Points Collection Model------------------->\");",
									"",
									"    var LP1 = responseJSON.loyaltyAccount.loyaltyPoints[0].points;",
									"    var LP2 = responseJSON.loyaltyAccount.loyaltyPoints[0].employeeId;",
									"    tests[\"Points are \" + LP1] = LP1 > 4000;",
									"    console.log(\"Points are \" + LP1);",
									"    tests[\"Employee ID is \" + LP2] = LP2 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP2);",
									"    tests[\"<------------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<------------------------------------------------------------>\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest6\",() =>",
									"{",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<2---------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var Pr1 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.id;",
									"    var Pr2 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.name;",
									"    var Pr3 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.typeName;",
									"",
									"    tests[\"2--->Loyalty Program ID is \" + Pr1] = Pr1 === 1;",
									"    console.log(\"2--->Loyalty Program ID is \" + Pr1);",
									"    tests[\"2--->Loyalty Program Name is \" + Pr2] = Pr2 === \"1Dollar\";",
									"    console.log(\"2--->Loyalty Program Name is \" + Pr2);",
									"    tests[\"2--->Loyalty Prorgram Type Name is \" + Pr3] = Pr3 === \"Dollar\";",
									"    console.log(\"2--->Loylaty Program Type Name is \" + Pr3);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<3---------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<3----------------------Tenders Collection Model--------------------->\");",
									"",
									"    var T1 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[0].id;",
									"    var T2 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[0].name;",
									"    var T3 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[1].id;",
									"    var T4 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"----------->Tender ID is \" + T1] = T1 === 1;",
									"    console.log(\"----------->Tender ID is \" + T1);",
									"    tests[\"----------->Tender Name is \" + T2] = T2 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + T2);",
									"    tests[\"----------->Tender ID is \" + T3] = T3 === 2;",
									"    console.log(\"----------->Tender ID is \" + T3);",
									"    tests[\"----------->Tender Name is \" + T4] = T4 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + T4);",
									"",
									"    console.log(\"<3----------------------Tenders Collection Model--------------------->\");",
									"    tests[\"<3----------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    tests[\"<2----------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");    ",
									"    tests[\"<-------------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<------------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest4\",() => ",
									" {",
									"//   - Validating Loyalty Account Model",
									"  ",
									"    var LA1 = responseJSON.id;",
									"    var LA2 = responseJSON.name;",
									"    var LA3 = responseJSON.badge;",
									"    var LA4 = responseJSON.number;",
									"    var LA5 = responseJSON.status;",
									"    var LA6 = responseJSON.accountType;",
									"    var LA7 = responseJSON.email;",
									"    var LA8 = responseJSON.available;",
									"    var LA9 = responseJSON.singleChargeLimit;",
									"    var LA10 = responseJSON.terminalGroupBalance;",
									"    var LA11 = responseJSON.terminalGroupLimit;",
									"    var LA12 = responseJSON.globalBalance;",
									"    var LA13 = responseJSON.globalLimit;",
									"    var LA14 = responseJSON.receiptBalanceLabel;",
									"    var LA15 = responseJSON.receiptBalance;",
									"    var LA16 = responseJSON.receiptBalanceTypeId;",
									"    var LA17 = responseJSON.payrollGroupingId;",
									"    tests[\"<---------------Loyalty Account Model--------------------->\"] = responseBody.has(\"id\");",
									"    console.log(\"<---------------Loyalty Account Model--------------------->\");",
									"    tests[\"---->Loyalty Account ID is \" + LA1] = LA1 === 1000000453;",
									"    console.log(\"---->Loyalty Account ID is \" + LA1);",
									"    tests[\"---->Name is \" + LA2] = LA2 === \"Avinash R\";",
									"    console.log(\"---->Name is \" + LA2);",
									"    tests[\"---->Badge is \" + LA3] = LA3 === \"17111\";",
									"    console.log(\"---->Badge is \" + LA3);",
									"    tests[\"---->Number is \" + LA4] = LA4 === \"17111\";",
									"    console.log(\"---->Number is \" + LA4);",
									"    tests[\"---->Status is \" + LA5] = LA5 === \"Active\";",
									"    console.log(\"---->Status is \" + LA5);",
									"    tests[\"---->Account Type is \" + LA6] = LA6 === \"Payroll Deduction\";",
									"    console.log(\"---->Account Type is \" + LA6);",
									"    tests[\"---->Email is \" + LA7] = LA7 === \"sbandi@mmhayes.com\";",
									"    console.log(\"---->Email is \" + LA7);",
									"    tests[\"---->Availabale Amount is \" + LA8] = LA8 !== undefined;",
									"    console.log(\"---->Available Amount is \" + LA8);",
									"    tests[\"---->Single Charge Limit Amount is \" + LA9] = LA9 !== undefined;",
									"    console.log(\"---->Single Charge Limit Amount is \" + LA9);",
									"    tests[\"---->Terminal Group Balance is \" + LA10] = LA10 !== undefined;",
									"    console.log(\"---->Terminal Group Balance is \" + LA10);",
									"    tests[\"---->Terminal Group Limit is \" + LA11] = LA11 !== undefined;",
									"    console.log(\"---->Terminal Group Limit is \" + LA11);",
									"    tests[\"---->Global Balance is \" + LA12] = LA12 !== undefined;",
									"    console.log(\"---->Global Balance is \" + LA12);",
									"    tests[\"---->Global Limit is \" + LA13] = LA13 !== undefined;",
									"    console.log(\"---->Global Limit is \" + LA13);",
									"    tests[\"---->Receipt Balance Label is \" + LA14] = LA14 === \"Customer's Balance\";",
									"    console.log(\"---->Receipt Balance Label is \" + LA14);",
									"    tests[\"---->Receipt Balance is \" + LA15] = LA15 !== undefined;",
									"    console.log(\"---->Receipt Balance is \" + LA15);",
									"    tests[\"---->Receipt Balance Type Id is \" + LA16] = LA16 === 3;",
									"    console.log(\"---->Receipt Balance Type Id is \" + LA16);",
									"    tests[\"---->Payroll Grouping Id is \" + LA17] = LA17 === 1;",
									"    console.log(\"---->Payroll Grouping Id is \" + LA17);",
									"    tests[\"QC Discounts Available collection Model is Present\"] = responseBody.has(\"qcDiscountsAvailable\");",
									"    console.log(\"QC Discounts Available Model is Present\");",
									"    tests[\"QC Discounts Applied collection Model is Present\"] = responseBody.has(\"qcDiscountsApplied\");",
									"    console.log(\"QC Discounts Applied Model is Present\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"    tests[\"<1---------------Loyalty Points Collection Model--------------------->\"] = responseBody.has(\"loyaltyPoints\");",
									"    console.log(\"<1-----------------Loyalty Points Collection Model------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest5\",() =>",
									"{",
									"    //   - Validating Loylaty Points Collection Model",
									"    // 33333333333333333333333333333333333333333333333333333333333333333333333",
									"",
									"",
									"    var LP1 = responseJSON.loyaltyPoints[0].points;",
									"    var LP2 = responseJSON.loyaltyPoints[0].employeeId;",
									"    tests[\"Points are \" + LP1] = LP1 > 4000;",
									"    console.log(\"Points are \" + LP1);",
									"    tests[\"Employee ID is \" + LP2] = LP2 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP2);",
									"    ",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest6\",() =>",
									"{",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<---------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var Pr1 = responseJSON.loyaltyPoints[0].loyaltyProgram.id;",
									"    var Pr2 = responseJSON.loyaltyPoints[0].loyaltyProgram.name;",
									"    var Pr3 = responseJSON.loyaltyPoints[0].loyaltyProgram.typeName;",
									"",
									"    tests[\"--->Loyalty Program ID is \" + Pr1] = Pr1 === 1;",
									"    console.log(\"--->Loyalty Program ID is \" + Pr1);",
									"    tests[\"--->Loyalty Program Name is \" + Pr2] = Pr2 === \"1Dollar\";",
									"    console.log(\"--->Loyalty Program Name is \" + Pr2);",
									"    tests[\"--->Loyalty Prorgram Type Name is \" + Pr3] = Pr3 === \"Dollar\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + Pr3);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<---------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<----------------------Tenders Collection Model--------------------->\");",
									"",
									"    var T1 = responseJSON.loyaltyPoints[0].loyaltyProgram.tenders[0].id;",
									"    var T2 = responseJSON.loyaltyPoints[0].loyaltyProgram.tenders[0].name;",
									"    var T3 = responseJSON.loyaltyPoints[0].loyaltyProgram.tenders[1].id;",
									"    var T4 = responseJSON.loyaltyPoints[0].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"----------->Tender ID is \" + T1] = T1 === 1;",
									"    console.log(\"----------->Tender ID is \" + T1);",
									"    tests[\"----------->Tender Name is \" + T2] = T2 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + T2);",
									"    tests[\"----------->Tender ID is \" + T3] = T3 === 2;",
									"    console.log(\"----------->Tender ID is \" + T3);",
									"    tests[\"----------->Tender Name is \" + T4] = T4 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + T4);",
									"",
									"    console.log(\"<----------------------Tenders Collection Model--------------------->\");",
									"    tests[\"<----------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    tests[\"<----------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");    ",
									"    ",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest8\",() =>",
									"{",
									"//    -Validating Free Product Reward Model in Rewards Available Collection.",
									"    var r1= responseJSON.loyaltyPoints[0].rewardsAvailable[0].id;",
									"    var r2= responseJSON.loyaltyPoints[0].rewardsAvailable[0].pointsToRedeem;",
									"    var r3= responseJSON.loyaltyPoints[0].rewardsAvailable[0].typeName;",
									"    var r4= responseJSON.loyaltyPoints[0].rewardsAvailable[0].name;",
									"    var r5= responseJSON.loyaltyPoints[0].rewardsAvailable[0].value;",
									"    var r6= responseJSON.loyaltyPoints[0].rewardsAvailable[0].autoPayout;",
									"    var r7= responseJSON.loyaltyPoints[0].rewardsAvailable[0].taxes[0].id;",
									"    var r8= responseJSON.loyaltyPoints[0].rewardsAvailable[0].taxes[0].name;",
									"    var r9= responseJSON.loyaltyPoints[0].rewardsAvailable[0].taxes[0].taxRate;",
									"    ",
									"    tests[\"---->ID  Value is \"+ r1] =r1 === 1 ;",
									"   console.log(\"---->ID Value is \"+ r1);",
									"    tests[\"---->Points To Redeem Value is \"+r2] =r2 === 1 ;",
									"    console.log(\"---->Points To Redeem Value is \"+ r2);",
									"    tests[\"---->Type Name Value is \"+ r3] =r3 === \"Free Product(s)\" ;",
									"    console.log(\"---->Type Name Value is \" + r3);",
									"    tests[\"---->Name Value is \"+ r4] =r4 === \"1_Free Product Reward\" ;",
									"    console.log(\"---->Name Value is \"+ r4);",
									"    tests[\"---->Value is \"+ r5] =r5 === 1 ;",
									"    console.log(\"---->Value is \"+ r5);",
									"    tests[\"---->Auto Payout Value is \"+ r6] = r6 === false;",
									"    console.log(\"---->Auto Payout Value is \"+ r6);",
									"    ",
									"    // Validating the field values of Taxes Collection Model ",
									"    ",
									"    tests[\"Taxes are Present\"] =responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"    ",
									"    tests[\"------->Tax Id Value is \"+ r7 ] = r7 === 19;",
									"    console.log(\"------->Tax Id Value is \"+ r7);",
									"     tests[\"------->Tax Name Value is \"+ r8] = r8 === \"Hospital 1 Tax\";",
									"    console.log(\"------->Tax Name Value is \"+ r8);",
									"    tests[\"------->Tax Rate Value is \"+ r9] = r9 === 0.05;",
									"    console.log(\"------->Tax Rate Value is \"+ r9);",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest9\",() =>",
									"{",
									"//    -Validating Transaction Credit Reward Model in Rewards Available Collection.",
									"tests[\"<r2--------------------------------------------------------->\"] = true;",
									"console.log(\"<--------------------------------------------------->\"); ",
									"",
									"var r11= responseJSON.loyaltyPoints[0].rewardsAvailable[1].id;",
									"var r12= responseJSON.loyaltyPoints[0].rewardsAvailable[1].pointsToRedeem;",
									"var r13= responseJSON.loyaltyPoints[0].rewardsAvailable[1].typeName;",
									"var r14= responseJSON.loyaltyPoints[0].rewardsAvailable[1].name;",
									"var r15= responseJSON.loyaltyPoints[0].rewardsAvailable[1].value;",
									"var r16= responseJSON.loyaltyPoints[0].rewardsAvailable[1].autoPayout;",
									"var r17= responseJSON.loyaltyPoints[0].rewardsAvailable[1].taxes[0].id;",
									"var r18= responseJSON.loyaltyPoints[0].rewardsAvailable[1].taxes[0].name;",
									"var r19= responseJSON.loyaltyPoints[0].rewardsAvailable[1].taxes[0].taxRate;",
									"",
									"tests[\"---->ID Value is \"+ r11] =r11 === 2 ;",
									"console.log(\"---->ID Value is \"+ r11);",
									"tests[\"----->Points To Redeem Value is \"+r12] =r12 === 1 ;",
									"console.log(\"---->Points To Redeem Value is \"+ r12);",
									"tests[\"---->Type Name Value is \"+ r13] =r13 === \"Transaction Credit\" ;",
									"console.log(\"---->Type Name Value is \" + r13);",
									"tests[\"---->Name Value is \"+ r14] =r14 === \"2_Transaction Credit Reward\" ;",
									"console.log(\"---->Name Value is \"+ r14);",
									"tests[\"----->Value is \"+ r15] =r15 === 2 ;",
									"console.log(\"---->Value is \"+ r15);",
									"tests[\"----->Auto Payout Value is \"+ r16] = r16 === false;",
									"console.log(\"---->Auto Payout Value is \"+ r16);",
									"",
									"// Validating the field values of Taxes Collection Model ",
									"",
									"tests[\" Taxes are Present \"] =responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"------>Tax Id Value is \"+ r17 ] = r17 === 19;",
									"console.log(\"------->Tax Id Value is \"+ r17);",
									"tests[\"------>Tax Name Value is \"+ r18] = r18 === \"Hospital 1 Tax\";",
									"console.log(\"------>Tax Name Value is \"+ r18);",
									"tests[\"------>Tax Rate Value is \"+ r19] = r19 === 0.05;",
									"console.log(\"------->Tax Rate Value is \"+ r19);",
									"",
									"tests[\"<----------------Rewards Available Collection Model------------------->\"] = responseBody.has(\"rewardsAvailable\");",
									"console.log(\"<-----------------Rewards Available Collection Model------------------>\");",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest10\",() =>",
									"{",
									"tests[\"<--------------Rewards Available for Collection Model----------------->\"] =true",
									"console.log(\"<----------Rewards Available for Collection Model--------->\");",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest11\",() =>",
									"{",
									"    //   - Validating Loylaty Points Collection Model",
									"",
									"    var LP1 = responseJSON.loyaltyPoints[1].points;",
									"    var LP2 = responseJSON.loyaltyPoints[1].employeeId;",
									"    tests[\"Points are \" + LP1] = LP1 > 1;",
									"    console.log(\"Points are \" + LP1);",
									"    tests[\"Employee ID is :\" + LP2] = LP2 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP2);",
									"    ",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest12\",() =>",
									"{",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<------------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var Pr1 = responseJSON.loyaltyPoints[1].loyaltyProgram.id;",
									"    var Pr2 = responseJSON.loyaltyPoints[1].loyaltyProgram.name;",
									"    var Pr3 = responseJSON.loyaltyPoints[1].loyaltyProgram.typeName;",
									"",
									"    tests[\"--->Loyalty Program ID is \" + Pr1] = Pr1 === 4;",
									"    console.log(\"--->Loyalty Program ID is \" + Pr1);",
									"    tests[\"--->Loyalty Program Name is \" + Pr2] = Pr2 === \"4ProductPoint\";",
									"    console.log(\"--->Loyalty Program Name is \" + Pr2);",
									"    tests[\"--->Loyalty Prorgram Type Name is \" + Pr3] = Pr3 === \"Product Level\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + Pr3);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<-----------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<----------------------Tenders Collection Model--------------------->\");",
									"",
									"    var T1 = responseJSON.loyaltyPoints[1].loyaltyProgram.tenders[0].id;",
									"    var T2 = responseJSON.loyaltyPoints[1].loyaltyProgram.tenders[0].name;",
									"    var T3 = responseJSON.loyaltyPoints[1].loyaltyProgram.tenders[1].id;",
									"    var T4 = responseJSON.loyaltyPoints[1].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"----->Tender ID is \" + T1] = T1 === 1;",
									"    console.log(\"----------->Tender ID is \" + T1);",
									"    tests[\"----->Tender Name is \" + T2] = T2 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + T2);",
									"    tests[\"----->Tender ID is \" + T3] = T3 === 2;",
									"    console.log(\"----------->Tender ID is \" + T3);",
									"    tests[\"----->Tender Name is \" + T4] = T4 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + T4);",
									"    ",
									"    tests[\"<------------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<t---------------------------Tenders Collection Model--------------------->\");",
									"   ",
									"    tests[\"<-----------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");  ",
									"",
									"tests[\"<-----------------Rewards Available Model------------------>\"] =true",
									"console.log(\"<----------Rewards Available Model--------->\");",
									"tests[\"<------Rewards Available for Collection Model--------->\"] =true",
									"console.log(\"<----------Rewards Available for Collection Model--------->\");",
									"      ",
									"});",
									"",
									"postman.setGlobalVariable(\"AccountTest13\",() =>",
									"{",
									"    ",
									"    //   - Validating Loylaty Points Collection Model",
									"    // 33333333333333333333333333333333333333333333333333333333333333333333333",
									"",
									"",
									"    var LP1 = responseJSON.loyaltyPoints[2].points;",
									"    var LP2 = responseJSON.loyaltyPoints[2].employeeId;",
									"    tests[\"Points are \" + LP1] = LP1 > 1;",
									"    console.log(\"Points are \" + LP1);",
									"    tests[\"Employee ID is  :\" + LP2] = LP2 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP2);",
									"    ",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<--------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var Pr1 = responseJSON.loyaltyPoints[2].loyaltyProgram.id;",
									"    var Pr2 = responseJSON.loyaltyPoints[2].loyaltyProgram.name;",
									"    var Pr3 = responseJSON.loyaltyPoints[2].loyaltyProgram.typeName;",
									"",
									"    tests[\"--->Loyalty Program ID is \" + Pr1] = Pr1 === 5;",
									"    console.log(\"--->Loyalty Program ID is \" + Pr1);",
									"    tests[\"--->Loyalty Program Name is \" + Pr2] = Pr2 === \"5WellnessPoint\";",
									"    console.log(\"--->Loyalty Program Name is \" + Pr2);",
									"    tests[\"--->Loyalty Prorgram Type Name is \" + Pr3] = Pr3 === \"Wellness\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + Pr3);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<-------------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<----------------------Tenders Collection Model--------------------->\");",
									"",
									"    var T1 = responseJSON.loyaltyPoints[2].loyaltyProgram.tenders[0].id;",
									"    var T2 = responseJSON.loyaltyPoints[2].loyaltyProgram.tenders[0].name;",
									"    var T3 = responseJSON.loyaltyPoints[2].loyaltyProgram.tenders[1].id;",
									"    var T4 = responseJSON.loyaltyPoints[2].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"---->Tender ID is \" + T1] = T1 === 1;",
									"    console.log(\"----->Tender ID is \" + T1);",
									"    tests[\"---->Tender Name is \" + T2] = T2 === \"quickcharge\";",
									"    console.log(\"-------->Tender Name is \" + T2);",
									"    tests[\"---->Tender ID is \" + T3] = T3 === 2;",
									"    console.log(\"------->Tender ID is \" + T3);",
									"    tests[\"---->Tender Name is \" + T4] = T4 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + T4);",
									"    ",
									"    tests[\"<--------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<t--------------------------Tenders Collection Model--------------------->\");",
									"    ",
									"    tests[\"<-------------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<------------------------Loyalty Program Model---------------------->\");  ",
									"",
									"tests[\"<------------------Rewards Available Model------------------>\"] =true",
									"console.log(\"<----------Rewards Available Model--------->\");",
									"tests[\"<---------Rewards Available for Collection Model------------>\"] =true",
									"console.log(\"<----------Rewards Available for Collection Model--------->\");",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"   ",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest7\",() =>",
									"{",
									"//   - Validating Rewards Available Model",
									"    tests[\"<---------------Rewards Available Collection Model------------------->\"] = responseBody.has(\"rewardsAvailable\");",
									"    console.log(\"<----------------Rewards Available Collection Model------------------>\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest8\",() =>",
									"{",
									"//    -Validating Free Product Reward Model in Rewards Available Collection.",
									"    var r1= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].id;",
									"    var r2= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].pointsToRedeem;",
									"    var r3= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].typeName;",
									"    var r4= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].name;",
									"    var r5= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].value;",
									"    var r6= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].autoPayout;",
									"    var r7= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].id;",
									"    var r8= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].name;",
									"    var r9= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].taxRate;",
									"    ",
									"    tests[\"---->ID should be 1.Actual Value is \"+ r1] =r1 === 1 ;",
									"   console.log(\"---->ID should be 1.Actual Value is \"+ r1);",
									"    tests[\"---->Points To Redeem should be 1.Actual Value is \"+r2] =r2 === 1 ;",
									"    console.log(\"---->Points To Redeem should be 1.Actual Value is \"+ r2);",
									"    tests[\"---->Type Name should Free Product(s).Actual Value is \"+ r3] =r3 === \"Free Product(s)\" ;",
									"    console.log(\"---->Type Name should be Free Product(s).Actual Value is \" + r3);",
									"    tests[\"---->Name should be 1_Free Product Reward.Actual Value is \"+ r4] =r4 === \"1_Free Product Reward\" ;",
									"    console.log(\"---->Name should be 1_Free Product Reward.Actual Value is \"+ r4);",
									"    tests[\"---->Value should be 1.Actual Value is \"+ r5] =r5 === 1 ;",
									"    console.log(\"---->Value should be 1.Actual Value is \"+ r5);",
									"    tests[\"---->Auto Payout should be false.Actual Value is \"+ r6] = r6 === false;",
									"    console.log(\"---->Auto Payout should be false.Actual Value is \"+ r6);",
									"    ",
									"    // Validating the field values of Taxes Collection Model ",
									"    ",
									"    tests[\"Taxes are Present\"] =responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"    ",
									"    tests[\"------->Tax id should 19.Actual Value is \"+ r7 ] = r7 === 19;",
									"    console.log(\"------->Tax id should be 19.Actual Value is \"+ r7);",
									"     tests[\"------->Tax name should be Hospital 1 Tax.Actual Value is \"+ r8] = r8 === \"Hospital 1 Tax\";",
									"    console.log(\"------->Tax name should be Hospital 1 Tax.Actual Value is \"+ r8);",
									"    tests[\"------->Tax Rate should be 0.05.Actual Value is \"+ r9] = r9 === 0.05;",
									"    console.log(\"------->Tax Rate should be 0.05.Actual Value is \"+ r9);",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest9\",() =>",
									"{",
									"//    -Validating Transaction Credit Reward Model in Rewards Available Collection.",
									"tests[\"<r2--------------------------------------------------------->\"] = true;",
									"console.log(\"<--------------------------------------------------->\"); ",
									"",
									"var r11= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].id;",
									"var r12= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].pointsToRedeem;",
									"var r13= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].typeName;",
									"var r14= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].name;",
									"var r15= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].value;",
									"var r16= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].autoPayout;",
									"var r17= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].id;",
									"var r18= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].name;",
									"var r19= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].taxRate;",
									"",
									"tests[\"---->ID should be 1.Actual Value is \"+ r11] =r11 === 2 ;",
									"console.log(\"---->ID should be 1.Actual Value is \"+ r11);",
									"tests[\"----->Points To Redeem should be 1.Actual Value is \"+r12] =r12 === 1 ;",
									"console.log(\"---->Points To Redeem should be 1.Actual Value is \"+ r12);",
									"tests[\"---->Type Name should Transaction Credit.Actual Value is \"+ r13] =r13 === \"Transaction Credit\" ;",
									"console.log(\"---->Type Name should be Transaction Credit.Actual Value is \" + r13);",
									"tests[\"---->Name should be 2_Transaction Credit Reward.Actual Value is \"+ r14] =r14 === \"2_Transaction Credit Reward\" ;",
									"console.log(\"---->Name should be 2_Transaction Credit Reward.Actual Value is \"+ r14);",
									"tests[\"----->Value should be 1.Actual Value is \"+ r15] =r15 === 1 ;",
									"console.log(\"---->Value should be 1.Actual Value is \"+ r15);",
									"tests[\"----->Auto Payout should be false.Actual Value is \"+ r16] = r16 === false;",
									"console.log(\"---->Auto Payout should be false.Actual Value is \"+ r16);",
									"",
									"// Validating the field values of Taxes Collection Model ",
									"",
									"tests[\" Taxes are Present\"] =responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"------>Tax id should 19.Actual Value is \"+ r17 ] = r17 === 19;",
									"console.log(\"------->Tax id should be 19.Actual Value is \"+ r17);",
									"tests[\"------>Tax name should be Hospital 1 Tax.Actual Value is \"+ r18] = r18 === \"Hospital 1 Tax\";",
									"console.log(\"------>Tax name should be Hospital 1 Tax.Actual Value is \"+ r18);",
									"tests[\"------>Tax Rate should be 0.05.Actual Value is \"+ r19] = r19 === 0.05;",
									"console.log(\"------->Tax Rate should be 0.05.Actual Value is \"+ r19);",
									"",
									"tests[\"<----------------Rewards Available Model------------------->\"] = responseBody.has(\"rewardsAvailable\");",
									"console.log(\"<-----------------Rewards Available Model------------------>\");",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest10\",() =>",
									"{",
									"    ",
									"tests[\"<-------Rewards Available for Collection Model------------>\"] =responseBody.has(\"rewardsAvailableForTransaction\");",
									"console.log(\"<----------Rewards Available for Collection Model--------->\");",
									"",
									"tests[\"<r---------------------------------------------------------------->\"] = true;",
									"console.log(\"<-------------------------------------------------------------->\"); ",
									"",
									"// - validating Free Product reward model in Rewards Available for Transaction",
									"",
									"var raft1 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].employeeId;",
									"var raft2 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].quantity;",
									"var raft3 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].amount;",
									"var raft4 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].extendedAmount;",
									"var raft5 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].eligibleAmount;",
									"",
									"tests[\"---->Employee ID is \" + raft1] = raft1 === 1000000453;",
									"console.log(\"---->Employee ID is \" + raft1);",
									"tests[\"---->Quantity is \" + raft2] = raft2 === 1;",
									"console.log(\"---->Quantity is \" + raft2);",
									"tests[\"---->Amount is \" + raft3] = raft3 === 2;",
									"console.log(\"---->Amount is \" + raft3);",
									"tests[\"---->Extended Amount is \" + raft4] = raft4 === 2;",
									"console.log(\"---->Extended Amount is \" + raft4);",
									"tests[\"---->Eligible Amount is \" + raft5] = raft5 === 2;",
									"console.log(\"---->Eligible Amount is \" + raft5);",
									"",
									"tests[\"<r---------------------Free  Product Reward Model---------------->\"] = true;",
									"console.log(\"<-------------------Free Product Reward Model---------------------->\");  ",
									"",
									"var ra1= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.id;",
									"var ra2= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.pointsToRedeem;",
									"var ra3= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.typeName;",
									"var ra4= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.name;",
									"var ra5= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.value;",
									"var ra6= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.autoPayout;",
									"var ra7= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].id;",
									"var ra8= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].name;",
									"var ra9= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].taxRate;",
									"var ra10=responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.notes;",
									"",
									"tests[\"---->Reward ID should be 1.Actual Value is \"+ ra1] =ra1 === 1 ;",
									"console.log(\"---->Reward ID should be 1.Actual Value is \"+ ra1);",
									"tests[\"---->Points To Redeem should be 1.Actual Value is \"+ra2] =ra2 === 1 ;",
									"console.log(\"---->Points To Redeem should be 1.Actual Value is \"+ ra2);",
									"tests[\"---->Type Name should Free Product(s).Actual Value is \"+ ra3] =ra3 === \"Free Product(s)\" ;",
									"console.log(\"---->Type Name should be Free Product(s).Actual Value is \" + ra3);",
									"tests[\"---->Name should be 1_Free Product Reward.Actual Value is \"+ ra4] =ra4 === \"1_Free Product Reward\" ;",
									"console.log(\"---->Name should be 1_Free Product Reward.Actual Value is \"+ ra4);",
									"tests[\"---->Value should be 1.Actual Value is \"+ ra5] =ra5 === 1 ;",
									"console.log(\"---->Value should be 1.Actual Value is \"+ ra5);",
									"tests[\"---->Auto Payout should be false.Actual Value is \"+ ra6] = ra6 === false;",
									"console.log(\"---->Auto Payout should be false.Actual Value is \"+ ra6);",
									"tests[\"---->Notes Value is \"+ ra10] = true;",
									"console.log(\"---->Notes Value is \"+ ra10);",
									"// Validating the field values of Taxes Collection Model",
									"",
									"tests[\"Taxes are Present\"] =responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"------->Tax id should 19.Actual Value is \"+ ra7 ] = ra7 === 19;",
									"console.log(\"------->Tax id should be 19.Actual Value is \"+ ra7);",
									"tests[\"------->Tax name should be Hospital 1 Tax.Actual Value is \"+ ra8] = ra8 === \"Hospital 1 Tax\";",
									"console.log(\"------->Tax name should be Hospital 1 Tax.Actual Value is \"+ ra8);",
									"tests[\"------->Tax Rate should be 0.05.Actual Value is \"+ ra9] = ra9 === 0.05;",
									"console.log(\"------->Tax Rate should be 0.05.Actual Value is \"+ ra9);",
									"",
									"tests[\"<r----------------------Free  Product Reward Model---------------->\"] = true;",
									"console.log(\"<--------------------Free Product Reward Model---------------------->\"); ",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest11\",() =>",
									"{ ",
									"// - validating Transaction Credit reward model in Rewards Available for Transaction   ",
									"",
									"tests[\"<r----------------------------------------------------------------->\"] = true;",
									"console.log(\"<--------------------------------------------------------------->\"); ",
									"",
									"var raft6 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].employeeId;",
									"var raft7 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].quantity;",
									"var raft8 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].amount;",
									"var raft9 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].extendedAmount;",
									"var raft10 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].eligibleAmount;",
									"",
									"tests[\"----->Employee ID is \" + raft6] = raft6 === 1000000453;",
									"console.log(\"---->Employee ID is \" + raft6);",
									"tests[\"----->Quantity is \" + raft7] = raft7 === 1;",
									"console.log(\"---->Quantity is \" + raft7);",
									"tests[\"---->Amount is \" + raft8] = raft8 === 1;",
									"console.log(\"---->Amount is \" + raft8);",
									"tests[\"---->Extended Amount is \" + raft9] = raft9 === 1;",
									"console.log(\"---->Extended Amount is \" + raft9);",
									"tests[\"---->Eligible Amount is \" + raft10] = raft10 === 0;",
									"console.log(\"---->Eligible Amount is \" + raft10);",
									"",
									"var ra11= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.id;",
									"var ra12= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.pointsToRedeem;",
									"var ra13= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.typeName;",
									"var ra14= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.name;",
									"var ra15= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.value;",
									"var ra16= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.autoPayout;",
									"var ra17= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].id;",
									"var ra18= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].name;",
									"var ra19= responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].taxRate;",
									"var ra20=responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.notes;",
									"",
									"",
									"tests[\"<r------------------Transaction Credit Reward Model-------------->\"] = true;",
									"console.log(\"<-------------------Transaction Credit Reward Mode------------------>\"); ",
									"",
									"tests[\"---->ID should be 2.Actual Value is \"+ ra11] =ra11 === 2 ;",
									"console.log(\"---->ID should be 2.Actual Value is \"+ ra11);",
									"tests[\"----->Points To Redeem should be 1.Actual Value is \"+ra12] =ra12 === 1 ;",
									"console.log(\"---->Points To Redeem should be 1.Actual Value is \"+ ra12);",
									"tests[\"---->Type Name should Transaction Credit.Actual Value is \"+ ra13] =ra13 === \"Transaction Credit\" ;",
									"console.log(\"---->Type Name should be Transaction Credit.Actual Value is \" + ra13);",
									"tests[\"---->Name should be 2_Transaction Credit Reward.Actual Value is \"+ ra14] =ra14 === \"2_Transaction Credit Reward\" ;",
									"console.log(\"---->Name should be 2_Transaction Credit Reward.Actual Value is \"+ ra14);",
									"tests[\"---->Value should be 1.Actual Value is \"+ ra15] =ra15 === 1 ;",
									"console.log(\"---->Value should be 1.Actual Value is \"+ ra15);",
									"tests[\"----->Auto Payout should be false.Actual Value is \"+ ra16] = ra16 === false;",
									"console.log(\"---->Auto Payout should be false.Actual Value is \"+ ra16);",
									"tests[\"---->Notes Value is  :\"+ ra20] = true;",
									"console.log(\"------>Notes Value is \"+ ra20);",
									"/* Validating the field values of Taxes Collection Model */",
									"",
									"tests[\" Taxes are Present\"] =responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"-------->Tax id should 19.Actual Value is \"+ ra17 ] = ra17 === 19;",
									"console.log(\"-------->Tax id should be 19.Actual Value is \"+ ra17);",
									"tests[\"-------->Tax name should be Hospital 1 Tax.Actual Value is \"+ ra18] = ra18 === \"Hospital 1 Tax\";",
									"console.log(\"-------->Tax name should be Hospital 1 Tax.Actual Value is \"+ ra18);",
									"tests[\"-------->Tax Rate should be 0.05.Actual Value is \"+ ra19] = ra19 === 0.05;",
									"console.log(\"------->Tax Rate should be 0.05.Actual Value is \"+ ra19);",
									"",
									"tests[\"<--------------------Transaction Credit Reward Model-------------->\"] = true;",
									"console.log(\"<--------------------Transaction Credit Reward Mode------------------>\"); ",
									"",
									"tests[\"<r------------------------------------------------------------------->\"] = true;",
									"console.log(\"<--------------------------------------------------------------->\"); ",
									"",
									"tests[\"<---------------Rewards Available for Collection Model------------->\"] =responseBody.has(\"rewardsAvailableForTransaction\");",
									"console.log(\"<-------------Rewards Available for Collection Model---------->\");",
									"",
									"",
									"tests[\"<1-----------------Loyalty Points Collection Model------------------->\"] = responseBody.has(\"loyaltyPoints\");",
									"console.log(\"<1-----------------Loyalty Points Collection Model------------------->\");",
									"",
									"tests[\"<----------------------Loyalty Account Model-------------------------->\"] = responseBody.has(\"loyaltyAccount\");",
									"console.log(\"<------------------Loyalty Account Model-------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest12\",() =>",
									"{",
									"      //   - Validating Products Model",
									"    //*444444444444444444444444444444444444444444444444444444444444444444444444",
									"    tests[\"<-----------------Products Model------------------>\"] = responseBody.has(\"products\");",
									"    console.log(\"<1-----------------------Products Model-------------------->\");",
									"",
									"    var pid2 = responseJSON.products[0].quantity;",
									"    var pid3 = responseJSON.products[0].amount;",
									"    var pid4 = responseJSON.products[0].extendedAmount;",
									"    var pid5 = responseJSON.products[0].eligibleAmount;",
									"",
									"    tests[\"------>Quantity is \" + pid2] = pid2 === 1;",
									"    console.log(\"------>Quantity is \" + pid2);",
									"    tests[\"----->Amount is \" + pid3] = pid3 === 2;",
									"    console.log(\"----->Amount is \" + pid3);",
									"    tests[\"----->Extended Amount is \" + pid4] = pid4 === 2;",
									"    console.log(\"----->Extended Amount is \" + pid4);",
									"   tests[\"----->Eligible Amount is \" + pid5] = pid5 === 0;",
									"    console.log(\"---->Eligible Amount is \" + pid5);",
									"",
									"    //  - Validating Product Model",
									"    // 55555555555555555555555555555555555555555555555555555555555555",
									"",
									"    var prd1 = responseJSON.products[0].product.id;",
									"    var prd2 = responseJSON.products[0].product.name;",
									"    var prd3 = responseJSON.products[0].product.description;",
									"    var prd4 = responseJSON.products[0].product.productCode;",
									"    var prd5 = responseJSON.products[0].product.subDepartment;",
									"    var prd6 = responseJSON.products[0].product.department;",
									"    var prd7 = responseJSON.products[0].product.isModifier;",
									"    tests[\"<2---------------Product Model--------------------->\"] = responseBody.has(\"product\");",
									"    console.log(\"<2----------------------Product Model--------------------->\");",
									"",
									"    tests[\"---->ID is \" + prd1] = prd1 === 1;",
									"    console.log(\"---->ID is \" + prd1);",
									"    tests[\"---->Name is \" + prd2] = prd2 === \"Eggs\";",
									"    console.log(\"---->Name is \" + prd2);",
									"    tests[\"---->   Description is \" + prd3] = prd3 === \" \";",
									"    console.log(\"---->Description is \" + prd3);",
									"    tests[\"---->Product Code is \" + prd4] = prd4 === \"11111\";",
									"    console.log(\"---->Product Code is \" + prd4);",
									"    tests[\"---->Sub Department is \" + prd5] = prd5 === \"1Breakfast\";",
									"    console.log(\"---->Sub Department is \" + prd5);",
									"    tests[\"---->Department is \" + prd6] = prd6 === \"1Food\";",
									"    console.log(\"---->Department is \" + prd6);",
									"    tests[\"---->isModifier is \" + prd7] = prd7 === false;",
									"    console.log(\"---->isModifier is \" + prd7);",
									"",
									"    tests[\"<2----------------Product Model--------------------->\"] = responseBody.has(\"product\");",
									"    console.log(\"<2----------------------Product Model--------------------->\");",
									"    //555555555555555555555555555555555555555555555555555555555555555",
									"  ",
									"   ",
									"});",
									"",
									"postman.setGlobalVariable(\"LoyaltyPoints\",() =>",
									"{",
									"//   - Validating Loyalty Point Details Model",
									"    //66666666666666666666666666666666666666666666666666666666666666",
									"",
									"    tests[\"<2----------Loyalty Point Details Model------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"    console.log(\"<2---------------Loyalty Point Details Model-------------->\");",
									"",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[0].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[0].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[0].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[0].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[0].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[0].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[0].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[0].loyaltyAccountPointId;",
									"",
									"    tests[\"---->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"---->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"---->Loyalty Program ID is \" + Lpd2] = Lpd2 === 1;",
									"    console.log(\"---->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"---->Points are \" + Lpd3] = Lpd3 === -1;",
									"    console.log(\"---->Points are \" + Lpd3);",
									"    tests[\"---->Eligible Amount is \" + Lpd4] = Lpd4 === 2;",
									"    console.log(\"---->Eligible Amount is \" + Lpd4);",
									"    tests[\"---->Refunded Points are \" + Lpd5] = Lpd5 === 0;",
									"    console.log(\"---->Refunded Points are \" + Lpd5);",
									"    tests[\"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === 0;",
									"    console.log(\"---->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"---->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"---->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"<2-----------Loyalty Point Details Model------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"    console.log(\"<2---------------Loyalty Point Details Model-------------->\");",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest13\",() =>",
									"{",
									"    //44444444444444444444444444444444444444444444444444444444444444444444444444 ",
									"    //   - Validating Tenders Model",
									"    // 7777777777777777777777777777777777777777777777777777777777777777777777",
									"    ",
									"    tests[\"<1------------------Products Model------------------>\"] = responseBody.has(\"products\");",
									"    console.log(\"<1----------------------Products Model-------------------->\");",
									"    tests[\"<1------------------Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\");",
									"",
									"    var Td2 = responseJSON.tenders[0].itemTypeId;",
									"    var Td3 = responseJSON.tenders[0].quantity;",
									"    var Td4 = responseJSON.tenders[0].amount;",
									"    var Td5 = responseJSON.tenders[0].extendedAmount;",
									"    var Td6 = responseJSON.tenders[0].eligibleAmount;",
									"    var Td7 = responseJSON.tenders[0].payments;",
									"    var Td8 = responseJSON.tenders[0].paymentMethodType;",
									"",
									"   ",
									"    tests[\"---->Item Type ID is \" + Td2] = Td2 === 3;",
									"    console.log(\"---->Item Type ID is \" + Td2);",
									"    tests[\"----->Quantity is \" + Td3] = Td3 === 1;",
									"    console.log(\"---->Quantity is \" + Td3);",
									"    tests[\"----->Amount is \" + Td4] = Td4 === 2;",
									"    console.log(\"---->Amount is \" + Td4);",
									"    tests[\"----->Extended Amount is \" + Td5] = Td5 === 2;",
									"    console.log(\"---->Extended Amount is \" + Td5);",
									"    tests[\"----->Eligible Amount is \" + Td6] = Td6 === 0;",
									"    console.log(\"---->Eligible Amount is \" + Td6);",
									"    tests[\"---->Payments is \" + Td7] = Td7 === null;",
									"    console.log(\"---->Payments is \" + Td7);",
									"    tests[\"---->Payment Method Type is \" + Td8] = Td8 === \"\";",
									"    console.log(\"---->Payment Method Type is \" + Td8);",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"tenderCash\",() =>",
									"{",
									"    //   - Validating Tender Model  - Cash ",
									"",
									"    tests[\"<2------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    var Tdr1 = responseJSON.tenders[0].tender.id;",
									"    var Tdr2 = responseJSON.tenders[0].tender.name;",
									"",
									"    tests[\"----------->Tender ID is \" + Tdr1] = Tdr1 === 2;",
									"    console.log(\"----------->Tender ID is \" + Tdr1);",
									"    tests[\"----------->Tender Name is \" + Tdr2] = Tdr2 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + Tdr2);",
									"",
									"",
									"    tests[\"<2-------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    tests[\"<1-------------------Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\"); ",
									"});",
									"",
									"postman.setGlobalVariable(\"tenderQuickcharge\",() =>",
									"{",
									"    //   - Validating Tender Model   - Quickcharge",
									"",
									"    tests[\"<2------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    var Tdr1 = responseJSON.tenders[0].tender.id;",
									"    var Tdr2 = responseJSON.tenders[0].tender.name;",
									"",
									"    tests[\"----------->Tender ID is \" + Tdr1] = Tdr1 === 1;",
									"    console.log(\"----------->Tender ID is \" + Tdr1);",
									"    tests[\"----------->Tender Name is \" + Tdr2] = Tdr2 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + Tdr2);",
									"",
									"",
									"    tests[\"<2-------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    tests[\"<1-------------------Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\"); ",
									"});",
									"",
									"postman.setGlobalVariable(\"account\",() =>",
									"{",
									"    //   - Validating Account Model in Tenders Model",
									"   ",
									"    var A1 = responseJSON.tenders[0].account.id;",
									"    var A2 = responseJSON.tenders[0].account.name;",
									"    var A3 = responseJSON.tenders[0].account.badge;",
									"    var A4 = responseJSON.tenders[0].account.number;",
									"    var A5 = responseJSON.tenders[0].account.status;",
									"    var A6 = responseJSON.tenders[0].account.accountType;",
									"    var A7 = responseJSON.tenders[0].account.email;",
									"    var A8 = responseJSON.tenders[0].account.available;",
									"    var A9 = responseJSON.tenders[0].account.singleChargeLimit;",
									"    var A10 = responseJSON.tenders[0].account.terminalGroupBalance;",
									"    var A11 = responseJSON.tenders[0].account.terminalGroupLimit;",
									"    var A12 = responseJSON.tenders[0].account.globalBalance;",
									"    var A13 = responseJSON.tenders[0].account.globalLimit;",
									"    var A14 = responseJSON.tenders[0].account.receiptBalanceLabel;",
									"    var A15 = responseJSON.tenders[0].account.receiptBalance;",
									"    var A16 = responseJSON.tenders[0].account.receiptBalanceTypeId;",
									"    var A17 = responseJSON.tenders[0].account.payrollGroupingId;",
									"                ",
									"    tests[\"<-------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"",
									"                tests[\"<-------------------Account Model------------------------->\"] = responseBody.has(\"account\");",
									"                console.log(\"<------------------Account Model-------------------------->\");",
									"    ",
									"                tests[\"---->Loyalty Account ID is \" + A1] = A1 === 1000000453;",
									"    console.log(\"---->Loyalty Account ID is \" + A1);",
									"    tests[\"---->Name is \" + A2] = A2 === \"Avinash R\";",
									"    console.log(\"---->Name is \" + A2);",
									"    tests[\"---->Badge is \" + A3] = A3 === \"17111\";",
									"    console.log(\"---->Badge is \" + A3);",
									"    tests[\"---->Number is \" + A4] = A4 === \"17111\";",
									"    console.log(\"---->Number is \" + A4);",
									"    tests[\"---->Status is \" + A5] = A5 === \"Active\";",
									"    console.log(\"---->Status is \" + A5);",
									"    tests[\"---->Account Type is \" + A6] = A6 === \"Payroll Deduction\";",
									"    console.log(\"---->Account Type is \" + A6);",
									"    tests[\"---->Email is \" + A7] = A7 === \"sbandi@mmhayes.com\";",
									"    console.log(\"---->Email is \" + A7);",
									"    tests[\"---->Availabale Amount is \" + A8] = A8 !== undefined;",
									"    console.log(\"---->Available Amount is \" + A8);",
									"    tests[\"---->Single Charge Limit Amount is \" + A9] = A9 !== undefined;",
									"    console.log(\"---->Single Charge Limit Amount is \" + A9);",
									"    tests[\"---->Terminal Group Balance is \" + A10] = A10 !== undefined;",
									"    console.log(\"---->Terminal Group Balance is \" + A10);",
									"    tests[\"---->Terminal Group Limit is \" + A11] = A11 !== undefined;",
									"    console.log(\"---->Terminal Group Limit is \" + A11);",
									"    tests[\"---->Global Balance is \" + A12] = A12 !== undefined;",
									"    console.log(\"---->Global Balance is \" + A12);",
									"    tests[\"---->Global Limit is \" + A13] = A13 !== undefined;",
									"    console.log(\"---->Global Limit is \" + A13);",
									"    tests[\"---->Receipt Balance Label is \" + A14] = A14 === \"Customer's Balance\";",
									"    console.log(\"---->Receipt Balance Label is \" + A14);",
									"    tests[\"---->Receipt Balance is \" + A15] = A15 !== undefined;",
									"    console.log(\"---->Receipt Balance is \" + A15);",
									"    tests[\"---->Receipt Balance Type Id is \" + A16] = A16 === 3;",
									"    console.log(\"---->Receipt Balance Type Id is \" + A16);",
									"    tests[\"---->Payroll Grouping Id is \" + A17] = A17 === 1;",
									"    console.log(\"---->Payroll Grouping Id is \" + A17);",
									"    tests[\"@@@@@QC Discounts Available collection Model is Present\"] = responseBody.has(\"qcDiscountsAvailable\");",
									"    console.log(\"@@@@@QC Discounts Available Model is Present\");",
									"    tests[\"@@@@@QC Discounts Applied collection Model is Present\"] = responseBody.has(\"qcDiscountsApplied\");",
									"    console.log(\"@@@@@QC Discounts Applied Model is Present\");",
									"    ",
									"    tests[\"<--------------------Account Model------------------------->\"] = responseBody.has(\"account\");",
									"                console.log(\"<-------------------Account Model-------------------------->\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"commonTest14\",() =>",
									"{",
									"//   - Validating Terminal Model",
									"    //9999999999999999999999999999999999999999999999999999999999999999",
									"",
									"    tests[\"<1-----------------------Terminal Mode------------------------------>\"] = responseBody.has(\"terminal\");",
									"    console.log(\"<1--------------------------Terminal Model--------------------------->\");",
									"",
									"    var Ter1 = responseJSON.terminal.id;",
									"    var Ter2 = responseJSON.terminal.name;",
									"    var Ter3 = responseJSON.terminal.typeId;",
									"    var Ter4 = responseJSON.terminal.defaultPurchaseCategoryId;",
									"",
									"    tests[\"--->Terminal ID is \" + Ter1] = Ter1 === 4;",
									"    console.log(\"--->Terminal ID is \" + Ter1);",
									"    tests[\"--->Terminal Name is \" + Ter2] = Ter2 === \"Coffee Jazz Datasym\";",
									"    console.log(\"--->Terminal Name is \" + Ter2);",
									"    tests[\"--->Terminal Type ID is \" + Ter3] = Ter3 === 4;",
									"   console.log(\"--->Terminal Type ID is \" + Ter3);",
									"    tests[\"--->Default Purchase Catergory ID is \" + Ter4] = Ter4 === 4;",
									"    console.log(\"--->Default Purchase Catergory ID is \" + Ter4);",
									"",
									"",
									"    tests[\"<1------------------------Terminal Mode------------------------------>\"] = responseBody.has(\"terminal\");",
									"    console.log(\"<1--------------------------Terminal Model--------------------------->\");",
									"    tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"    console.log(\"<---------------------End Of Test Case-------------------->\");",
									"",
									"    //99999999999999999999999999999999999999999999999999999999999999999999",
									"});",
									"",
									"postman.setGlobalVariable(\"ErrorMessage\",() =>",
									"{",
									"//   Display Error Details   ",
									"  tests[\"Test Case Failed  ---->  \" + responseJSON.details] = responseCode.code === 200;",
									"  console.log(\"Test Case Failed ----> \" +responseJSON.details);",
									"",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "285cf137-8edf-4edb-8945-02aa1d67a180",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time - No of Test Cases -95 ",
									"eval(globals.commonTest2)();",
									"eval(globals.AccountTest4)();",
									"eval(globals.AccountTest5)();",
									"eval(globals.AccountTest6)();",
									"eval(globals.commonTest7)();",
									"eval(globals.AccountTest8)();",
									"eval(globals.AccountTest9)();",
									"eval(globals.AccountTest10)();",
									"eval(globals.AccountTest11)();",
									"eval(globals.AccountTest12)();",
									"eval(globals.AccountTest13)();",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							}
						],
						"body": {},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/account/card/17111",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"account",
								"card",
								"17111"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "AccountNotFound_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/account/card/7777777\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									"",
									""
								],
								"id": "ef819e17-b719-4970-b3d3-9314dd6b8c7f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setGlobalVariable(\"Test_500_1\",() => ",
									"{",
									" //  - Validating http Status Code,Content Type, Response Time -   ",
									"    tests[\"<--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    tests[\"Status code is 500\"] =  responseCode.code === 500;",
									"    console.log(\"Status code is 500\");",
									"    tests[\"Content - Type is Present\"] =  postman.getResponseHeader(\"Content-Type\");",
									"    console.log(\"Content - Type is Present\");",
									"    tests[\"Response Time is \"+  responseTime] =  responseTime < 200;",
									"    console.log(\"Response Time is \"+  responseTime);",
									"    tests[\"<----------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"});",
									"",
									"",
									"postman.setGlobalVariable(\"Test_500_2\",() => ",
									"{",
									"    ",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"",
									"var e1 =responseJSON.httpStatus;",
									"var e2=responseJSON.errorCode;",
									"var e3=responseJSON.details;",
									"tests[\"---->Http Status should be 500.Actual Value is \"+ e1] =e1 === 500 ;",
									"console.log(\"---->Http Status should be 500.Actual Value is \"+ e1);",
									"",
									"tests[\"---->Error Code should be \"+pm.globals.get(\"ExpectedCode\")+\".Actual Value is \"+ e2] =e2 === pm.globals.get(\"ExpectedCode\") ;",
									"console.log(\"---->Error Code should be \"+pm.globals.get(\"ExpectedCode\")+\".Actual Value is \"+ e2);",
									"tests[\"---->Details should be \"+pm.globals.get(\"ExpectedMessage\")+\".Actual Value is  -\"+ e3] =e3 === pm.globals.get(\"ExpectedMessage\") ;",
									"console.log(\"---->Details should be \"+pm.globals.get(\"ExpectedMessage\")+\" .Actual Value is \"+ e3);",
									"",
									"tests[\"<r-----------------End of Test Case------------------------------>\"] = true;",
									"console.log(\"<---------------End of Test Case------------------->\"); ",
									"",
									"});",
									"",
									"postman.setGlobalVariable(\"Test_500_3\",() => ",
									"{",
									"",
									"//  Display Error Details   ",
									"  tests[\"Test Case Failed  ---->  \" + responseJSON.details] = responseCode.code === 500;",
									"  console.log(\"Test Case Failed  ---->\"  + responseJSON.details);",
									"});",
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E7100\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E7100 - Account Not Found\");",
									"",
									""
								],
								"id": "de4e7605-eee8-4658-b0c9-55880229c056",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/account/card/7777777",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"account",
								"card",
								"7777777"
							]
						}
					},
					"response": []
				},
				{
					"name": "InactiveAccount_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/account/card/7777777\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									""
								],
								"id": "5c0a024a-edc3-4d29-9cac-a9291ecfb3b2",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E7101\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E7101 - Account is Inactive\");",
									"",
									""
								],
								"id": "d49c65bf-3d42-460d-b073-fab842333c49",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/account/card/17112",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"account",
								"card",
								"17112"
							]
						}
					},
					"response": []
				},
				{
					"name": "CannotChargeAtThisLocation_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/account/card/7777777\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									""
								],
								"id": "cbfd4b5a-26dc-4054-8274-05be46d70038",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E7101\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E7101 - Account cannot charge at this location.\");",
									"",
									""
								],
								"id": "80f7fb14-e19d-485a-9ad1-911c8a616858",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/account/card/900531",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"account",
								"card",
								"900531"
							]
						}
					},
					"response": []
				},
				{
					"name": "RewardNotFound_x",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffe0533e-0d83-4c6c-bda1-2589a3a93311",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E5000\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E5000 - Loyalty Reward Program Not Found\");",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b50f2f4f-5f50-41fd-abc7-ea053d043ca0",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/transaction/sale\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"//tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":0,\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n   {\n                        \"employeeId\": 1000000453,\n                        \"quantity\": 1,\n                        \"amount\": 2,\n                        \"extendedAmount\": 2,\n                        \"eligibleAmount\": 2,\n                        \"reward\": {\n                            \"id\": 114,\n                            \"pointsToRedeem\": 1,\n                            \"typeName\": \"Free Product(s)\",\n                            \"name\": \"1_Free Product Reward\",\n                            \"value\": 2,\n                            \"autoPayout\": false,\n                            \"taxes\": [\n                                {\n                                    \"id\": 19,\n                                    \"name\": \"Hospital 1 Tax\",\n                                    \"taxRate\": 0.05\n                                }\n                            ],\n                            \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n                        }\n                    }\n      ]\n  \n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "InsufficientFunds_x",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7357aad-1a7f-4505-b97e-d5738237ccfd",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E7001\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E7001 - Transaction exceeds Daily Transaction limit.  Please Try Again.\");",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21293b10-0f0f-4b20-b65c-65d92c71b03f",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/transaction/sale\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 250,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":250,\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n      ]\n  \n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "TrxAlreadyRefunded_x",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4f6365a-20f1-4138-8d2e-27a6bbb0cfd0",
								"type": "text/javascript",
								"exec": [
									"{",
									"var newDate = new Date();",
									"var year = newDate.getFullYear().toString();",
									"var month = (1 + newDate.getMonth()).toString();",
									"var dayVar = newDate.getDate().toString();",
									"var hours = newDate.getHours().toString();",
									"var minutes = newDate.getMinutes().toString();",
									"var seconds = newDate.getSeconds().toString();",
									"var milliseconds = newDate.getMilliseconds().toString();",
									"var time = hours + ':' + minutes + ':' + seconds + '.' + milliseconds;",
									"var validDate =  month + '/' + dayVar + '/' + year + \" \" + time;",
									"",
									"postman.setEnvironmentVariable('timeStampVariable', validDate);",
									"",
									"}",
									"pm.globals.unset(\"ExpectedCode\");",
									"pm.globals.set(\"ExpectedCode\", \"E5000\");",
									"",
									"pm.globals.unset(\"ExpectedMessage\");",
									"pm.globals.set(\"ExpectedMessage\", \"E5000 - Product lines in this Transaction were already Voided or Refunded\");",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c304b47e-dae2-4866-bd96-dc0bdfe43075",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"var schema = {",
									"  \"$id\": \"http://SAMQC84RTM/pos171Supraja/api/transaction/refund/563731\",",
									"  \"type\": \"object\",",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
									"  \"additionalProperties\": false,",
									"  \"properties\": {",
									"    \"httpStatus\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"errorCode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"httpStatus\",",
									"    \"errorCode\",",
									"    \"details\"",
									"  ]",
									"};",
									"tv4.validate(responseJSON,schema);",
									"if(responseCode.code === 500)",
									"{",
									"//  - Validating Schema -  ",
									"eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.Test_500_1)();",
									"",
									"// - Validating Values of fields (http Status,Error Code, Error Details)",
									"eval(globals.Test_500_2)();",
									"",
									"}",
									"else",
									"{",
									"/*  Display Error Details   */",
									"eval(globals.Test_500_3)();",
									"",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/refund/563731",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"refund",
								"563731"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "14_Points",
			"item": [
				{
					"name": "Dollar_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f60b045-e215-4669-a3f5-ba68fce23cef",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"    var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint)();",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39a27bac-e254-4576-8d90-d04cfa3b7057",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"var i = pm.environment.get(\"price\");",
									"",
									"pm.globals.unset(\"Type\");",
									"pm.globals.set(\"Type\", 1);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",1);",
									"",
									"// Product Line",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", 1);",
									"",
									"pm.globals.unset(\"P_Amt\");",
									"pm.globals.set(\"P_Amt\", i *1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\",i * 1);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 1);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\", i * 1);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", i * 1);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i * 1);",
									"if(i < 1.5)",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 1);",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 1);",
									"}",
									"else",
									"{",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", 2);  ",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", 2);",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": {{price}},\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{price}},\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						},
						"description": "Validating Inquire with Quickcharge Tender"
					},
					"response": []
				},
				{
					"name": "ProductLevel_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28ef51da-c668-4c12-9ed9-05a95760bb96",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"    ",
									"var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint2)();",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",4);",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"eval(globals.QC_PAItemLoyaltyAccountPoint2)();",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7875f064-2a51-48a2-8f7e-fa5fd9c2c193",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"// Product Line",
									"",
									"var i=pm.environment.get(\"count\");",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_Amt\");",
									"pm.globals.set(\"P_Amt\", 2);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 236);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",4);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i*2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", i * 2 );",
									"",
									"postman.setGlobalVariable(\"QC_PAItemLoyaltyAccountPoint2\", () =>",
									"{",
									"    //  - Validating [QC_PAItemLoyaltyPoint] Table",
									"",
									"tests[\"<-----------------QC_PAItemLoyaltyPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointDetails\");",
									"console.log(\"<1---------------------QC_PAItemLoyaltyPoint Table -------------------->\");",
									"",
									"var i1 = 0;",
									"var length = responseJSON.products[0].loyaltyPointDetails.length;",
									"var j1 = responseJSON.products[0].quantity;",
									"var len = pm.variables.get(\"prgId\");",
									"for (i1 = 0; i1 < length; i1++) {",
									"",
									"    if (i1 > 0) {",
									"         tests[\"<---\" + P + \"--------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"        pm.globals.unset(\"ProgramId\");",
									"        pm.globals.set(\"ProgramId\", len);",
									"        pm.globals.unset(\"P1\");",
									"        pm.globals.set(\"P1\", \"---\");",
									"         pm.globals.unset(\"I_Points\");",
									"        pm.globals.set(\"I_Points\", j1);",
									"        ",
									"    }",
									"    var P =pm.variables.get(\"P1\");",
									"    var Lpd1 = responseJSON.products[0].loyaltyPointDetails[i1].id;",
									"    var Lpd2 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyProgramId;",
									"    var Lpd3 = responseJSON.products[0].loyaltyPointDetails[i1].points;",
									"    var Lpd4 = responseJSON.products[0].loyaltyPointDetails[i1].eligibleAmount;",
									"    var Lpd5 = responseJSON.products[0].loyaltyPointDetails[i1].refundedPoints;",
									"    var Lpd6 = responseJSON.products[0].loyaltyPointDetails[i1].refundedEligibleAmount;",
									"    var Lpd7 = responseJSON.products[0].loyaltyPointDetails[i1].transLineItemId;",
									"    var Lpd8 = responseJSON.products[0].loyaltyPointDetails[i1].loyaltyAccountPointId;",
									"",
									"    tests[\"--\" + P + \"--->PAItem Loyalty Point ID is \" + Lpd1] = Lpd1 !== undefined;",
									"    console.log(\"----->PAItem Loyalty Point ID is \" + Lpd1);",
									"    tests[\"--\" + P + \"--->Loyalty Account Point Id is \" + Lpd8] = Lpd8 !== undefined;",
									"    console.log(\"----->Loyalty Account Point Id is \" + Lpd8);",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + Lpd2] = Lpd2 === pm.globals.get(\"ProgramId\");",
									"    console.log(\"----->Loylaty Program ID is \" + Lpd2);",
									"    tests[\"--\" + P + \"--->PATransline Item Id is \" + Lpd7] = Lpd7 !== undefined;",
									"    console.log(\"----->PATransline Item Id is \" + Lpd7);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Lpd4] = Lpd4 === pm.globals.get(\"I_EligibleAmt\");",
									"    console.log(\"----->Eligible Amount is \" + Lpd4);",
									"    tests[\"---\" + P + \"-->Points are \" + Lpd3] = Lpd3 === pm.globals.get(\"I_Points\");",
									"    console.log(\"----->Points are \" + Lpd3);",
									"    tests[\"--\" + P + \"---->Refunded Eligible Amount is \" + Lpd6] = Lpd6 === pm.globals.get(\"I_RefEligibleAmt\");",
									"    console.log(\"----->Refunded Eligible Amount is \" + Lpd6);",
									"    tests[\"---\" + P + \"-->Refunded Points are \" + Lpd5] = Lpd5 === pm.globals.get(\"I_RefPoints\");",
									"    console.log(\"----->Refunded Points are \" + Lpd5);",
									"}",
									"tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"console.log(\"<---------------------End Of Test Case-------------------->\");",
									"});",
									"",
									"postman.setGlobalVariable(\"QC_PALoyaltyAccountPoint2\",() =>",
									"{",
									"//  - Validating Values of [QC_LoyaltyAccountPoint] Table",
									"if(responseBody.has(\"loyaltyPointsEarned\"))",
									"{",
									"",
									"tests[\"<-----------------QC_LoyaltyAccountPoint Table ------------------>\"] = responseBody.has(\"loyaltyPointsEarned\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var j=0;",
									"var length=responseJSON.loyaltyPointsEarned.length;",
									"var len= pm.variables.get(\"prgId\");",
									"var j2 = responseJSON.products[0].quantity;",
									"for(j=0; j<length;j++)",
									"{",
									"    ",
									"if(j>0)",
									"{",
									"    tests[\"--\" + P + \"-----------------------------------oo-------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------------->\");",
									"    pm.globals.unset(\"ProgramId\");",
									"    pm.globals.set(\"ProgramId\", len);",
									"    pm.globals.unset(\"PointsEarned\");",
									"    pm.globals.set(\"PointsEarned\",j2);",
									"    pm.globals.unset(\"P1\");",
									"    pm.globals.set(\"P1\", \"---\");",
									"    }",
									"var P =pm.variables.get(\"P1\");",
									"var Lpe1=responseJSON.loyaltyPointsEarned[j].id;",
									"var Lpe2=responseJSON.loyaltyPointsEarned[j].points;",
									"var Lpe3=responseJSON.loyaltyPointsEarned[j].employeeId;",
									"var Lpe4=responseJSON.loyaltyPointsEarned[j].loyaltyProgram.id;",
									"",
									"tests[\"--\" + P + \"--->Loyalty Account Point ID is :\"+ Lpe1] = Lpe1 !== undefined;",
									"console.log(\"----- >Loylaty Account Point ID is :\"+ Lpe1);",
									"tests[\"--\" + P + \"--->Loyalty Program ID is :\"+ Lpe4] = Lpe4 === pm.globals.get(\"ProgramId\");",
									"console.log(\"---->Loyalty Program ID is \"+ Lpe4);",
									"tests[\"--\" + P + \"--->Employee ID is : \"+ Lpe3] = Lpe3 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpe3);",
									"tests[\"--\" + P + \"--->Points are :\"+ Lpe2] = Lpe2 === pm.globals.get(\"PointsEarned\");",
									"console.log(\"----->Points are \"+ Lpe2);",
									"}",
									"",
									"};",
									"if(responseBody.has(\"loyaltyPointsRedeemed\"))",
									"{",
									"",
									"tests[\"<-----------------------QC_LoyaltyAccountPoint Table ------------------>\"] = ",
									"responseBody.has(\"loyaltyPointsRedeemed\");",
									"console.log(\"<1---------------------QC_LoyaltyAccountPoint Table -------------------->\");",
									"",
									"var Lpr1=responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var Lpr2=responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var Lpr3=responseJSON.loyaltyPointsRedeemed[0].points;",
									"var Lpr4=responseJSON.loyaltyPointsRedeemed[0].rewards[0].id;",
									"",
									"tests[\"----->Loyalty Program ID is :\"+ Lpr1] = Lpr1 === 1;",
									"console.log(\"---->Loyalty Program ID is \"+ Lpr1);",
									"tests[\"----->Employee ID is : \"+ Lpr2] = Lpr2 !== undefined;",
									"console.log(\"----->Employee ID is \"+ Lpr2);",
									"tests[\"----->Points are :\"+ Lpr3] = Lpr3 === pm.globals.get(\"PointsRedeemed\");",
									"console.log(\"----->Points are \"+ Lpr3);",
									"tests[\"----->Loyalty Reward Line ItemID is :\"+ Lpr4] = Lpr4 !== undefined;",
									"console.log(\"---->Loyalty Reward Line ItemID is \"+ Lpr4);",
									"",
									"",
									"};",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"Apple\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count1}},\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						},
						"description": "Validating Inquire with Quickcharge Tender"
					},
					"response": []
				},
				{
					"name": "Wellness_x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2fc6f65-4ced-4777-8662-aff32f27b8ef",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"    var P =pm.variables.get(\"P1\");",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"//  - Validating Values of [QC_PATransactions] Table",
									"eval(globals.QC_PATransactions)();",
									"",
									"//  - Validating  Values of [QC_PATransLineItem] Table",
									"eval(globals.QC_PATranslineItem)();",
									"",
									"//  - Validating [QC_LoyaltyAccountPoint] Table",
									"eval(globals.QC_PALoyaltyAccountPoint2)();",
									"",
									"//  - Validating [QC_PAItemLoyaltyPoint] Table",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",5);",
									"eval(globals.QC_PAItemLoyaltyAccountPoint2)();",
									"",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "48f61669-98f4-4180-9382-655d8b68a553",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"var i= pm.environment.get(\"count\");",
									"",
									"pm.globals.unset(\"Qty\");",
									"pm.globals.set(\"Qty\", i * 1);",
									"",
									"pm.globals.unset(\"P_ExtAmt\");",
									"pm.globals.set(\"P_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"ProductId\");",
									"pm.globals.set(\"ProductId\", 41);",
									"",
									"pm.globals.unset(\"P_Ref_Qty\");",
									"pm.globals.set(\"P_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_Amt\");",
									"pm.globals.set(\"P_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"P_Ref_ExtAmt\");",
									"pm.globals.set(\"P_Ref_ExtAmt\", 0);",
									"",
									"// Tender Line",
									"pm.globals.unset(\"TenderId\");",
									"pm.globals.set(\"TenderId\", 2);",
									"",
									"pm.globals.unset(\"T_Qty\");",
									"pm.globals.set(\"T_Qty\", 1);",
									"",
									"pm.globals.unset(\"T_Amt\");",
									"pm.globals.set(\"T_Amt\",i * 2);",
									"",
									"pm.globals.unset(\"T_ExtAmt\");",
									"pm.globals.set(\"T_ExtAmt\", i * 2);",
									"",
									"pm.globals.unset(\"T_Ref_Qty\");",
									"pm.globals.set(\"T_Ref_Qty\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_Amt\");",
									"pm.globals.set(\"T_Ref_Amt\", 0);",
									"",
									"pm.globals.unset(\"T_Ref_ExtAmt\");",
									"pm.globals.set(\"T_Ref_ExtAmt\", 0);",
									"",
									"// Values of [QC_LoyaltyAccountPoint] Table",
									"",
									"pm.globals.unset(\"PointsEarned\");",
									"pm.globals.set(\"PointsEarned\", i * 2);",
									"",
									"pm.globals.unset(\"ProgramId\");",
									"pm.globals.set(\"ProgramId\", 1);",
									"",
									"pm.globals.unset(\"P1\");",
									"pm.globals.set(\"P1\", \"-\");",
									"",
									"pm.globals.unset(\"prgId\");",
									"pm.globals.set(\"prgId\",5);",
									"",
									"//  - Values of [QC_PAItemLoyaltyPoint] Table",
									"",
									"pm.globals.unset(\"I_RefEligibleAmt\");",
									"pm.globals.set(\"I_RefEligibleAmt\", 0);",
									"",
									"pm.globals.unset(\"I_RefPoints\");",
									"pm.globals.set(\"I_RefPoints\", 0);",
									"",
									"pm.globals.unset(\"I_EligibleAmt\");",
									"pm.globals.set(\"I_EligibleAmt\", i*2);",
									"",
									"pm.globals.unset(\"I_Points\");",
									"pm.globals.set(\"I_Points\", i*2 );",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n{\n\"quantity\": {{count}},\n\"amount\": 2,\n\"product\": {\n\"name\": \"hot tea\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":{{count1}},\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/sale",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"sale"
							]
						},
						"description": "Validating Inquire with Free Product Reward"
					},
					"response": []
				}
			]
		},
		{
			"name": "15_Inquire",
			"description": "",
			"item": [
				{
					"name": "Inquire with Cash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5936dd96-f82c-4893-a82a-3ff3542e2f0a",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"eval(globals.Test1)(); ",
									"eval(globals.Test2)(); ",
									"eval(globals.Test3)(); ",
									"eval(globals.Test4)(); ",
									"eval(globals.Test5)(); ",
									"eval(globals.Test6)();",
									"eval(globals.Test7)();",
									"eval(globals.product)();",
									"eval(globals.Cash)();",
									"eval(globals.Terminal)(); ",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "49f13d29-e5fc-446d-9dec-390ca27d13e4",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"postman.setGlobalVariable(\"Test1\", () => {",
									"    //  - Validating Values (timestamp,drawerNum,transactionTypeId,transactionType,transReferenceNumber,userName,recordedOffline) -  ",
									"    var i1 = responseJSON.timeStamp;",
									"\tvar i2 = responseJSON.transactionTypeId;",
									"\tvar i3 = responseJSON.transactionType;",
									"\tvar i4 = responseJSON.transReferenceNumber;",
									"\tvar i5 = responseJSON.userName;",
									"\tvar i6 = responseJSON.recordedOffline;",
									"\t",
									"\ttests[\"---->Time Stamp is \" + i1] = i1 !== undefined;",
									"    console.log(\"---->Time Stamp is \" + i1);",
									"    tests[\"---->Transaction Type Id is \" + i2] = i2 === 1;",
									"    console.log(\"---->Transaction Type Id is \" + i2);",
									"    tests[\"---->Transaction Type is \" + i3] = i3 === \"SALE\";",
									"    console.log(\"---->Transaction Type is \" + i3);",
									"    tests[\"---->Transaction Reference Number is \" + i4] = i4 !== undefined;",
									"    console.log(\"---->Transaction Reference Number is \" + i4);",
									"    tests[\"---->User Name is \" + i5] = i5 === \"SuperUser\";",
									"    console.log(\"---->User Name is \" + i5);",
									"    tests[\"---->Recorded Offline is \" + i6] = i6 === false;",
									"    console.log(\"---->Recorded Offline is \" + i6);",
									"    tests[\"<--------------------------------------------------------------------------->\"] = true;",
									"    console.log(\"<---------------------------------------------------------->\");",
									"});",
									"postman.setGlobalVariable(\"Test2\", () => {",
									"    //   - Validating Loyalty Account Model",
									"",
									"    var LA1 = responseJSON.loyaltyAccount.id;",
									"    var LA2 = responseJSON.loyaltyAccount.name;",
									"    var LA3 = responseJSON.loyaltyAccount.badge;",
									"    var LA4 = responseJSON.loyaltyAccount.number;",
									"    var LA5 = responseJSON.loyaltyAccount.status;",
									"    var LA6 = responseJSON.loyaltyAccount.accountType;",
									"    var LA7 = responseJSON.loyaltyAccount.email;",
									"    var LA8 = responseJSON.loyaltyAccount.available;",
									"    var LA9 = responseJSON.loyaltyAccount.singleChargeLimit;",
									"    var LA10 = responseJSON.loyaltyAccount.terminalGroupBalance;",
									"    var LA11 = responseJSON.loyaltyAccount.terminalGroupLimit;",
									"    var LA12 = responseJSON.loyaltyAccount.globalBalance;",
									"    var LA13 = responseJSON.loyaltyAccount.globalLimit;",
									"    var LA14 = responseJSON.loyaltyAccount.receiptBalanceLabel;",
									"    var LA15 = responseJSON.loyaltyAccount.receiptBalance;",
									"    var LA16 = responseJSON.loyaltyAccount.receiptBalanceTypeId;",
									"    var LA17 = responseJSON.loyaltyAccount.payrollGroupingId;",
									"    tests[\"<---------------Loyalty Account Model--------------------->\"] = responseBody.has(\"id\");",
									"    console.log(\"<---------------Loyalty Account Model--------------------->\");",
									"    tests[\"---->Loyalty Account ID is \" + LA1] = LA1 === 1000000453;",
									"    console.log(\"---->Loyalty Account ID is \" + LA1);",
									"    tests[\"---->Name is \" + LA2] = LA2 === \"Avinash R\";",
									"    console.log(\"---->Name is \" + LA2);",
									"    tests[\"---->Badge is \" + LA3] = LA3 === \"17111\";",
									"    console.log(\"---->Badge is \" + LA3);",
									"    tests[\"---->Number is \" + LA4] = LA4 === \"17111\";",
									"    console.log(\"---->Number is \" + LA4);",
									"    tests[\"---->Status is \" + LA5] = LA5 === \"Active\";",
									"    console.log(\"---->Status is \" + LA5);",
									"    tests[\"---->Account Type is \" + LA6] = LA6 === \"Payroll Deduction\";",
									"    console.log(\"---->Account Type is \" + LA6);",
									"    tests[\"---->Email is \" + LA7] = LA7 === \"sbandi@mmhayes.com\";",
									"    console.log(\"---->Email is \" + LA7);",
									"    tests[\"---->Availabale Amount is \" + LA8] = LA8 !== undefined;",
									"    console.log(\"---->Available Amount is \" + LA8);",
									"    tests[\"---->Single Charge Limit Amount is \" + LA9] = LA9 !== undefined;",
									"    console.log(\"---->Single Charge Limit Amount is \" + LA9);",
									"    tests[\"---->Terminal Group Balance is \" + LA10] = LA10 !== undefined;",
									"    console.log(\"---->Terminal Group Balance is \" + LA10);",
									"    tests[\"---->Terminal Group Limit is \" + LA11] = LA11 !== undefined;",
									"    console.log(\"---->Terminal Group Limit is \" + LA11);",
									"    tests[\"---->Global Balance is \" + LA12] = LA12 !== undefined;",
									"    console.log(\"---->Global Balance is \" + LA12);",
									"    tests[\"---->Global Limit is \" + LA13] = LA13 !== undefined;",
									"    console.log(\"---->Global Limit is \" + LA13);",
									"    tests[\"---->Receipt Balance Label is \" + LA14] = LA14 === \"Customer's Balance\";",
									"    console.log(\"---->Receipt Balance Label is \" + LA14);",
									"    tests[\"---->Receipt Balance is \" + LA15] = LA15 !== undefined;",
									"    console.log(\"---->Receipt Balance is \" + LA15);",
									"    tests[\"---->Receipt Balance Type Id is \" + LA16] = LA16 === 3;",
									"    console.log(\"---->Receipt Balance Type Id is \" + LA16);",
									"    tests[\"---->Payroll Grouping Id is \" + LA17] = LA17 === 1;",
									"    console.log(\"---->Payroll Grouping Id is \" + LA17);",
									"    tests[\"QC Discounts Available collection Model is Present\"] = responseBody.has(\"qcDiscountsAvailable\");",
									"    console.log(\"QC Discounts Available Model is Present\");",
									"    tests[\"QC Discounts Applied collection Model is Present\"] = responseBody.has(\"qcDiscountsApplied\");",
									"    console.log(\"QC Discounts Applied Model is Present\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"    tests[\"<---------------Loyalty Points Collection Model--------------------->\"] = responseBody.has(\"loyaltyPoints\");",
									"    console.log(\"<-----------------Loyalty Points Collection Model------------------->\");",
									"    tests[\"<------------------------------------------------------------------------>\"] = true;",
									"    console.log(\"<----------------------------------------------------------->\");",
									"});",
									"postman.setGlobalVariable(\"Test3\", () => {",
									"    //   - Validating Loylaty Points Collection Model",
									"",
									"    var LP1 = responseJSON.loyaltyAccount.loyaltyPoints[0].points;",
									"    var LP2 = responseJSON.loyaltyAccount.loyaltyPoints[0].employeeId;",
									"    tests[\"Points are \" + LP1] = LP1 > 4000;",
									"    console.log(\"Points are \" + LP1);",
									"    tests[\"Employee ID is \" + LP2] = LP2 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP2);",
									"",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<---------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var Lp3 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.id;",
									"    var Lp4 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.name;",
									"    var Lp5 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.typeName;",
									"",
									"    tests[\"--->Loyalty Program ID is \" + Lp3] = Lp3 === 1;",
									"    console.log(\"2--->Loyalty Program ID is \" + Lp3);",
									"    tests[\"--->Loyalty Program Name is \" + Lp4] = Lp4 === \"1Dollar\";",
									"    console.log(\"--->Loyalty Program Name is \" + Lp4);",
									"    tests[\"--->Loyalty Prorgram Type Name is \" + Lp5] = Lp5 === \"Dollar\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + Lp5);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<---------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<---------------------Tenders Collection Model--------------------->\");",
									"",
									"    var Lp6 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[0].id;",
									"    var Lp7 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[0].name;",
									"    var Lp8 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[1].id;",
									"    var Lp9 = responseJSON.loyaltyAccount.loyaltyPoints[0].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"--->Tender ID is \" + Lp6] = Lp6 === 1;",
									"    console.log(\"----------->Tender ID is \" + Lp6);",
									"    tests[\"--->Tender Name is \" + Lp7] = Lp7 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + Lp7);",
									"    tests[\"--->Tender ID is \" + Lp8] = Lp8 === 2;",
									"    console.log(\"----------->Tender ID is \" + Lp8);",
									"    tests[\"--->Tender Name is \" + Lp9] = Lp9 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + Lp9);",
									"",
									"    tests[\"<--------------End Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<------------------End Tenders Collection Model--------------------->\");",
									"    tests[\"<-------------End Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"});",
									"postman.setGlobalVariable(\"Test4\", () => {",
									"    //   - Validating Rewards Available Model",
									"",
									"    var P = \"-\";",
									"    tests[\"<---------------Rewards Available Model------------------->\"] = responseBody.has(\"rewardsAvailable\");",
									"    console.log(\"<----------------Rewards Available Model------------------>\");",
									"",
									"    var r1 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].id;",
									"    var r2 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].pointsToRedeem;",
									"    var r3 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].typeName;",
									"    var r4 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].name;",
									"    var r5 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].value;",
									"    var r6 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].autoPayout;",
									"    var r7 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].id;",
									"    var r8 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].name;",
									"    var r9 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].taxes[0].taxRate;",
									"    var r10 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[0].notes;",
									"",
									"    tests[\"--\" + P + \"-->ID Value is \" + r1] = r1 === 1;",
									"    console.log(\"---->ID Value is \" + r1);",
									"    tests[\"--\" + P + \"-->Points To Redeem Value is \" + r2] = r2 === 1;",
									"    console.log(\"---->Points To Redeem Value is \" + r2);",
									"    tests[\"--\" + P + \"-->Type Name Value is \" + r3] = r3 === \"Free Product(s)\";",
									"    console.log(\"---->Type Name Value is \" + r3);",
									"    tests[\"--\" + P + \"-->Name Value is \" + r4] = r4 === \"1_Free Product Reward\";",
									"    console.log(\"--\" + P + \"-->Name Value is \" + r4);",
									"    tests[\"--\" + P + \"-->Value is \" + r5] = r5 === 2;",
									"    console.log(\"--\" + P + \"-->Value is \" + r5);",
									"    tests[\"--\" + P + \"-->Auto Payout Value is \" + r6] = r6 === false;",
									"    console.log(\"---->Auto Payout Value is \" + r6);",
									"    tests[\"--\" + P + \"-->Notes is \" + r10] = r10 !== undefined;",
									"    console.log(\"---->Notes is \" + r10);",
									"",
									"    // Validating the field values of Taxes Collection Model ",
									"",
									"    tests[P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"",
									"    tests[\"--\" + P + \"-->Tax Id is \" + r7] = r7 === 19;",
									"    console.log(\"----->Tax Id is \" + r7);",
									"    tests[\"--\" + P + \"-->Tax Name is \" + r8] = r8 === \"Hospital 1 Tax\";",
									"    console.log(\"----->Tax Name is \" + r8);",
									"    tests[\"--\" + P + \"-->Tax Rate Value is \" + r9] = r9 === 0.05;",
									"    console.log(\"----->Tax Rate Value is \" + r9);",
									"    var P = \"--\";",
									"    tests[\"<----------------------------------------------------------->\"] = true;",
									"    console.log(\"<--------------------------------------------------->\");",
									"    var r11 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].id;",
									"    var r12 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].pointsToRedeem;",
									"    var r13 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].typeName;",
									"    var r14 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].name;",
									"    var r15 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].value;",
									"    var r16 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].autoPayout;",
									"    var r17 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].id;",
									"    var r18 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].name;",
									"    var r19 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].taxes[0].taxRate;",
									"    var r20 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailable[1].notes;",
									"",
									"    tests[\"--\" + P + \"-->ID Value is \" + r11] = r11 === 2;",
									"    console.log(\"---->ID Value is \" + r11);",
									"    tests[\"--\" + P + \"-->Points To Redeem Value is \" + r12] = r12 === 1;",
									"    console.log(\"---->Points To Redeem Value is \" + r12);",
									"    tests[\"--\" + P + \"-->Type Name Value is \" + r13] = r13 === \"Transaction Credit\";",
									"    console.log(\"---->Type Name Value is \" + r13);",
									"    tests[\"--\" + P + \"-->Name Value is \" + r14] = r14 === \"2_Transaction Credit Reward\";",
									"    console.log(\"--\" + P + \"-->Name Value is \" + r14);",
									"    tests[\"--\" + P + \"-->Value is \" + r15] = r15 === 2;",
									"    console.log(\"--\" + P + \"-->Value is \" + r15);",
									"    tests[\"--\" + P + \"-->Auto Payout Value is \" + r16] = r16 === false;",
									"    console.log(\"---->Auto Payout Value is \" + r16);",
									"    tests[\"--\" + P + \"-->Notes is \" + r20] = r20 !== undefined;",
									"    console.log(\"---->Notes is \" + r20);",
									"",
									"    // Validating the field values of Taxes Collection Model ",
									"",
									"    tests[P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"",
									"    tests[\"--\" + P + \"-->Tax Id is \" + r17] = r17 === 19;",
									"    console.log(\"------->Tax Id is \" + r17);",
									"    tests[\"--\" + P + \"-->Tax Name is \" + r18] = r18 === \"Hospital 1 Tax\";",
									"    console.log(\"------->Tax Name is \" + r18);",
									"    tests[\"--\" + P + \"-->Tax Rate Value is \" + r19] = r19 === 0.05;",
									"    console.log(\"------->Tax Rate Value is \" + r19);",
									"",
									"",
									"    tests[\"--\" + P + \"---------------End Rewards Available Model---------------------->\"] = responseBody.has(\"rewardsAvailable\");",
									"    console.log(\"<--------------End Rewards Available Model------------------>\");",
									"",
									"});",
									"postman.setGlobalVariable(\"Test5\", () => {",
									"    var P = \"---\";",
									"    tests[\"<---------------Rewards Available for Collection Model--------------->\"] = responseBody.has(\"rewardsAvailableForTransaction\");",
									"    console.log(\"<----------Rewards Available for Collection Model--------->\");",
									"",
									"    ",
									"",
									"    // - validating Free Product reward model in Rewards Available for Transaction",
									"    var raft1 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].employeeId;",
									"    var raft2 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].quantity;",
									"    var raft3 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].amount;",
									"    var raft4 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].extendedAmount;",
									"    var raft5 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].eligibleAmount;",
									"",
									"    tests[\"--\" + P + \"-->Employee ID is \" + raft1] = raft1 === 1000000453;",
									"    console.log(\"---->Employee ID is \" + raft1);",
									"    tests[\"--\" + P + \"-->Quantity is \" + raft2] = raft2 === 1;",
									"    console.log(\"---->Quantity is \" + raft2);",
									"    tests[\"--\" + P + \"-->Amount is \" + raft3] = raft3 === 2;",
									"    console.log(\"--\" + P + \"-->Amount is \" + raft3);",
									"    tests[\"--\" + P + \"-->Extended Amount is \" + raft4] = raft4 === 2;",
									"    console.log(\"--\" + P + \"-->Extended Amount is \" + raft4);",
									"    tests[\"--\" + P + \"-->Eligible Amount is \" + raft5] = raft5 === 2;",
									"    console.log(\"---->Eligible Amount is \" + raft5);",
									"",
									"    tests[\"<--\" + P + \"----------------Reward Model1---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"",
									"    var ra1 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.id;",
									"    var ra2 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.pointsToRedeem;",
									"    var ra3 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.typeName;",
									"    var ra4 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.name;",
									"    var ra5 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.value;",
									"    var ra6 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.autoPayout;",
									"    var ra7 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].id;",
									"    var ra8 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].name;",
									"    var ra9 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.taxes[0].taxRate;",
									"    var ra10 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[0].reward.notes;",
									"",
									"    tests[\"--\" + P + \"-->Reward ID Value is \" + ra1] = ra1 === 1;",
									"    console.log(\"---->Reward ID Value is \" + ra1);",
									"    tests[\"--\" + P + \"-->Points To Redeem Value is \" + ra2] = ra2 === 1;",
									"    console.log(\"---->Points To Redeem Value is \" + ra2);",
									"    tests[\"--\" + P + \"-->Type Name Value is \" + ra3] = ra3 === \"Free Product(s)\";",
									"    console.log(\"---->Type Name Value is \" + ra3);",
									"    tests[\"--\" + P + \"-->Name is \" + ra4] = ra4 === \"1_Free Product Reward\";",
									"    console.log(\"---->Name is \" + ra4);",
									"    tests[\"--\" + P + \"---->Value is \" + ra5] = ra5 === 2;",
									"    console.log(\"---->Value is \" + ra5);",
									"    tests[\"--\" + P + \"-->Auto Payout Value is \" + ra6] = ra6 === false;",
									"    console.log(\"---->Auto Payout Value is \" + ra6);",
									"    tests[\"--\" + P + \"-->Notes Value is \" + ra10] = true;",
									"    console.log(\"---->Notes Value is \" + ra10);",
									"    // Validating the field values of Taxes Collection Model",
									"",
									"    tests[ \"--\" + P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"",
									"    tests[\"--\" + P + \"--->Tax Id is \" + ra7] = ra7 === 19;",
									"    console.log(\"------->Tax Id is \" + ra7);",
									"    tests[\"--\" + P + \"--->Tax Name is \" + ra8] = ra8 === \"Hospital 1 Tax\";",
									"    console.log(\"------->Tax Name is \" + ra8);",
									"    tests[\"--\" + P + \"--->Tax Rate Value is \" + ra9] = ra9 === 0.05;",
									"    console.log(\"------->Tax Rate Value is \" + ra9);",
									"",
									"    tests[\"--\" + P + \"------------End of Reward Model1---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"",
									"    // - validating Transaction Credit reward model in Rewards Available for Transaction   ",
									"    var P = \"----\";",
									"    var raft6 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].employeeId;",
									"    var raft7 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].quantity;",
									"    var raft8 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].amount;",
									"    var raft9 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].extendedAmount;",
									"    var raft10 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].eligibleAmount;",
									"",
									"    tests[\"--\" + P + \"-->Employee ID is \" + raft6] = raft6 === 1000000453;",
									"    console.log(\"---->Employee ID is \" + raft6);",
									"    tests[\"--\" + P + \"-->Quantity is \" + raft7] = raft7 === 1;",
									"    console.log(\"---->Quantity is \" + raft7);",
									"    tests[\"--\" + P + \"-->Amount is \" + raft8] = raft8 === 2;",
									"    console.log(\"---->Amount is \" + raft8);",
									"    tests[\"--\" + P + \"-->Extended Amount is \" + raft9] = raft9 === 2;",
									"    console.log(\"---->Extended Amount is \" + raft9);",
									"    tests[\"--\" + P + \"-->Eligible Amount is \" + raft10] = raft10 === 0;",
									"    console.log(\"---->Eligible Amount is \" + raft10);",
									"",
									"    var ra11 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.id;",
									"    var ra12 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.pointsToRedeem;",
									"    var ra13 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.typeName;",
									"    var ra14 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.name;",
									"    var ra15 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.value;",
									"    var ra16 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.autoPayout;",
									"    var ra17 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].id;",
									"    var ra18 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].name;",
									"    var ra19 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.taxes[0].taxRate;",
									"    var ra20 = responseJSON.loyaltyAccount.loyaltyPoints[0].rewardsAvailableForTransaction[1].reward.notes;",
									"    tests[\"<--\" + P + \"----------------Reward Model2---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"    tests[\"--\" + P + \"-->Reward ID Value is \" + ra11] = ra11 === 2;",
									"    console.log(\"---->Reward ID Value is \" + ra11);",
									"    tests[\"--\" + P + \"-->Points To Redeem Value is \" + ra12] = ra12 === 1;",
									"    console.log(\"---->Points To Redeem Value is \" + ra12);",
									"    tests[\"--\" + P + \"-->Type Name Value is \" + ra13] = ra13 === \"Transaction Credit\";",
									"    console.log(\"--\" + P + \"-->Type Name Value is \" + ra13);",
									"    tests[\"--\" + P + \"-->Name Value is \" + ra14] = ra14 === \"2_Transaction Credit Reward\";",
									"    console.log(\"---->Name Value is \" + ra14);",
									"    tests[\"--\" + P + \"-->Value is \" + ra15] = ra15 === 2;",
									"    console.log(\"---->Value is \" + ra15);",
									"    tests[\"--\" + P + \"-->Auto Payout Value is \" + ra16] = ra16 === false;",
									"    console.log(\"---->Auto Payout Value is \" + ra16);",
									"    tests[\"--\" + P + \"-->Notes Value is \" + ra20] = ra20 !== undefined;",
									"    console.log(\"------>Notes Value is \" + ra20);",
									"    // Validating the field values of Taxes Collection Model ",
									"",
									"    tests[P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"",
									"    tests[\"--\" + P + \"--->Tax Id is \" + ra17] = ra17 === 19;",
									"    console.log(\"-------->Tax Id is \" + ra17);",
									"    tests[\"--\" + P + \"--->Tax Name is \" + ra18] = ra18 === \"Hospital 1 Tax\";",
									"    console.log(\"-------->Tax Name is \" + ra18);",
									"    tests[\"--\" + P + \"--->Tax Rate Value is \" + ra19] = ra19 === 0.05;",
									"    console.log(\"------->Tax Rate Value is \" + ra19);",
									"    tests[\"<----\" + P + \"------------End of Reward Model2---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"    ",
									"    tests[\"<--\" + P + \"-----End of Rewards Available for Collection Model------------>\"] = responseBody.has(\"rewardsAvailableForTransaction\");",
									"    console.log(\"<-----------End of Rewards Available for Collection Model--------->\");",
									"}); ",
									"postman.setGlobalVariable(\"Test6\", () => {",
									"    ",
									"    P = \"-----\";",
									"\t //   - Validating Loylaty Points Collection Model",
									"",
									"    var LP11 = responseJSON.loyaltyAccount.loyaltyPoints[1].points;",
									"    var LP12 = responseJSON.loyaltyAccount.loyaltyPoints[1].employeeId;",
									"    tests[P +\"Points are \" + LP11] = LP11 <4000;",
									"    console.log(\"Points are \" + LP11);",
									"    tests[P+\"Employee ID is \" + LP12] = LP12 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP12);",
									"",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<--\" + P + \"-------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var LP13 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.id;",
									"    var LP14 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.name;",
									"    var LP15 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.typeName;",
									"",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + LP13] = LP13 === 4;",
									"    console.log(\"2--->Loyalty Program ID is \" + LP13);",
									"    tests[\"--\" + P + \"-->Loyalty Program Name is \" + LP14] = LP14 === \"4ProductPoint\";",
									"    console.log(\"--->Loyalty Program Name is \" + LP14);",
									"    tests[\"--\" + P + \"-->Loyalty Prorgram Type Name is \" + LP15] = LP15 === \"Product Level\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + LP15);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<--\" + P + \"-------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<---------------------Tenders Collection Model--------------------->\");",
									"",
									"    var LP16 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.tenders[0].id;",
									"    var LP17 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.tenders[0].name;",
									"    var LP18 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.tenders[1].id;",
									"    var LP19 = responseJSON.loyaltyAccount.loyaltyPoints[1].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"--\" + P + \"-->Tender ID is \" + LP16] = LP16 === 1;",
									"    console.log(\"----------->Tender ID is \" + LP16);",
									"    tests[\"--\" + P + \"-->Tender Name is \" + LP17] = LP17 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + LP17);",
									"    tests[\"--\" + P + \"-->Tender ID is \" + LP18] = LP18 === 2;",
									"    console.log(\"----------->Tender ID is \" + LP18);",
									"    tests[\"--\" + P + \"-->Tender Name is \" + LP19] = LP19 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + LP19);",
									"",
									"    tests[\"<--\" + P + \"------------End Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<------------------End Tenders Collection Model--------------------->\");",
									"    tests[\"<--\" + P + \"-----------End Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"    ",
									"});",
									"postman.setGlobalVariable(\"Test7\", () => {",
									"    ",
									"    P = \"------\";",
									"\t //   - Validating Loylaty Points Collection Model",
									"",
									"    var LP11 = responseJSON.loyaltyAccount.loyaltyPoints[2].points;",
									"    var LP12 = responseJSON.loyaltyAccount.loyaltyPoints[2].employeeId;",
									"    tests[P +\"Points are \" + LP11] = LP11 <4000;",
									"    console.log(\"Points are \" + LP11);",
									"    tests[P+\"Employee ID is \" + LP12] = LP12 === 1000000453;",
									"    console.log(\"Employee ID is \" + LP12);",
									"",
									"    //   - Validating Loylaty Program Model",
									"",
									"    tests[\"<--\" + P + \"-------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"    var LP13 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.id;",
									"    var LP14 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.name;",
									"    var LP15 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.typeName;",
									"",
									"    tests[\"--\" + P + \"-->Loyalty Program ID is \" + LP13] = LP13 === 5;",
									"    console.log(\"2--->Loyalty Program ID is \" + LP13);",
									"    tests[\"--\" + P + \"-->Loyalty Program Name is \" + LP14] = LP14 === \"5WellnessPoint\";",
									"    console.log(\"--->Loyalty Program Name is \" + LP14);",
									"    tests[\"--\" + P + \"-->Loyalty Prorgram Type Name is \" + LP15] = LP15 === \"Wellness\";",
									"    console.log(\"--->Loylaty Program Type Name is \" + LP15);",
									"",
									"    //   - Validating Tenders Collection Model",
									"",
									"    tests[\"<--\" + P + \"-------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<---------------------Tenders Collection Model--------------------->\");",
									"",
									"    var LP16 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.tenders[0].id;",
									"    var LP17 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.tenders[0].name;",
									"    var LP18 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.tenders[1].id;",
									"    var LP19 = responseJSON.loyaltyAccount.loyaltyPoints[2].loyaltyProgram.tenders[1].name;",
									"",
									"    tests[\"--\" + P + \"-->Tender ID is \" + LP16] = LP16 === 1;",
									"    console.log(\"----------->Tender ID is \" + LP16);",
									"    tests[\"--\" + P + \"-->Tender Name is \" + LP17] = LP17 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + LP17);",
									"    tests[\"--\" + P + \"-->Tender ID is \" + LP18] = LP18 === 2;",
									"    console.log(\"----------->Tender ID is \" + LP18);",
									"    tests[\"--\" + P + \"-->Tender Name is \" + LP19] = LP19 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + LP19);",
									"",
									"    tests[\"<--\" + P + \"------------End Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<------------------End Tenders Collection Model--------------------->\");",
									"    tests[\"<--\" + P + \"-----------End Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"    console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"",
									"    ",
									"});",
									"postman.setGlobalVariable(\"product\", () => {",
									"      //   - Validating Products Model",
									"    P = \"-------\";",
									"    tests[\"<-----------------Products Model------------------>\"] = responseBody.has(\"products\");",
									"    console.log(\"<1-----------------------Products Model-------------------->\");",
									"",
									"    var pid2 = responseJSON.products[0].quantity;",
									"    var pid3 = responseJSON.products[0].amount;",
									"    var pid4 = responseJSON.products[0].extendedAmount;",
									"    var pid5 = responseJSON.products[0].eligibleAmount;",
									"",
									"    tests[\"--\" + P + \">Quantity is \" + pid2] = pid2 === 1;",
									"    console.log(\"------>Quantity is \" + pid2);",
									"    tests[\"--\" + P + \">Amount is \" + pid3] = pid3 === 2;",
									"    console.log(\"----->Amount is \" + pid3);",
									"    tests[\"--\" + P + \">Extended Amount is \" + pid4] = pid4 === 2;",
									"    console.log(\"----->Extended Amount is \" + pid4);",
									"   tests[\"--\" + P + \">Eligible Amount is \" + pid5] = pid5 === 0;",
									"    console.log(\"---->Eligible Amount is \" + pid5);",
									"",
									"    //  - Validating Product Model",
									"",
									"    var prd1 = responseJSON.products[0].product.id;",
									"    var prd2 = responseJSON.products[0].product.name;",
									"    var prd3 = responseJSON.products[0].product.description;",
									"    var prd4 = responseJSON.products[0].product.productCode;",
									"    var prd5 = responseJSON.products[0].product.subDepartment;",
									"    var prd6 = responseJSON.products[0].product.department;",
									"    var prd7 = responseJSON.products[0].product.isModifier;",
									"    tests[\"<---------------Product Model--------------------->\"] = responseBody.has(\"product\");",
									"    console.log(\"<----------------------Product Model--------------------->\");",
									"",
									"    tests[\"--\" + P + \">ID is \" + prd1] = prd1 === 1;",
									"    console.log(\"---->ID is \" + prd1);",
									"    tests[\"--\" + P + \">Name is \" + prd2] = prd2 === \"Eggs\";",
									"    console.log(\"---->Name is \" + prd2);",
									"    tests[\"--\" + P + \">   Description is \" + prd3] = prd3 === \" \";",
									"    console.log(\"---->Description is \" + prd3);",
									"    tests[\"--\" + P + \">Product Code is \" + prd4] = prd4 === \"11111\";",
									"    console.log(\"---->Product Code is \" + prd4);",
									"    tests[\"--\" + P + \">Sub Department is \" + prd5] = prd5 === \"1Breakfast\";",
									"    console.log(\"---->Sub Department is \" + prd5);",
									"    tests[\"--\" + P + \">Department is \" + prd6] = prd6 === \"1Food\";",
									"    console.log(\"---->Department is \" + prd6);",
									"    tests[\"--\" + P + \">isModifier is \" + prd7] = prd7 === false;",
									"    console.log(\"---->isModifier is \" + prd7);",
									"",
									"    tests[\"<----------------End Product Model--------------------->\"] = responseBody.has(\"product\");",
									"    console.log(\"<----------------------Product Model--------------------->\");",
									"});",
									"postman.setGlobalVariable(\"itemrewards\", () => {",
									"    P = \"---------\";",
									"    var r01 = responseJSON.products[0].rewards[0].id;",
									"    var r02 = responseJSON.products[0].rewards[0].itemTypeId;",
									"    var r03 = responseJSON.products[0].rewards[0].itemId;",
									"    var r04 = responseJSON.products[0].rewards[0].eligibleAmount;",
									"    var r05 = responseJSON.products[0].rewards[0].amount;",
									"\t",
									"\ttests[\"--\" + P + \"-->Reward ID Value is \" + r01] = r01 === null;",
									"    console.log(\"---->Reward ID Value is \" + r01);",
									"    tests[\"--\" + P + \"-->Item Type ID Value is \" + r02] = r02 === 30;",
									"    console.log(\"---->Item Type ID Value is \" + r02);",
									"    tests[\"--\" + P + \"-->Item Id Value is \" + r03] = r03 === pm.globals.get(\"Id1\");",
									"    console.log(\"---->Item Id Value is \" + r03);",
									"    tests[\"--\" + P + \"-->Eligible Amount is \" + r04] = r04 === 2;",
									"    console.log(\"---->Eligible Amount is \" + r04);",
									"    tests[\"--\" + P + \"-->Amount is \" + r05] = r05 === -2;",
									"    console.log(\"---->Amount is \" + r05);",
									"    ",
									" tests[\"<--\" + P + \"----------------Reward Model1---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"",
									"    var r1 = responseJSON.products[0].rewards[0].reward.id;",
									"    var r2 = responseJSON.products[0].rewards[0].reward.pointsToRedeem;",
									"    var r3 = responseJSON.products[0].rewards[0].reward.typeName;",
									"    var r4 = responseJSON.products[0].rewards[0].reward.name;",
									"    var r5 = responseJSON.products[0].rewards[0].reward.value;",
									"    var r6 = responseJSON.products[0].rewards[0].reward.autoPayout;",
									"    var r7 = responseJSON.products[0].rewards[0].reward.taxes[0].id;",
									"    var r8 = responseJSON.products[0].rewards[0].reward.taxes[0].name;",
									"    var r9 = responseJSON.products[0].rewards[0].reward.taxes[0].taxRate;",
									"   ",
									"",
									"    tests[\"--\" + P + \"-->Reward ID Value is \" + r1] = r1 === pm.globals.get(\"Id1\");",
									"    console.log(\"---->Reward ID Value is \" + r1);",
									"    tests[\"--\" + P + \"-->Points To Redeem Value is \" + r2] = r2 === 1;",
									"    console.log(\"---->Points To Redeem Value is \" + r2);",
									"    tests[\"--\" + P + \"-->Type Name Value is \" + r3] = r3 === pm.globals.get(\"RwdTypeName\");",
									"    console.log(\"---->Type Name Value is \" + r3);",
									"    tests[\"--\" + P + \"-->Name is \" + r4] = r4 === pm.globals.get(\"RwdName\");",
									"    console.log(\"---->Name is \" + r4);",
									"    tests[\"--\" + P + \"-->Value is \" + r5] = r5 === 2;",
									"    console.log(\"---->Value is \" + r5);",
									"    tests[\"--\" + P + \"-->Auto Payout Value is \" + r6] = r6 === false;",
									"    console.log(\"---->Auto Payout Value is \" + r6);",
									"   ",
									"    // Validating the field values of Taxes Collection Model",
									"",
									"    tests[ \"--\" + P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"    console.log(\"---->Taxes are Present\");",
									"",
									"    tests[\"--\" + P + \"--->Tax Id is \" + r7] = r7 === 19;",
									"    console.log(\"------->Tax Id is \" + r7);",
									"    tests[\"--\" + P + \"--->Tax Name is \" + r8] = r8 === \"Hospital 1 Tax\";",
									"    console.log(\"------->Tax Name is \" + r8);",
									"    tests[\"--\" + P + \"--->Tax rate Value is \" + r9] = r9 === 0.05;",
									"    console.log(\"------->Tax rate Value is \" + r9);",
									"",
									"    tests[\"--\" + P + \"------------End of Reward Model1---------------->\"] = true;",
									"    console.log(\"<-------------------Reward Model---------------------->\");",
									"    ",
									"});",
									"postman.setGlobalVariable(\"loyaltypointdetails\", () => {",
									"    ",
									"P = \"---------\";",
									"var lpd1 = responseJSON.products[0].loyaltyPointDetails[0].id;",
									"var lpd2 = responseJSON.products[0].loyaltyPointDetails[0].loyaltyProgramId;",
									"var lpd3 = responseJSON.products[0].loyaltyPointDetails[0].points;",
									"var lpd4 = responseJSON.products[0].loyaltyPointDetails[0].eligibleAmount;",
									"var lpd5 = responseJSON.products[0].loyaltyPointDetails[0].refundedPoints;",
									"var lpd6 = responseJSON.products[0].loyaltyPointDetails[0].refundedEligibleAmount;",
									"var lpd7 = responseJSON.products[0].loyaltyPointDetails[0].transLineItemId;",
									"var lpd8 = responseJSON.products[0].loyaltyPointDetails[0].loyaltyAccountPointId;",
									"",
									"tests[\"<--\" + P + \"----------------Loyalty Point Details Model---------------->\"] = true;",
									"console.log(\"<-------------------Loyalty Point Details Model---------------------->\");",
									"",
									"",
									"tests[\"--\" + P + \"--->Reward ID Value is \" + lpd1] = lpd1 === null;",
									"console.log(\"---->Reward ID Value is \" + lpd1);",
									"tests[\"--\" + P + \"--->Loyalty Program Id is \" + lpd2] = lpd2 === 1;",
									"console.log(\"---->Loyalty Program Id is \" + lpd2);",
									"tests[\"--\" + P + \"--->Points are \" + lpd3] = lpd3 === -1;",
									"console.log(\"---->Points are \" + lpd3);",
									"tests[\"--\" + P + \"--->Eligible Amount is \" + lpd4] = lpd4 === 2;",
									"console.log(\"---->Eligible Amount is \" + lpd4);",
									"tests[\"--\" + P + \"--->Refunded Points are \" + lpd5] = lpd5 === 0;",
									"console.log(\"---->Refunded Points are \" + lpd5);",
									"tests[\"--\" + P + \"-->Refunded Eligible Amount is \" + lpd6] = lpd6 === 0;",
									"console.log(\"---->Refunded Eligible Amount is \" + lpd6);",
									"tests[\"--\" + P + \"-->PA TransLine Item Id is \" + lpd7] = lpd7 === null;",
									"console.log(\"---->PA TransLine Item Id is \" + lpd7);",
									"tests[\"--\" + P + \"-->Loyalty Account Point Id is \" + lpd8] = lpd8 === null;",
									"console.log(\"---->Loyalty Account Point Id is \" + lpd8);",
									"",
									"tests[\"<--\" + P + \"----------------End Loyalty Point Details Model---------------->\"] = true;",
									"console.log(\"<-------------------End Loyalty Point Details Model---------------------->\");",
									"   ",
									"    ",
									"});",
									"postman.setGlobalVariable(\"Cash\", () => {    ",
									"    tests[\"<------------------Products Model------------------>\"] = responseBody.has(\"products\");",
									"    console.log(\"<1----------------------Products Model-------------------->\");",
									"  ",
									"    //   - Validating Tenders Model",
									"    P = \"-----------\";",
									"",
									"    tests[\"<1------------------Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\");",
									"",
									"    var Td2 = responseJSON.tenders[0].itemTypeId;",
									"    var Td3 = responseJSON.tenders[0].quantity;",
									"    var Td4 = responseJSON.tenders[0].amount;",
									"    var Td5 = responseJSON.tenders[0].extendedAmount;",
									"    var Td6 = responseJSON.tenders[0].eligibleAmount;",
									"    var Td7 = responseJSON.tenders[0].payments;",
									"    var Td8 = responseJSON.tenders[0].paymentMethodType;",
									"",
									"   ",
									"    tests[\"---\" + P + \"-->Item Type ID is \" + Td2] = Td2 === 3;",
									"    console.log(\"---->Item Type ID is \" + Td2);",
									"    tests[\"---\" + P + \"-->Quantity is \" + Td3] = Td3 === 1;",
									"    console.log(\"---->Quantity is \" + Td3);",
									"    tests[\"---\" + P + \"-->Amount is \" + Td4] = Td4 === 2;",
									"    console.log(\"---->Amount is \" + Td4);",
									"    tests[\"---\" + P + \"-->Extended Amount is \" + Td5] = Td5 === 2;",
									"    console.log(\"---->Extended Amount is \" + Td5);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Td6] = Td6 === 0;",
									"    console.log(\"---->Eligible Amount is \" + Td6);",
									"    tests[\"---\" + P + \"-->Payments is \" + Td7] = Td7 === null;",
									"    console.log(\"---->Payments is \" + Td7);",
									"    tests[\"---\" + P + \"-->Payment Method Type is \" + Td8] = Td8 === \"\";",
									"    console.log(\"---->Payment Method Type is \" + Td8);",
									"    //   - Validating Tender Model",
									"",
									"    tests[\"<2------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    var Tdr1 = responseJSON.tenders[0].tender.id;",
									"    var Tdr2 = responseJSON.tenders[0].tender.name;",
									"",
									"    tests[\"---\" + P + \"--->Tender ID is \" + Tdr1] = Tdr1 === 2;",
									"    console.log(\"----------->Tender ID is \" + Tdr1);",
									"    tests[\"---\" + P + \"--->Tender Name is \" + Tdr2] = Tdr2 === \"Cash\";",
									"    console.log(\"----------->Tender Name is \" + Tdr2);",
									"",
									"",
									"    tests[\"<---\" + P + \"-----------End Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"",
									"    tests[\"<---\" + P + \"------------End Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\"); ",
									"});  ",
									"postman.setGlobalVariable(\"Quickcharge\", () => {    ",
									"    tests[\"<------------------Products Model------------------>\"] = responseBody.has(\"products\");",
									"    console.log(\"<1----------------------Products Model-------------------->\");",
									"  ",
									"    //   - Validating Tenders Model",
									"     P = \"-----------\";",
									"",
									"    tests[\"<1------------------Tenders Model------------------>\"] = responseBody.has(\"tenders\");",
									"    console.log(\"<1-----------------------Tenders Model-------------------->\");",
									"    ",
									"    var Td1 = responseJSON.tenders[0].employeeId;",
									"    var Td2 = responseJSON.tenders[0].itemTypeId;",
									"    var Td3 = responseJSON.tenders[0].quantity;",
									"    var Td4 = responseJSON.tenders[0].amount;",
									"    var Td5 = responseJSON.tenders[0].extendedAmount;",
									"    var Td6 = responseJSON.tenders[0].eligibleAmount;",
									"    var Td7 = responseJSON.tenders[0].payments;",
									"    var Td8 = responseJSON.tenders[0].paymentMethodType;",
									"",
									"   ",
									"    tests[\"---\" + P + \"-->Item Type ID is \" + Td2] = Td2 === 3;",
									"    console.log(\"---->Item Type ID is \" + Td2);",
									"    tests[\"---\" + P + \"-->Employee ID is \" + Td1] = Td1 !== undefined;",
									"    console.log(\"---->Employee ID is \" + Td1);",
									"    tests[\"---\" + P + \"-->Quantity is \" + Td3] = Td3 === 1;",
									"    console.log(\"---->Quantity is \" + Td3);",
									"    tests[\"---\" + P + \"-->Amount is \" + Td4] = Td4 === pm.globals.get(\"Amt\");",
									"    console.log(\"---->Amount is \" + Td4);",
									"    tests[\"---\" + P + \"-->Extended Amount is \" + Td5] = Td5 ===pm.globals.get(\"Amt\");",
									"    console.log(\"---->Extended Amount is \" + Td5);",
									"    tests[\"---\" + P + \"-->Eligible Amount is \" + Td6] = Td6 === 0;",
									"    console.log(\"---->Eligible Amount is \" + Td6);",
									"    tests[\"---\" + P + \"-->Payments is \" + Td7] = Td7 === null;",
									"    console.log(\"---->Payments is \" + Td7);",
									"    tests[\"---\" + P + \"-->Payment Method Type is \" + Td8] = Td8 === \"\";",
									"    console.log(\"---->Payment Method Type is \" + Td8);",
									"    //   - Validating Tender Model",
									"",
									"    tests[\"<------------------Tender Model------------------>\"] = responseBody.has(\"tender\");",
									"    console.log(\"<-----------------------Tender Model-------------------->\");",
									"",
									"    var Tdr1 = responseJSON.tenders[0].tender.id;",
									"    var Tdr2 = responseJSON.tenders[0].tender.name;",
									"",
									"    tests[\"---\" + P + \"--->Tender ID is \" + Tdr1] = Tdr1 === 1;",
									"    console.log(\"----------->Tender ID is \" + Tdr1);",
									"    tests[\"---\" + P + \"--->Tender Name is \" + Tdr2] = Tdr2 === \"quickcharge\";",
									"    console.log(\"----------->Tender Name is \" + Tdr2);",
									"",
									"",
									"    tests[\"<---\" + P + \"------End Tender Model------------->\"] = responseBody.has(\"tender\");",
									"    console.log(\"<2-----------------------Tender Model-------------------->\");",
									"});  ",
									"postman.setGlobalVariable(\"account\", () => {",
									"    //   - Validating Loyalty Account Model",
									"    P = \"------------\";",
									"    var LA1 = responseJSON.tenders[0].account.id;",
									"    var LA2 = responseJSON.tenders[0].account.name;",
									"    var LA3 = responseJSON.tenders[0].account.badge;",
									"    var LA4 = responseJSON.tenders[0].account.number;",
									"    var LA5 = responseJSON.tenders[0].account.status;",
									"    var LA6 = responseJSON.tenders[0].account.accountType;",
									"    var LA7 = responseJSON.tenders[0].account.email;",
									"    var LA8 = responseJSON.tenders[0].account.available;",
									"    var LA9 = responseJSON.tenders[0].account.singleChargeLimit;",
									"    var LA10 = responseJSON.tenders[0].account.terminalGroupBalance;",
									"    var LA11 = responseJSON.tenders[0].account.terminalGroupLimit;",
									"    var LA12 = responseJSON.tenders[0].account.globalBalance;",
									"    var LA13 = responseJSON.tenders[0].account.globalLimit;",
									"    var LA18 = responseJSON.tenders[0].account.eligiblePayments;",
									"    var LA14 = responseJSON.tenders[0].account.receiptBalanceLabel;",
									"    var LA15 = responseJSON.tenders[0].account.receiptBalance;",
									"    var LA16 = responseJSON.tenders[0].account.receiptBalanceTypeId;",
									"    var LA17 = responseJSON.tenders[0].account.payrollGroupingId;",
									"    var LA19 = responseJSON.tenders[0].account.qcDiscountsAvailable[0].id;",
									"    var LA20 = responseJSON.tenders[0].account.qcDiscountsAvailable[0].name;",
									"    var LA21 = responseJSON.tenders[0].account.qcDiscountsAvailable[0].discountType;",
									"    var LA22 = responseJSON.tenders[0].account.qcDiscountsAvailable[0].amount;",
									"    tests[\"<--------------------Account Model--------------------->\"] = responseBody.has(\"id\");",
									"    console.log(\"<---------------Account Model--------------------->\");",
									"    tests[P + \"---->Loyalty Account ID is \" + LA1] = LA1 === 1000000453;",
									"    console.log(\"---->Loyalty Account ID is \" + LA1);",
									"    tests[P + \"---->Name is \" + LA2] = LA2 === \"Avinash R\";",
									"    console.log(\"---->Name is \" + LA2);",
									"    tests[P + \"---->Badge is \" + LA3] = LA3 === \"17111\";",
									"    console.log(\"---->Badge is \" + LA3);",
									"    tests[P + \"---->Number is \" + LA4] = LA4 === \"17111\";",
									"    console.log(\"---->Number is \" + LA4);",
									"    tests[P + \"---->Status is \" + LA5] = LA5 === \"Active\";",
									"    console.log(\"---->Status is \" + LA5);",
									"    tests[P + \"---->Account Type is \" + LA6] = LA6 === \"Payroll Deduction\";",
									"    console.log(\"---->Account Type is \" + LA6);",
									"    tests[P + \"---->Email is \" + LA7] = LA7 === \"sbandi@mmhayes.com\";",
									"    console.log(\"---->Email is \" + LA7);",
									"    tests[P + \"---->Availabale Amount is \" + LA8] = LA8 !== undefined;",
									"    console.log(\"---->Available Amount is \" + LA8);",
									"    tests[P + \"---->Single Charge Limit Amount is \" + LA9] = LA9 !== undefined;",
									"    console.log(\"---->Single Charge Limit Amount is \" + LA9);",
									"    tests[P + \"---->Terminal Group Balance is \" + LA10] = LA10 !== undefined;",
									"    console.log(\"---->Terminal Group Balance is \" + LA10);",
									"    tests[P + \"---->Terminal Group Limit is \" + LA11] = LA11 !== undefined;",
									"    console.log(\"---->Terminal Group Limit is \" + LA11);",
									"    tests[P + \"---->Global Balance is \" + LA12] = LA12 !== undefined;",
									"    console.log(\"---->Global Balance is \" + LA12);",
									"    tests[P + \"---->Global Limit is \" + LA13] = LA13 !== undefined;",
									"    console.log(\"---->Global Limit is \" + LA13);",
									"    tests[P + \"---->Eligible Payments is \" + LA18] = LA18 === 1;",
									"    console.log(\"---->Eligible Payments is \" + LA18);",
									"    tests[P + \"---->Receipt Balance Label is \" + LA14] = LA14 === \"Customer's Balance\";",
									"    console.log(\"---->Receipt Balance Label is \" + LA14);",
									"    tests[P + \"---->Receipt Balance is \" + LA15] = LA15 !== undefined;",
									"    console.log(\"---->Receipt Balance is \" + LA15);",
									"    tests[P + \"---->Receipt Balance Type Id is \" + LA16] = LA16 === 3;",
									"    console.log(\"---->Receipt Balance Type Id is \" + LA16);",
									"    tests[P + \"---->Payroll Grouping Id is \" + LA17] = LA17 === 1;",
									"    console.log(\"---->Payroll Grouping Id is \" + LA17);",
									"    tests[P + \"QC Discounts Available collection Model is Present\"] = responseBody.has(\"qcDiscountsAvailable\");",
									"    console.log(\"QC Discounts Available Model is Present\");",
									"    tests[P + \"----->Id is \" + LA19] = LA19 === 1;",
									"     console.log(\"---->Id is \" + LA19);",
									"     tests[P + \"----->Name is \" + LA20] = LA20 === \"Cafe Emps Brkfst\";",
									"     console.log(\"----->Name is \" + LA20);",
									"     tests[P + \"----->Discount Type is \" + LA21] = LA21 === \"Percent\";",
									"     console.log(\"---->Discount Type is \" + LA21);",
									"     tests[P + \"----->Amount is \" + LA22] = LA22 === 25;",
									"     console.log(\"---->Amount is \" + LA22);",
									"    tests[P + \"QC Discounts Applied collection Model is Present\"] = responseBody.has(\"qcDiscountsApplied\");",
									"    console.log(\"QC Discounts Applied Model is Present\");",
									"   tests[\"<--------------------End of Account Model--------------------->\"] = responseBody.has(\"id\");",
									"    console.log(\"<---------------End of Account Model--------------------->\");",
									"   ",
									"});",
									"postman.setGlobalVariable(\"rewards\", () => {",
									"P =\"-------------\";   ",
									"var ra01 = responseJSON.rewards[0].employeeId;",
									"var ra02 = responseJSON.rewards[0].quantity;",
									"var ra03 = responseJSON.rewards[0].amount;",
									"var ra04 = responseJSON.rewards[0].extendedAmount;",
									"var ra05 = responseJSON.rewards[0].eligibleAmount;",
									"",
									"tests[\"--\" + P + \"-->Employee ID Value is \" + ra01] = ra01 === 1000000453;",
									"console.log(\"---->Employee ID Value is \" + ra01);",
									"tests[\"--\" + P + \"-->Quantity is \" + ra02] = ra02 === 1;",
									"console.log(\"---->Quantity is \" + ra02);",
									"tests[\"--\" + P + \"-->Amount is \" + ra03] = ra03 === -2;",
									"console.log(\"---->Amount is \" + ra03);",
									"tests[\"--\" + P + \"-->Extended Amount is \" + ra04] = ra04 === -2;",
									"console.log(\"---->Extended Amount is \" + ra04);",
									"tests[\"--\" + P + \"-->Eligible Amount is \" + ra05] = ra05 === 2;",
									"console.log(\"---->Eligible Amount is \" + ra05);",
									"",
									"",
									"tests[\"<--\" + P + \"----------------Rewards Model---------------->\"] = true;",
									"console.log(\"<-------------------Rewards Model---------------------->\");",
									"",
									"var ra1 = responseJSON.rewards[0].reward.id;",
									"var ra2 = responseJSON.rewards[0].reward.pointsToRedeem;",
									"var ra3 = responseJSON.rewards[0].reward.typeName;",
									"var ra4 = responseJSON.rewards[0].reward.name;",
									"var ra5 = responseJSON.rewards[0].reward.value;",
									"var ra6 = responseJSON.rewards[0].reward.autoPayout;",
									"var ra7 = responseJSON.rewards[0].reward.taxes[0].id;",
									"var ra8 = responseJSON.rewards[0].reward.taxes[0].name;",
									"var ra9 = responseJSON.rewards[0].reward.taxes[0].taxRate;",
									"",
									"    ",
									"tests[\"--\" + P + \"-->Reward ID Value is \" + ra1] = ra1 === pm.globals.get(\"Id1\");",
									"console.log(\"---->Reward ID Value is \" + ra1);",
									"tests[\"--\" + P + \"-->Points To Redeem Value is \" + ra2] = ra2 === 1;",
									"console.log(\"---->Points To Redeem Value is \" + ra2);",
									"tests[\"--\" + P + \"-->Type Name Value is \" + ra3] = ra3 === pm.globals.get(\"RwdTypeName\");",
									"console.log(\"---->Type Name Value is \" + ra3);",
									"tests[\"--\" + P + \"-->Name is \" + ra4] = ra4 === pm.globals.get(\"RwdName\");",
									"console.log(\"---->Name is \" + ra4);",
									"tests[\"--\" + P + \"---->Value is \" + ra5] = ra5 === 2;",
									"console.log(\"---->Value is \" + ra5);",
									"tests[\"--\" + P + \"-->Auto Payout Value is \" + ra6] = ra6 === false;",
									"console.log(\"---->Auto Payout Value is \" + ra6);",
									"",
									"// Validating the field values of Taxes Collection Model",
									"",
									"tests[ \"--\" + P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"--\" + P + \"--->Tax Id is \" + ra7] = ra7 === 19;",
									"console.log(\"------->Tax Id is \" + ra7);",
									"tests[\"--\" + P + \"--->Tax Name is \" + ra8] = ra8 === \"Hospital 1 Tax\";",
									"console.log(\"------->Tax Name is \" + ra8);",
									"tests[\"--\" + P + \"--->Tax Rate Value is \" + ra9] = ra9 === 0.05;",
									"console.log(\"------->Tax Rate Value is \" + ra9);",
									"",
									"tests[\"--\" + P + \"------------End of Rewards Model---------------->\"] = true;",
									"console.log(\"<----------------End of Rewards Model---------------------->\");",
									"",
									"",
									"});",
									"postman.setGlobalVariable(\"loyaltypointsredeemed\", () => {",
									"    ",
									"P =\"--------------\";   ",
									"tests[\"<------------Loyalty Points Redeemed Collection Model--------------->\"] = true;",
									"console.log(\"<----------------------------Loyalty Points Redeemed Collection Model---------------------->\");",
									"",
									"var lpr1 = responseJSON.loyaltyPointsRedeemed[0].points;",
									"var lpr2 = responseJSON.loyaltyPointsRedeemed[0].employeeId;",
									"",
									"tests[P +\"--->Points are \" + lpr1] = lpr1 === 1;",
									"console.log(\"--->Points are \" + lpr1);",
									"tests[P +\"--->Employee ID is \" + lpr2] = lpr2 === null;",
									"console.log(\"--->Employee ID is \" + lpr2);",
									"",
									"//   - Validating Loylaty Program Model",
									"",
									"tests[\"<------------------Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"console.log(\"<----------------------------Loyalty Program Model---------------------->\");",
									"",
									"var lpr3 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.id;",
									"var lpr4 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.name;",
									"var lpr5 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.typeName;",
									"",
									"tests[P +\"--->Loyalty Program ID is \" + lpr3] = lpr3 === 1;",
									"console.log(\"2--->Loyalty Program ID is \" + lpr3);",
									"tests[P +\"--->Loyalty Program Name is \" + lpr4] = lpr4 === \"1Dollar\";",
									"console.log(\"--->Loyalty Program Name is \" + lpr4);",
									"tests[P +\"--->Loyalty Prorgram Type Name is \" + lpr5] = lpr5 === \"Dollar\";",
									"console.log(\"--->Loylaty Program Type Name is \" + lpr5);",
									"",
									"//   - Validating Tenders Collection Model",
									"",
									"tests[\"<-----------------------Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"console.log(\"<---------------------Tenders Collection Model--------------------->\");",
									"",
									"var lpr6 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.tenders[0].id;",
									"var lpr7 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.tenders[0].name;",
									"var lpr8 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.tenders[1].id;",
									"var lpr9 = responseJSON.loyaltyPointsRedeemed[0].loyaltyProgram.tenders[1].name;",
									"",
									"tests[P +\"----->Tender ID is \" + lpr6] = lpr6 === 1;",
									"console.log(\"----------->Tender ID is \" + lpr6);",
									"tests[P +\"----->Tender Name is \" + lpr7] = lpr7 === \"quickcharge\";",
									"console.log(\"----------->Tender Name is \" + lpr7);",
									"tests[P +\"----->Tender ID is \" + lpr8] = lpr8 === 2;",
									"console.log(\"----------->Tender ID is \" + lpr8);",
									"tests[P +\"------>Tender Name is \" + lpr9] = lpr9 === \"Cash\";",
									"console.log(\"----------->Tender Name is \" + lpr9);;",
									"",
									"tests[\"<----------------End Tenders Collection Model--------------------->\"] = responseBody.has(\"tenders\");",
									"console.log(\"<--------------------End Tenders Collection Model--------------------->\");",
									"tests[\"<----------------End Loyalty Program Model--------------------->\"] = responseBody.has(\"loyaltyProgram\");",
									"console.log(\"<2------------------------Loyalty Program Model---------------------->\");",
									"",
									"tests[P +\"Rewards Available Model is Present\"] = responseJSON.loyaltyPointsRedeemed[0].rewardsAvailable.length === 0;",
									"console.log(\"<---------------------Rewards Available Model--------------------->\");",
									"tests[P +\"Rewards Available for Transaction Model is Present\"] = responseJSON.loyaltyPointsRedeemed[0].rewardsAvailable.length === 0;",
									"console.log(\"<------------------Rewards Available for Transaction Model--------------------->\");",
									"",
									"tests[\"<--\" + P + \"----------Rewards Model---------------->\"] = true;",
									"console.log(\"<------------Rewards Model---------------------->\");",
									"",
									"var ra01 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].employeeId;",
									"var ra02 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].quantity;",
									"var ra03 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].amount;",
									"var ra04 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].extendedAmount;",
									"var ra05 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].eligibleAmount;",
									"",
									"tests[\"--\" + P + \"-->Employee ID Value is \" + ra01] = ra01 === 1000000453;",
									"console.log(\"---->Employee ID Value is \" + ra01);",
									"tests[\"--\" + P + \"-->Quantity is \" + ra02] = ra02 === 1;",
									"console.log(\"---->Quantity is \" + ra02);",
									"tests[\"--\" + P + \"-->Amount is \" + ra03] = ra03 === -2;",
									"console.log(\"---->Amount is \" + ra03);",
									"tests[\"--\" + P + \"-->Extended Amount is \" + ra04] = ra04 === -2;",
									"console.log(\"---->Extended Amount is \" + ra04);",
									"tests[\"--\" + P + \"-->Eligible Amount is \" + ra05] = ra05 === 2;",
									"console.log(\"---->Eligible Amount is \" + ra05);",
									"",
									"tests[\"<--\" + P + \"----------------------------------->\"] = true;",
									"console.log(\"<------------Reward Model---------------------->\");",
									"",
									"var ra1 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.id;",
									"var ra2 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.pointsToRedeem;",
									"var ra3 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.typeName;",
									"var ra4 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.name;",
									"var ra5 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.value;",
									"var ra6 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.autoPayout;",
									"var ra7 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.taxes[0].id;",
									"var ra8 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.taxes[0].name;",
									"var ra9 = responseJSON.loyaltyPointsRedeemed[0].rewards[0].reward.taxes[0].taxRate;",
									"",
									"    ",
									"tests[\"--\" + P + \"-->Reward ID Value is \" + ra1] = ra1 === pm.globals.get(\"Id1\");",
									"console.log(\"---->Reward ID Value is \" + ra1);",
									"tests[\"--\" + P + \"-->Points To Redeem Value is \" + ra2] = ra2 === 1;",
									"console.log(\"---->Points To Redeem Value is \" + ra2);",
									"tests[\"--\" + P + \"-->Type Name is \" + ra3] = ra3 === pm.globals.get(\"RwdTypeName\");",
									"console.log(\"---->Type Name is \" + ra3);",
									"tests[\"--\" + P + \"-->Name is \" + ra4] = ra4 === pm.globals.get(\"RwdName\");",
									"console.log(\"---->Name is \" + ra4);",
									"tests[\"--\" + P + \"---->Value is \" + ra5] = ra5 === 2;",
									"console.log(\"---->Value is \" + ra5);",
									"tests[\"--\" + P + \"-->Auto Payout Value is \" + ra6] = ra6 === false;",
									"console.log(\"---->Auto Payout Value is \" + ra6);",
									"",
									"// Validating the field values of Taxes Collection Model",
									"",
									"tests[ \"--\" + P + \"Taxes are Present\"] = responseBody.has(\"taxes\");",
									"console.log(\"---->Taxes are Present\");",
									"",
									"tests[\"--\" + P + \"--->Tax Id is \" + ra7] = ra7 === 19;",
									"console.log(\"------->Tax Id is \" + ra7);",
									"tests[\"--\" + P + \"--->Tax Name is \" + ra8] = ra8 === \"Hospital 1 Tax\";",
									"console.log(\"------->Tax Name is \" + ra8);",
									"tests[\"--\" + P + \"--->Tax Rate Value is \" + ra9] = ra9 === 0.05;",
									"console.log(\"------->Tax Rate Value is \" + ra9);",
									"",
									"tests[\"--\" + P + \"------------End of Rewards Model---------------->\"] = true;",
									"console.log(\"<----------------End of Rewards Model---------------------->\");",
									"",
									"});",
									"postman.setGlobalVariable(\"Terminal\",() => {",
									"//   - Validating Terminal Model",
									"   ",
									"",
									"    tests[\"<1-----------------------Terminal Mode------------------------------>\"] = responseBody.has(\"terminal\");",
									"    console.log(\"<1--------------------------Terminal Model--------------------------->\");",
									"",
									"    var Ter1 = responseJSON.terminal.id;",
									"    var Ter2 = responseJSON.terminal.name;",
									"    var Ter3 = responseJSON.terminal.typeId;",
									"    var Ter4 = responseJSON.terminal.defaultPurchaseCategoryId;",
									"",
									"    tests[\"---\" + P + \"-->Terminal ID is \" + Ter1] = Ter1 === 4;",
									"    console.log(\"--->Terminal ID is \" + Ter1);",
									"    tests[\"---\" + P + \"-->Terminal Name is \" + Ter2] = Ter2 === \"Coffee Jazz Datasym\";",
									"    console.log(\"--->Terminal Name is \" + Ter2);",
									"    tests[\"---\" + P + \"-->Terminal Type ID is \" + Ter3] = Ter3 === 4;",
									"   console.log(\"--->Terminal Type ID is \" + Ter3);",
									"    tests[\"---\" + P + \"-->Default Purchase Catergory ID is \" + Ter4] = Ter4 === 4;",
									"    console.log(\"--->Default Purchase Catergory ID is \" + Ter4);",
									"",
									"",
									"    tests[\"<1------------------------Terminal Mode------------------------------>\"] = responseBody.has(\"terminal\");",
									"    console.log(\"<1--------------------------Terminal Model--------------------------->\");",
									"    tests[\"<-----------------------------End Of Test Case ---------------------------------------->\"] = true;",
									"    console.log(\"<---------------------End Of Test Case-------------------->\");",
									"",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "{"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":2,\n\"tender\": {\n\"name\": \"cash\"\n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/inquire",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"inquire"
							]
						},
						"description": "Validating Inquire with Cash Tender"
					},
					"response": []
				},
				{
					"name": "Inquire with Quickcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "096436d3-6bce-468e-912c-b98648d1a825",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"//  - No of Test Cases - ",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"eval(globals.Test1)();",
									"eval(globals.Test2)();",
									"eval(globals.Test3)();",
									"eval(globals.Test4)(); ",
									"eval(globals.Test5)(); ",
									"eval(globals.Test6)();",
									"eval(globals.Test7)();",
									"eval(globals.product)();",
									"eval(globals.Quickcharge)();",
									"eval(globals.account)();",
									"eval(globals.Terminal)(); ",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e08a9de-ff05-4dab-be7a-c654ea6b8448",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"pm.globals.unset(\"Amt\");",
									"pm.globals.set(\"Amt\",2);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "{"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": 2,\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n]\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/inquire",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"inquire"
							]
						},
						"description": "Validating Inquire with Cash Tender"
					},
					"response": []
				},
				{
					"name": "Inquire with FPRwd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "951a977b-df5c-4172-95cd-56b5290c0847",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"",
									"eval(globals.Test1)();",
									"eval(globals.Test2)();",
									"eval(globals.Test3)();",
									"eval(globals.Test4)(); ",
									"eval(globals.Test6)();",
									"eval(globals.Test7)();",
									"eval(globals.product)();",
									"eval(globals.itemrewards)();",
									"eval(globals.loyaltypointdetails)();",
									"eval(globals.Quickcharge)();",
									"eval(globals.account)();",
									"eval(globals.rewards)();",
									"eval(globals.loyaltypointsredeemed)();",
									"eval(globals.Terminal)(); ",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "56c7795b-0998-422f-8ff8-a84979156ca9",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"pm.globals.unset(\"Amt\");",
									"pm.globals.set(\"Amt\",0);",
									"",
									"pm.globals.unset(\"Id1\");",
									"pm.globals.set(\"Id1\",1);",
									"",
									"pm.globals.unset(\"RwdTypeName\");",
									"pm.globals.set(\"RwdTypeName\", \"Free Product(s)\");",
									"",
									"pm.globals.unset(\"RwdName\");",
									"pm.globals.set(\"RwdName\",\"1_Free Product Reward\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "{"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\":0,\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n{\n\"employeeId\": 1000000453,\n\"quantity\": 1,\n\"amount\": 2,\n\"extendedAmount\": 2,\n\"eligibleAmount\": 2,\n\"reward\": {\n    \"id\": 1,\n    \"pointsToRedeem\": 1,\n    \"typeName\": \"Free Product(s)\",\n    \"name\": \"1_Free Product Reward\",\n    \"value\": 2,\n    \"autoPayout\": false,\n    \"taxes\": [\n        {\n            \"id\": 19,\n            \"name\": \"Hospital 1 Tax\",\n            \"taxRate\": 0.05\n        }\n    ],\n    \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n}\n}\n]\n\n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/inquire",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"inquire"
							]
						},
						"description": "Validating Inquire with Cash Tender"
					},
					"response": []
				},
				{
					"name": "Inquire with TCRwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a439a5f-fe94-41e7-81f5-7f53b6a07fa0",
								"type": "text/javascript",
								"exec": [
									"eval(globals.getTimeStamp)();",
									"",
									"pm.globals.unset(\"Id1\");",
									"pm.globals.set(\"Id1\",2);",
									"",
									"pm.globals.unset(\"RwdTypeName\");",
									"pm.globals.set(\"RwdTypeName\", \"Transaction Credit\");",
									"",
									"pm.globals.unset(\"RwdName\");",
									"pm.globals.set(\"RwdName\",\"2_Transaction Credit Reward\");",
									"",
									"if(pm.environment.get(\"count\") < 2)",
									"{",
									"pm.environment.unset(\"count\");",
									"pm.environment.set(\"count\",2);",
									"",
									"pm.environment.unset(\"count1\");",
									"pm.environment.set(\"count1\", 4);",
									"",
									"pm.environment.unset(\"count2\");",
									"pm.environment.set(\"count2\", 2);",
									"",
									"pm.environment.unset(\"count3\");",
									"pm.environment.set(\"count3\", 3);",
									"",
									"pm.environment.unset(\"price\");",
									"pm.environment.set(\"price\", 1.5);",
									"",
									"}",
									"",
									"else",
									"",
									"{",
									"pm.environment.unset(\"count\");",
									"pm.environment.set(\"count\",1);",
									"",
									"pm.environment.unset(\"count1\");",
									"pm.environment.set(\"count1\", 2);",
									"",
									"pm.environment.unset(\"count2\");",
									"pm.environment.set(\"count2\", 0);",
									"",
									"pm.environment.unset(\"count3\");",
									"pm.environment.set(\"count3\", 1);",
									"",
									"pm.environment.unset(\"price\");",
									"pm.environment.set(\"price\", 1.49);",
									"",
									"",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11624cb4-5bd4-4c19-94ba-447d368c3803",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"//var schema = JSON.parse(environment.SaleSchema);",
									"//tv4.validate(responseJSON,schema);",
									"",
									"",
									"if(responseCode.code === 200)",
									"{",
									"",
									"//  - Validating Schema -  ",
									"//eval(globals.commonTest1)();   ",
									"",
									"//  - Validating http Status Code and Content Type and Response Time -  ",
									"eval(globals.commonTest2)();",
									"",
									"",
									"eval(globals.Test1)();",
									"eval(globals.Test2)();",
									"eval(globals.Test3)();",
									"eval(globals.Test4)(); ",
									"eval(globals.Test6)();",
									"eval(globals.Test7)();",
									"eval(globals.product)();",
									"eval(globals.itemrewards)();",
									"eval(globals.loyaltypointdetails)();",
									"eval(globals.Quickcharge)();",
									"eval(globals.account)();",
									"eval(globals.rewards)();",
									"eval(globals.loyaltypointsredeemed)();",
									"eval(globals.Terminal)(); ",
									"}",
									"else",
									"{",
									"//  - Validating the error Message   ",
									"eval(globals.ErrorMessage)();",
									"postman.setNextRequest(null);",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MMHayes-Auth",
								"value": "{{X-MMHAYES-AUTH}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"timeStamp\": \"{{timeStampVariable}}\",\n\"transReferenceNumber\" :12,\n\"transactionTypeId\": 1,\n\n\"products\": [\n{\n\"quantity\": 1,\n\"amount\": 2,\n\"product\": {\n\"name\": \"eggs\"\n}\n}\n],\n\"loyaltyAccount\" : {\n  \"badge\" : \"17111\"\n},\n\"tenders\": [\n  {\n\"amount\": 0,\n\"tender\": {\n\"name\": \"quickcharge\"\n},\n\"account\" :\n{\n\"badge\" : \"17111\"  \n}\n}\n],\n\"rewards\" :[\n   {\n                        \"employeeId\": 1000000453,\n                        \"quantity\": 1,\n                        \"amount\": 2,\n                        \"extendedAmount\": 2,\n                        \"eligibleAmount\": 0,\n                        \"reward\": {\n                            \"id\": 2,\n                            \"pointsToRedeem\": 1,\n                            \"typeName\": \"Transaction Credit\",\n                            \"name\": \"2_Transaction Credit Reward\",\n                            \"value\": 2,\n                            \"autoPayout\": false,\n                            \"taxes\": [\n                                {\n                                    \"id\": 19,\n                                    \"name\": \"Hospital 1 Tax\",\n                                    \"taxRate\": 0.05\n                                }\n                            ],\n                            \"notes\": \"  Reward is valid: it is set to Apply To All Plus\"\n                        }\n                    }\n      ]\n  \n}\n"
						},
						"url": {
							"raw": "http://{{serverName}}/{{warName}}/api/transaction/inquire",
							"protocol": "http",
							"host": [
								"{{serverName}}"
							],
							"path": [
								"{{warName}}",
								"api",
								"transaction",
								"inquire"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}